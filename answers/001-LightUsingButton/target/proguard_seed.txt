com.kenai.jffi.Aggregate
com.kenai.jffi.Aggregate: com.kenai.jffi.Type$TypeInfo typeInfo
com.kenai.jffi.Aggregate: com.kenai.jffi.Foreign foreign
com.kenai.jffi.Aggregate: Aggregate(com.kenai.jffi.Foreign,long)
com.kenai.jffi.Aggregate: com.kenai.jffi.Type$TypeInfo getTypeInfo()
com.kenai.jffi.Aggregate: void dispose()
com.kenai.jffi.Aggregate: void finalize()
com.kenai.jffi.Array
com.kenai.jffi.Array: com.kenai.jffi.Type elementType
com.kenai.jffi.Array: int length
com.kenai.jffi.Array: com.kenai.jffi.Array newArray(com.kenai.jffi.Type,int)
com.kenai.jffi.Array: Array(com.kenai.jffi.Type,int)
com.kenai.jffi.Array: com.kenai.jffi.Type getElementType()
com.kenai.jffi.Array: int length()
com.kenai.jffi.Array: boolean equals(java.lang.Object)
com.kenai.jffi.Array: int hashCode()
com.kenai.jffi.ArrayFlags
com.kenai.jffi.ArrayFlags: int IN
com.kenai.jffi.ArrayFlags: int OUT
com.kenai.jffi.ArrayFlags: int PINNED
com.kenai.jffi.ArrayFlags: int NULTERMINATE
com.kenai.jffi.ArrayFlags: int CLEAR
com.kenai.jffi.ArrayFlags: ArrayFlags()
com.kenai.jffi.ArrayFlags: boolean isOut(int)
com.kenai.jffi.ArrayFlags: boolean isIn(int)
com.kenai.jffi.CallContext
com.kenai.jffi.CallContext: long contextAddress
com.kenai.jffi.CallContext: int parameterCount
com.kenai.jffi.CallContext: int rawParameterSize
com.kenai.jffi.CallContext: com.kenai.jffi.Type returnType
com.kenai.jffi.CallContext: com.kenai.jffi.Type[] parameterTypes
com.kenai.jffi.CallContext: long[] parameterTypeHandles
com.kenai.jffi.CallContext: int flags
com.kenai.jffi.CallContext: com.kenai.jffi.Foreign foreign
com.kenai.jffi.CallContext: com.kenai.jffi.CallContext getCallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean)
com.kenai.jffi.CallContext: com.kenai.jffi.CallContext getCallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean,boolean)
com.kenai.jffi.CallContext: CallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[])
com.kenai.jffi.CallContext: CallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention)
com.kenai.jffi.CallContext: CallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean)
com.kenai.jffi.CallContext: CallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean,boolean)
com.kenai.jffi.CallContext: int getParameterCount()
com.kenai.jffi.CallContext: int getRawParameterSize()
com.kenai.jffi.CallContext: long getAddress()
com.kenai.jffi.CallContext: com.kenai.jffi.Type getReturnType()
com.kenai.jffi.CallContext: com.kenai.jffi.Type getParameterType(int)
com.kenai.jffi.CallContext: boolean equals(java.lang.Object)
com.kenai.jffi.CallContext: int hashCode()
com.kenai.jffi.CallContext: void dispose()
com.kenai.jffi.CallContext: void finalize()
com.kenai.jffi.CallContextCache
com.kenai.jffi.CallContextCache: java.util.Map contextCache
com.kenai.jffi.CallContextCache: java.lang.ref.ReferenceQueue contextReferenceQueue
com.kenai.jffi.CallContextCache: com.kenai.jffi.CallContextCache getInstance()
com.kenai.jffi.CallContextCache: CallContextCache()
com.kenai.jffi.CallContextCache: com.kenai.jffi.CallContext getCallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention)
com.kenai.jffi.CallContextCache: com.kenai.jffi.CallContext getCallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean)
com.kenai.jffi.CallContextCache: com.kenai.jffi.CallContext getCallContext(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean,boolean)
com.kenai.jffi.CallContextCache: CallContextCache(com.kenai.jffi.CallContextCache$1)
com.kenai.jffi.CallContextCache$1
com.kenai.jffi.CallContextCache$CallContextRef
com.kenai.jffi.CallContextCache$CallContextRef: com.kenai.jffi.CallContextCache$Signature signature
com.kenai.jffi.CallContextCache$CallContextRef: CallContextCache$CallContextRef(com.kenai.jffi.CallContextCache$Signature,com.kenai.jffi.CallContext,java.lang.ref.ReferenceQueue)
com.kenai.jffi.CallContextCache$Signature
com.kenai.jffi.CallContextCache$Signature: com.kenai.jffi.Type returnType
com.kenai.jffi.CallContextCache$Signature: com.kenai.jffi.Type[] parameterTypes
com.kenai.jffi.CallContextCache$Signature: com.kenai.jffi.CallingConvention convention
com.kenai.jffi.CallContextCache$Signature: boolean saveErrno
com.kenai.jffi.CallContextCache$Signature: boolean faultProtect
com.kenai.jffi.CallContextCache$Signature: int hashCode
com.kenai.jffi.CallContextCache$Signature: CallContextCache$Signature(com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean,boolean)
com.kenai.jffi.CallContextCache$Signature: boolean equals(java.lang.Object)
com.kenai.jffi.CallContextCache$Signature: int calculateHashCode()
com.kenai.jffi.CallContextCache$Signature: int hashCode()
com.kenai.jffi.CallContextCache$SingletonHolder
com.kenai.jffi.CallContextCache$SingletonHolder: com.kenai.jffi.CallContextCache INSTANCE
com.kenai.jffi.CallContextCache$SingletonHolder: CallContextCache$SingletonHolder()
com.kenai.jffi.CallContextCache$SingletonHolder: void <clinit>()
com.kenai.jffi.CallingConvention
com.kenai.jffi.CallingConvention: com.kenai.jffi.CallingConvention DEFAULT
com.kenai.jffi.CallingConvention: com.kenai.jffi.CallingConvention STDCALL
com.kenai.jffi.CallingConvention: com.kenai.jffi.CallingConvention[] $VALUES
com.kenai.jffi.CallingConvention: com.kenai.jffi.CallingConvention[] values()
com.kenai.jffi.CallingConvention: com.kenai.jffi.CallingConvention valueOf(java.lang.String)
com.kenai.jffi.CallingConvention: CallingConvention(java.lang.String,int)
com.kenai.jffi.CallingConvention: void <clinit>()
com.kenai.jffi.Closure
com.kenai.jffi.Closure: void invoke(com.kenai.jffi.Closure$Buffer)
com.kenai.jffi.Closure$Buffer
com.kenai.jffi.Closure$Buffer: byte getByte(int)
com.kenai.jffi.Closure$Buffer: short getShort(int)
com.kenai.jffi.Closure$Buffer: int getInt(int)
com.kenai.jffi.Closure$Buffer: long getLong(int)
com.kenai.jffi.Closure$Buffer: float getFloat(int)
com.kenai.jffi.Closure$Buffer: double getDouble(int)
com.kenai.jffi.Closure$Buffer: long getAddress(int)
com.kenai.jffi.Closure$Buffer: long getStruct(int)
com.kenai.jffi.Closure$Buffer: void setByteReturn(byte)
com.kenai.jffi.Closure$Buffer: void setShortReturn(short)
com.kenai.jffi.Closure$Buffer: void setIntReturn(int)
com.kenai.jffi.Closure$Buffer: void setLongReturn(long)
com.kenai.jffi.Closure$Buffer: void setFloatReturn(float)
com.kenai.jffi.Closure$Buffer: void setDoubleReturn(double)
com.kenai.jffi.Closure$Buffer: void setAddressReturn(long)
com.kenai.jffi.Closure$Buffer: void setStructReturn(long)
com.kenai.jffi.Closure$Buffer: void setStructReturn(byte[],int)
com.kenai.jffi.Closure$Handle
com.kenai.jffi.Closure$Handle: long getAddress()
com.kenai.jffi.Closure$Handle: void setAutoRelease(boolean)
com.kenai.jffi.Closure$Handle: void dispose()
com.kenai.jffi.Closure$Handle: void free()
com.kenai.jffi.ClosureMagazine
com.kenai.jffi.ClosureMagazine: com.kenai.jffi.Foreign foreign
com.kenai.jffi.ClosureMagazine: com.kenai.jffi.CallContext callContext
com.kenai.jffi.ClosureMagazine: long magazineAddress
com.kenai.jffi.ClosureMagazine: java.util.concurrent.atomic.AtomicBoolean disposed
com.kenai.jffi.ClosureMagazine: ClosureMagazine(com.kenai.jffi.Foreign,com.kenai.jffi.CallContext,long)
com.kenai.jffi.ClosureMagazine: com.kenai.jffi.Closure$Handle allocate(java.lang.Object)
com.kenai.jffi.ClosureMagazine: void dispose()
com.kenai.jffi.ClosureMagazine: void finalize()
com.kenai.jffi.ClosureMagazine$1
com.kenai.jffi.ClosureMagazine$Handle
com.kenai.jffi.ClosureMagazine$Handle: com.kenai.jffi.ClosureMagazine magazine
com.kenai.jffi.ClosureMagazine$Handle: long closureAddress
com.kenai.jffi.ClosureMagazine$Handle: long codeAddress
com.kenai.jffi.ClosureMagazine$Handle: ClosureMagazine$Handle(com.kenai.jffi.ClosureMagazine,long,long)
com.kenai.jffi.ClosureMagazine$Handle: long getAddress()
com.kenai.jffi.ClosureMagazine$Handle: void setAutoRelease(boolean)
com.kenai.jffi.ClosureMagazine$Handle: void dispose()
com.kenai.jffi.ClosureMagazine$Handle: void free()
com.kenai.jffi.ClosureMagazine$Handle: ClosureMagazine$Handle(com.kenai.jffi.ClosureMagazine,long,long,com.kenai.jffi.ClosureMagazine$1)
com.kenai.jffi.ClosureManager
com.kenai.jffi.ClosureManager: java.util.Map poolMap
com.kenai.jffi.ClosureManager: com.kenai.jffi.ClosureManager getInstance()
com.kenai.jffi.ClosureManager: ClosureManager()
com.kenai.jffi.ClosureManager: com.kenai.jffi.Closure$Handle newClosure(com.kenai.jffi.Closure,com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention)
com.kenai.jffi.ClosureManager: com.kenai.jffi.Closure$Handle newClosure(com.kenai.jffi.Closure,com.kenai.jffi.CallContext)
com.kenai.jffi.ClosureManager: com.kenai.jffi.ClosurePool getClosurePool(com.kenai.jffi.CallContext)
com.kenai.jffi.ClosureManager: com.kenai.jffi.ClosureMagazine newClosureMagazine(com.kenai.jffi.CallContext,java.lang.reflect.Method)
com.kenai.jffi.ClosureManager: ClosureManager(com.kenai.jffi.ClosureManager$1)
com.kenai.jffi.ClosureManager$1
com.kenai.jffi.ClosureManager$SingletonHolder
com.kenai.jffi.ClosureManager$SingletonHolder: com.kenai.jffi.ClosureManager INSTANCE
com.kenai.jffi.ClosureManager$SingletonHolder: ClosureManager$SingletonHolder()
com.kenai.jffi.ClosureManager$SingletonHolder: void <clinit>()
com.kenai.jffi.ClosurePool
com.kenai.jffi.ClosurePool: java.util.Set magazines
com.kenai.jffi.ClosurePool: java.util.concurrent.ConcurrentLinkedQueue freeQueue
com.kenai.jffi.ClosurePool: java.util.concurrent.ConcurrentLinkedQueue partialQueue
com.kenai.jffi.ClosurePool: com.kenai.jffi.CallContext callContext
com.kenai.jffi.ClosurePool: com.kenai.jffi.Closure NULL_CLOSURE
com.kenai.jffi.ClosurePool: ClosurePool(com.kenai.jffi.CallContext)
com.kenai.jffi.ClosurePool: void recycle(com.kenai.jffi.ClosurePool$Magazine)
com.kenai.jffi.ClosurePool: void recycle(com.kenai.jffi.ClosurePool$Magazine$Slot,com.kenai.jffi.ClosurePool$MagazineHolder)
com.kenai.jffi.ClosurePool: void useMagazine(com.kenai.jffi.ClosurePool$Magazine)
com.kenai.jffi.ClosurePool: com.kenai.jffi.Closure$Handle newClosureHandle(com.kenai.jffi.Closure)
com.kenai.jffi.ClosurePool: com.kenai.jffi.ClosurePool$Handle allocateNewHandle()
com.kenai.jffi.ClosurePool: com.kenai.jffi.Closure access$000()
com.kenai.jffi.ClosurePool: void <clinit>()
com.kenai.jffi.ClosurePool$1
com.kenai.jffi.ClosurePool$1: ClosurePool$1()
com.kenai.jffi.ClosurePool$1: void invoke(com.kenai.jffi.Closure$Buffer)
com.kenai.jffi.ClosurePool$Handle
com.kenai.jffi.ClosurePool$Handle: com.kenai.jffi.ClosurePool$MagazineHolder holder
com.kenai.jffi.ClosurePool$Handle: com.kenai.jffi.ClosurePool$Magazine$Slot slot
com.kenai.jffi.ClosurePool$Handle: boolean disposed
com.kenai.jffi.ClosurePool$Handle: ClosurePool$Handle(com.kenai.jffi.ClosurePool$Magazine$Slot,com.kenai.jffi.ClosurePool$MagazineHolder)
com.kenai.jffi.ClosurePool$Handle: long getAddress()
com.kenai.jffi.ClosurePool$Handle: void setAutoRelease(boolean)
com.kenai.jffi.ClosurePool$Handle: void free()
com.kenai.jffi.ClosurePool$Handle: void dispose()
com.kenai.jffi.ClosurePool$Magazine
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.MemoryIO IO
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.Foreign foreign
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.CallContext ctx
com.kenai.jffi.ClosurePool$Magazine: long magazine
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.ClosurePool$Magazine$Slot[] slots
com.kenai.jffi.ClosurePool$Magazine: int next
com.kenai.jffi.ClosurePool$Magazine: int freeCount
com.kenai.jffi.ClosurePool$Magazine: ClosurePool$Magazine(com.kenai.jffi.CallContext)
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.ClosurePool$Magazine$Slot get()
com.kenai.jffi.ClosurePool$Magazine: boolean isFull()
com.kenai.jffi.ClosurePool$Magazine: boolean isEmpty()
com.kenai.jffi.ClosurePool$Magazine: void recycle()
com.kenai.jffi.ClosurePool$Magazine: void finalize()
com.kenai.jffi.ClosurePool$Magazine: com.kenai.jffi.MemoryIO access$100()
com.kenai.jffi.ClosurePool$Magazine: void <clinit>()
com.kenai.jffi.ClosurePool$Magazine$Slot
com.kenai.jffi.ClosurePool$Magazine$Slot: long handle
com.kenai.jffi.ClosurePool$Magazine$Slot: long codeAddress
com.kenai.jffi.ClosurePool$Magazine$Slot: com.kenai.jffi.ClosurePool$Proxy proxy
com.kenai.jffi.ClosurePool$Magazine$Slot: boolean autorelease
com.kenai.jffi.ClosurePool$Magazine$Slot: ClosurePool$Magazine$Slot(long,com.kenai.jffi.ClosurePool$Proxy)
com.kenai.jffi.ClosurePool$MagazineHolder
com.kenai.jffi.ClosurePool$MagazineHolder: com.kenai.jffi.ClosurePool pool
com.kenai.jffi.ClosurePool$MagazineHolder: com.kenai.jffi.ClosurePool$Magazine magazine
com.kenai.jffi.ClosurePool$MagazineHolder: ClosurePool$MagazineHolder(com.kenai.jffi.ClosurePool,com.kenai.jffi.ClosurePool$Magazine)
com.kenai.jffi.ClosurePool$MagazineHolder: void finalize()
com.kenai.jffi.ClosurePool$Proxy
com.kenai.jffi.ClosurePool$Proxy: java.lang.reflect.Method METHOD
com.kenai.jffi.ClosurePool$Proxy: com.kenai.jffi.CallContext callContext
com.kenai.jffi.ClosurePool$Proxy: com.kenai.jffi.Closure closure
com.kenai.jffi.ClosurePool$Proxy: java.lang.reflect.Method getMethod()
com.kenai.jffi.ClosurePool$Proxy: ClosurePool$Proxy(com.kenai.jffi.CallContext)
com.kenai.jffi.ClosurePool$Proxy: void invoke(long,long)
com.kenai.jffi.ClosurePool$Proxy: void <clinit>()
com.kenai.jffi.DirectClosureBuffer
com.kenai.jffi.DirectClosureBuffer: com.kenai.jffi.MemoryIO IO
com.kenai.jffi.DirectClosureBuffer: com.kenai.jffi.DirectClosureBuffer$NativeWordIO WordIO
com.kenai.jffi.DirectClosureBuffer: long PARAM_SIZE
com.kenai.jffi.DirectClosureBuffer: long retval
com.kenai.jffi.DirectClosureBuffer: long parameters
com.kenai.jffi.DirectClosureBuffer: com.kenai.jffi.CallContext callContext
com.kenai.jffi.DirectClosureBuffer: DirectClosureBuffer(com.kenai.jffi.CallContext,long,long)
com.kenai.jffi.DirectClosureBuffer: byte getByte(int)
com.kenai.jffi.DirectClosureBuffer: short getShort(int)
com.kenai.jffi.DirectClosureBuffer: int getInt(int)
com.kenai.jffi.DirectClosureBuffer: long getLong(int)
com.kenai.jffi.DirectClosureBuffer: float getFloat(int)
com.kenai.jffi.DirectClosureBuffer: double getDouble(int)
com.kenai.jffi.DirectClosureBuffer: long getAddress(int)
com.kenai.jffi.DirectClosureBuffer: long getStruct(int)
com.kenai.jffi.DirectClosureBuffer: void setByteReturn(byte)
com.kenai.jffi.DirectClosureBuffer: void setShortReturn(short)
com.kenai.jffi.DirectClosureBuffer: void setIntReturn(int)
com.kenai.jffi.DirectClosureBuffer: void setLongReturn(long)
com.kenai.jffi.DirectClosureBuffer: void setFloatReturn(float)
com.kenai.jffi.DirectClosureBuffer: void setDoubleReturn(double)
com.kenai.jffi.DirectClosureBuffer: void setAddressReturn(long)
com.kenai.jffi.DirectClosureBuffer: void setStructReturn(long)
com.kenai.jffi.DirectClosureBuffer: void setStructReturn(byte[],int)
com.kenai.jffi.DirectClosureBuffer: void <clinit>()
com.kenai.jffi.DirectClosureBuffer$1
com.kenai.jffi.DirectClosureBuffer$NativeWordIO
com.kenai.jffi.DirectClosureBuffer$NativeWordIO: DirectClosureBuffer$NativeWordIO()
com.kenai.jffi.DirectClosureBuffer$NativeWordIO: com.kenai.jffi.DirectClosureBuffer$NativeWordIO getInstance()
com.kenai.jffi.DirectClosureBuffer$NativeWordIO: void put(long,int)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO: int get(long)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO: DirectClosureBuffer$NativeWordIO(com.kenai.jffi.DirectClosureBuffer$1)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: com.kenai.jffi.MemoryIO IO
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: com.kenai.jffi.DirectClosureBuffer$NativeWordIO INSTANCE
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: DirectClosureBuffer$NativeWordIO32()
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: void put(long,int)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: int get(long)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO32: void <clinit>()
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: com.kenai.jffi.MemoryIO IO
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: com.kenai.jffi.DirectClosureBuffer$NativeWordIO INSTANCE
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: DirectClosureBuffer$NativeWordIO64()
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: void put(long,int)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: int get(long)
com.kenai.jffi.DirectClosureBuffer$NativeWordIO64: void <clinit>()
com.kenai.jffi.DirectObjectParameterStrategy
com.kenai.jffi.DirectObjectParameterStrategy: DirectObjectParameterStrategy(boolean,com.kenai.jffi.ObjectParameterType)
com.kenai.jffi.DirectObjectParameterStrategy: long getAddress(java.lang.Object)
com.kenai.jffi.DirectObjectParameterStrategy: java.lang.Object object(java.lang.Object)
com.kenai.jffi.DirectObjectParameterStrategy: int offset(java.lang.Object)
com.kenai.jffi.DirectObjectParameterStrategy: int length(java.lang.Object)
com.kenai.jffi.FaultException
com.kenai.jffi.FaultException: int signal
com.kenai.jffi.FaultException: FaultException(int,long[],long[],long[])
com.kenai.jffi.FaultException: java.lang.StackTraceElement[] createStackTrace(long[],long[],long[],java.lang.StackTraceElement[])
com.kenai.jffi.FaultException: int getSignal()
com.kenai.jffi.Foreign
com.kenai.jffi.Foreign: int VERSION_MAJOR
com.kenai.jffi.Foreign: int VERSION_MINOR
com.kenai.jffi.Foreign: int VERSION_MICRO
com.kenai.jffi.Foreign: int TYPE_VOID
com.kenai.jffi.Foreign: int TYPE_FLOAT
com.kenai.jffi.Foreign: int TYPE_DOUBLE
com.kenai.jffi.Foreign: int TYPE_LONGDOUBLE
com.kenai.jffi.Foreign: int TYPE_UINT8
com.kenai.jffi.Foreign: int TYPE_SINT8
com.kenai.jffi.Foreign: int TYPE_UINT16
com.kenai.jffi.Foreign: int TYPE_SINT16
com.kenai.jffi.Foreign: int TYPE_UINT32
com.kenai.jffi.Foreign: int TYPE_SINT32
com.kenai.jffi.Foreign: int TYPE_UINT64
com.kenai.jffi.Foreign: int TYPE_SINT64
com.kenai.jffi.Foreign: int TYPE_STRUCT
com.kenai.jffi.Foreign: int TYPE_POINTER
com.kenai.jffi.Foreign: int TYPE_UCHAR
com.kenai.jffi.Foreign: int TYPE_SCHAR
com.kenai.jffi.Foreign: int TYPE_USHORT
com.kenai.jffi.Foreign: int TYPE_SSHORT
com.kenai.jffi.Foreign: int TYPE_UINT
com.kenai.jffi.Foreign: int TYPE_SINT
com.kenai.jffi.Foreign: int TYPE_ULONG
com.kenai.jffi.Foreign: int TYPE_SLONG
com.kenai.jffi.Foreign: int RTLD_LAZY
com.kenai.jffi.Foreign: int RTLD_NOW
com.kenai.jffi.Foreign: int RTLD_LOCAL
com.kenai.jffi.Foreign: int RTLD_GLOBAL
com.kenai.jffi.Foreign: int PROT_READ
com.kenai.jffi.Foreign: int PROT_WRITE
com.kenai.jffi.Foreign: int PROT_EXEC
com.kenai.jffi.Foreign: int PROT_NONE
com.kenai.jffi.Foreign: int MAP_SHARED
com.kenai.jffi.Foreign: int MAP_PRIVATE
com.kenai.jffi.Foreign: int MAP_FIXED
com.kenai.jffi.Foreign: int MAP_NORESERVE
com.kenai.jffi.Foreign: int MAP_ANON
com.kenai.jffi.Foreign: int MAP_ALIGN
com.kenai.jffi.Foreign: int MAP_TEXT
com.kenai.jffi.Foreign: int PAGE_NOACCESS
com.kenai.jffi.Foreign: int PAGE_READONLY
com.kenai.jffi.Foreign: int PAGE_READWRITE
com.kenai.jffi.Foreign: int PAGE_WRITECOPY
com.kenai.jffi.Foreign: int PAGE_EXECUTE
com.kenai.jffi.Foreign: int PAGE_EXECUTE_READ
com.kenai.jffi.Foreign: int PAGE_EXECUTE_READWRITE
com.kenai.jffi.Foreign: int PAGE_EXECUTE_WRITECOPY
com.kenai.jffi.Foreign: int MEM_COMMIT
com.kenai.jffi.Foreign: int MEM_RESERVE
com.kenai.jffi.Foreign: int MEM_DECOMMIT
com.kenai.jffi.Foreign: int MEM_RELEASE
com.kenai.jffi.Foreign: int MEM_FREE
com.kenai.jffi.Foreign: int MEM_PRIVATE
com.kenai.jffi.Foreign: int MEM_MAPPED
com.kenai.jffi.Foreign: int MEM_RESET
com.kenai.jffi.Foreign: int MEM_TOP_DOWN
com.kenai.jffi.Foreign: int MEM_PHYSICAL
com.kenai.jffi.Foreign: int MEM_4MB_PAGES
com.kenai.jffi.Foreign: int JNI_OK
com.kenai.jffi.Foreign: int JNI_ERR
com.kenai.jffi.Foreign: int JNI_EDETACHED
com.kenai.jffi.Foreign: int JNI_EVERSION
com.kenai.jffi.Foreign: int JNI_ENOMEM
com.kenai.jffi.Foreign: int JNI_EEXIST
com.kenai.jffi.Foreign: int JNI_EINVAL
com.kenai.jffi.Foreign: int F_DEFAULT
com.kenai.jffi.Foreign: int F_STDCALL
com.kenai.jffi.Foreign: int F_NOERRNO
com.kenai.jffi.Foreign: int F_PROTECT
com.kenai.jffi.Foreign: java.lang.UnsatisfiedLinkError newLoadError(java.lang.Throwable)
com.kenai.jffi.Foreign: com.kenai.jffi.Foreign getInstance()
com.kenai.jffi.Foreign: Foreign()
com.kenai.jffi.Foreign: int getVersionField(java.lang.String)
com.kenai.jffi.Foreign: int getVersion()
com.kenai.jffi.Foreign: void init()
com.kenai.jffi.Foreign: boolean isFaultProtectionEnabled()
com.kenai.jffi.Foreign: boolean isMemoryProtectionEnabled()
com.kenai.jffi.Foreign: long dlopen(java.lang.String,int)
com.kenai.jffi.Foreign: void dlclose(long)
com.kenai.jffi.Foreign: long dlsym(long,java.lang.String)
com.kenai.jffi.Foreign: java.lang.String dlerror()
com.kenai.jffi.Foreign: long allocateMemory(long,boolean)
com.kenai.jffi.Foreign: void freeMemory(long)
com.kenai.jffi.Foreign: long pageSize()
com.kenai.jffi.Foreign: long mmap(long,long,int,int,int,long)
com.kenai.jffi.Foreign: int munmap(long,long)
com.kenai.jffi.Foreign: int mprotect(long,long,int)
com.kenai.jffi.Foreign: long VirtualAlloc(long,int,int,int)
com.kenai.jffi.Foreign: boolean VirtualFree(long,int,int)
com.kenai.jffi.Foreign: boolean VirtualProtect(long,int,int)
com.kenai.jffi.Foreign: long newCallContext(long,long[],int)
com.kenai.jffi.Foreign: void freeCallContext(long)
com.kenai.jffi.Foreign: int getCallContextRawParameterSize(long)
com.kenai.jffi.Foreign: boolean isRawParameterPackingEnabled()
com.kenai.jffi.Foreign: int getLastError()
com.kenai.jffi.Foreign: void setLastError(int)
com.kenai.jffi.Foreign: long newClosureMagazine(long,java.lang.reflect.Method,boolean)
com.kenai.jffi.Foreign: void freeClosureMagazine(long)
com.kenai.jffi.Foreign: long closureMagazineGet(long,java.lang.Object)
com.kenai.jffi.Foreign: long lookupBuiltinType(int)
com.kenai.jffi.Foreign: int getTypeSize(long)
com.kenai.jffi.Foreign: int getTypeAlign(long)
com.kenai.jffi.Foreign: int getTypeType(long)
com.kenai.jffi.Foreign: long newStruct(long[],boolean)
com.kenai.jffi.Foreign: long newArray(long,int)
com.kenai.jffi.Foreign: void freeAggregate(long)
com.kenai.jffi.Foreign: int invokeI0(long,long)
com.kenai.jffi.Foreign: int invokeI0NoErrno(long,long)
com.kenai.jffi.Foreign: int invokeI1(long,long,int)
com.kenai.jffi.Foreign: int invokeI1NoErrno(long,long,int)
com.kenai.jffi.Foreign: int invokeI2(long,long,int,int)
com.kenai.jffi.Foreign: int invokeI2NoErrno(long,long,int,int)
com.kenai.jffi.Foreign: int invokeI3(long,long,int,int,int)
com.kenai.jffi.Foreign: int invokeI4(long,long,int,int,int,int)
com.kenai.jffi.Foreign: int invokeI5(long,long,int,int,int,int,int)
com.kenai.jffi.Foreign: int invokeI6(long,long,int,int,int,int,int,int)
com.kenai.jffi.Foreign: int invokeI3NoErrno(long,long,int,int,int)
com.kenai.jffi.Foreign: int invokeI4NoErrno(long,long,int,int,int,int)
com.kenai.jffi.Foreign: int invokeI5NoErrno(long,long,int,int,int,int,int)
com.kenai.jffi.Foreign: int invokeI6NoErrno(long,long,int,int,int,int,int,int)
com.kenai.jffi.Foreign: long invokeL0(long,long)
com.kenai.jffi.Foreign: long invokeL1(long,long,long)
com.kenai.jffi.Foreign: long invokeL2(long,long,long,long)
com.kenai.jffi.Foreign: long invokeL3(long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL4(long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL5(long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL6(long,long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL0NoErrno(long,long)
com.kenai.jffi.Foreign: long invokeL1NoErrno(long,long,long)
com.kenai.jffi.Foreign: long invokeL2NoErrno(long,long,long,long)
com.kenai.jffi.Foreign: long invokeL3NoErrno(long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL4NoErrno(long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL5NoErrno(long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeL6NoErrno(long,long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeN0(long,long)
com.kenai.jffi.Foreign: long invokeN1(long,long,long)
com.kenai.jffi.Foreign: long invokeN2(long,long,long,long)
com.kenai.jffi.Foreign: long invokeN3(long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeN4(long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeN5(long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeN6(long,long,long,long,long,long,long,long)
com.kenai.jffi.Foreign: long invokeN1O1(long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN2O1(long,long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN2O2(long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN3O1(long,long,long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN3O2(long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN3O3(long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN4O1(long,long,long,long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN4O2(long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN4O3(long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN4O4(long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN5O1(long,long,long,long,long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN5O2(long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN5O3(long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN5O4(long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN5O5(long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O1(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O2(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O3(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O4(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O5(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeN6O6(long,long,long,long,long,long,long,long,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: int invokeArrayReturnInt(long,long,byte[])
com.kenai.jffi.Foreign: long invokeArrayReturnLong(long,long,byte[])
com.kenai.jffi.Foreign: float invokeArrayReturnFloat(long,long,byte[])
com.kenai.jffi.Foreign: double invokeArrayReturnDouble(long,long,byte[])
com.kenai.jffi.Foreign: void invokeArrayReturnStruct(long,long,byte[],byte[],int)
com.kenai.jffi.Foreign: java.lang.Object invokeArrayWithObjectsReturnObject(long,long,byte[],int,int[],java.lang.Object[])
com.kenai.jffi.Foreign: int invokeArrayWithObjectsInt32(long,long,byte[],int,int[],java.lang.Object[])
com.kenai.jffi.Foreign: long invokeArrayWithObjectsInt64(long,long,byte[],int,int[],java.lang.Object[])
com.kenai.jffi.Foreign: float invokeArrayWithObjectsFloat(long,long,byte[],int,int[],java.lang.Object[])
com.kenai.jffi.Foreign: double invokeArrayWithObjectsDouble(long,long,byte[],int,int[],java.lang.Object[])
com.kenai.jffi.Foreign: void invokeArrayWithObjectsReturnStruct(long,long,byte[],int,int[],java.lang.Object[],byte[],int)
com.kenai.jffi.Foreign: int invokeArrayO1Int32(long,long,byte[],java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: int invokeArrayO2Int32(long,long,byte[],java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeArrayO1Int64(long,long,byte[],java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: long invokeArrayO2Int64(long,long,byte[],java.lang.Object,int,int,int,java.lang.Object,int,int,int)
com.kenai.jffi.Foreign: void invokePointerParameterArray(long,long,long,long[])
com.kenai.jffi.Foreign: byte getByte(long)
com.kenai.jffi.Foreign: short getShort(long)
com.kenai.jffi.Foreign: int getInt(long)
com.kenai.jffi.Foreign: long getLong(long)
com.kenai.jffi.Foreign: float getFloat(long)
com.kenai.jffi.Foreign: double getDouble(long)
com.kenai.jffi.Foreign: long getAddress(long)
com.kenai.jffi.Foreign: void putByte(long,byte)
com.kenai.jffi.Foreign: void putShort(long,short)
com.kenai.jffi.Foreign: void putInt(long,int)
com.kenai.jffi.Foreign: void putLong(long,long)
com.kenai.jffi.Foreign: void putFloat(long,float)
com.kenai.jffi.Foreign: void putDouble(long,double)
com.kenai.jffi.Foreign: void putAddress(long,long)
com.kenai.jffi.Foreign: void setMemory(long,long,byte)
com.kenai.jffi.Foreign: void copyMemory(long,long,long)
com.kenai.jffi.Foreign: void putByteArray(long,byte[],int,int)
com.kenai.jffi.Foreign: void getByteArray(long,byte[],int,int)
com.kenai.jffi.Foreign: void putCharArray(long,char[],int,int)
com.kenai.jffi.Foreign: void getCharArray(long,char[],int,int)
com.kenai.jffi.Foreign: void putShortArray(long,short[],int,int)
com.kenai.jffi.Foreign: void getShortArray(long,short[],int,int)
com.kenai.jffi.Foreign: void putIntArray(long,int[],int,int)
com.kenai.jffi.Foreign: void getIntArray(long,int[],int,int)
com.kenai.jffi.Foreign: void putLongArray(long,long[],int,int)
com.kenai.jffi.Foreign: void getLongArray(long,long[],int,int)
com.kenai.jffi.Foreign: void putFloatArray(long,float[],int,int)
com.kenai.jffi.Foreign: void getFloatArray(long,float[],int,int)
com.kenai.jffi.Foreign: void putDoubleArray(long,double[],int,int)
com.kenai.jffi.Foreign: void getDoubleArray(long,double[],int,int)
com.kenai.jffi.Foreign: long memchr(long,int,long)
com.kenai.jffi.Foreign: void memmove(long,long,long)
com.kenai.jffi.Foreign: void memcpy(long,long,long)
com.kenai.jffi.Foreign: long strlen(long)
com.kenai.jffi.Foreign: byte[] getZeroTerminatedByteArray(long)
com.kenai.jffi.Foreign: byte[] getZeroTerminatedByteArray(long,int)
com.kenai.jffi.Foreign: void putZeroTerminatedByteArray(long,byte[],int,int)
com.kenai.jffi.Foreign: byte getByteChecked(long)
com.kenai.jffi.Foreign: short getShortChecked(long)
com.kenai.jffi.Foreign: int getIntChecked(long)
com.kenai.jffi.Foreign: long getLongChecked(long)
com.kenai.jffi.Foreign: float getFloatChecked(long)
com.kenai.jffi.Foreign: double getDoubleChecked(long)
com.kenai.jffi.Foreign: long getAddressChecked(long)
com.kenai.jffi.Foreign: void putByteChecked(long,byte)
com.kenai.jffi.Foreign: void putShortChecked(long,short)
com.kenai.jffi.Foreign: void putIntChecked(long,int)
com.kenai.jffi.Foreign: void putLongChecked(long,long)
com.kenai.jffi.Foreign: void putFloatChecked(long,float)
com.kenai.jffi.Foreign: void putDoubleChecked(long,double)
com.kenai.jffi.Foreign: void putAddressChecked(long,long)
com.kenai.jffi.Foreign: void setMemoryChecked(long,long,byte)
com.kenai.jffi.Foreign: void copyMemoryChecked(long,long,long)
com.kenai.jffi.Foreign: void putByteArrayChecked(long,byte[],int,int)
com.kenai.jffi.Foreign: void getByteArrayChecked(long,byte[],int,int)
com.kenai.jffi.Foreign: void putCharArrayChecked(long,char[],int,int)
com.kenai.jffi.Foreign: void getCharArrayChecked(long,char[],int,int)
com.kenai.jffi.Foreign: void putShortArrayChecked(long,short[],int,int)
com.kenai.jffi.Foreign: void getShortArrayChecked(long,short[],int,int)
com.kenai.jffi.Foreign: void putIntArrayChecked(long,int[],int,int)
com.kenai.jffi.Foreign: void getIntArrayChecked(long,int[],int,int)
com.kenai.jffi.Foreign: void putLongArrayChecked(long,long[],int,int)
com.kenai.jffi.Foreign: void getLongArrayChecked(long,long[],int,int)
com.kenai.jffi.Foreign: void putFloatArrayChecked(long,float[],int,int)
com.kenai.jffi.Foreign: void getFloatArrayChecked(long,float[],int,int)
com.kenai.jffi.Foreign: void putDoubleArrayChecked(long,double[],int,int)
com.kenai.jffi.Foreign: void getDoubleArrayChecked(long,double[],int,int)
com.kenai.jffi.Foreign: long memchrChecked(long,int,long)
com.kenai.jffi.Foreign: void memmoveChecked(long,long,long)
com.kenai.jffi.Foreign: void memcpyChecked(long,long,long)
com.kenai.jffi.Foreign: long strlenChecked(long)
com.kenai.jffi.Foreign: byte[] getZeroTerminatedByteArrayChecked(long)
com.kenai.jffi.Foreign: byte[] getZeroTerminatedByteArrayChecked(long,int)
com.kenai.jffi.Foreign: void putZeroTerminatedByteArrayChecked(long,byte[],int,int)
com.kenai.jffi.Foreign: java.nio.ByteBuffer newDirectByteBuffer(long,int)
com.kenai.jffi.Foreign: long getDirectBufferAddress(java.nio.Buffer)
com.kenai.jffi.Foreign: void longDoubleFromDouble(double,byte[],int,int)
com.kenai.jffi.Foreign: double longDoubleToDouble(byte[],int,int)
com.kenai.jffi.Foreign: void longDoubleFromString(java.lang.String,byte[],int,int)
com.kenai.jffi.Foreign: java.lang.String longDoubleToString(byte[],int,int)
com.kenai.jffi.Foreign: java.lang.String longDoubleToEngineeringString(byte[],int,int)
com.kenai.jffi.Foreign: java.lang.String longDoubleToPlainString(byte[],int,int)
com.kenai.jffi.Foreign: long newNativeMethod(java.lang.String,java.lang.String,long)
com.kenai.jffi.Foreign: void freeNativeMethod(long)
com.kenai.jffi.Foreign: long compileNativeMethods(long[])
com.kenai.jffi.Foreign: void freeCompiledMethods(long)
com.kenai.jffi.Foreign: boolean registerNativeMethods(java.lang.Class,long)
com.kenai.jffi.Foreign: void unregisterNativeMethods(java.lang.Class)
com.kenai.jffi.Foreign: long getSaveErrnoFunction()
com.kenai.jffi.Foreign: void setCallContextErrorFunction(long,long)
com.kenai.jffi.Foreign: long getSaveErrnoCtxFunction()
com.kenai.jffi.Foreign: int getJNIVersion()
com.kenai.jffi.Foreign: long getJavaVM()
com.kenai.jffi.Foreign: void fatalError(java.lang.String)
com.kenai.jffi.Foreign: java.lang.Class defineClass(java.lang.String,java.lang.Object,byte[],int,int)
com.kenai.jffi.Foreign: java.lang.Class defineClass(java.lang.String,java.lang.Object,java.nio.ByteBuffer)
com.kenai.jffi.Foreign: java.lang.Object allocObject(java.lang.Class)
com.kenai.jffi.Foreign: int registerNatives(java.lang.Class,long,int)
com.kenai.jffi.Foreign: int unregisterNatives(java.lang.Class)
com.kenai.jffi.Foreign: java.lang.String getArch()
com.kenai.jffi.Foreign: Foreign(com.kenai.jffi.Foreign$1)
com.kenai.jffi.Foreign: void access$100(com.kenai.jffi.Foreign)
com.kenai.jffi.Foreign: java.lang.UnsatisfiedLinkError access$300(java.lang.Throwable)
com.kenai.jffi.Foreign: void <clinit>()
com.kenai.jffi.Foreign$1
com.kenai.jffi.Foreign$InValidInstanceHolder
com.kenai.jffi.Foreign$InValidInstanceHolder: java.lang.Throwable cause
com.kenai.jffi.Foreign$InValidInstanceHolder: Foreign$InValidInstanceHolder(java.lang.Throwable)
com.kenai.jffi.Foreign$InValidInstanceHolder: com.kenai.jffi.Foreign getForeign()
com.kenai.jffi.Foreign$InstanceHolder
com.kenai.jffi.Foreign$InstanceHolder: com.kenai.jffi.Foreign$InstanceHolder INSTANCE
com.kenai.jffi.Foreign$InstanceHolder: Foreign$InstanceHolder()
com.kenai.jffi.Foreign$InstanceHolder: com.kenai.jffi.Foreign$InstanceHolder getInstanceHolder()
com.kenai.jffi.Foreign$InstanceHolder: com.kenai.jffi.Foreign getForeign()
com.kenai.jffi.Foreign$InstanceHolder: Foreign$InstanceHolder(com.kenai.jffi.Foreign$1)
com.kenai.jffi.Foreign$InstanceHolder: void <clinit>()
com.kenai.jffi.Foreign$ValidInstanceHolder
com.kenai.jffi.Foreign$ValidInstanceHolder: com.kenai.jffi.Foreign foreign
com.kenai.jffi.Foreign$ValidInstanceHolder: Foreign$ValidInstanceHolder(com.kenai.jffi.Foreign)
com.kenai.jffi.Foreign$ValidInstanceHolder: com.kenai.jffi.Foreign getForeign()
com.kenai.jffi.Function
com.kenai.jffi.Function: com.kenai.jffi.CallContext callContext
com.kenai.jffi.Function: long functionAddress
com.kenai.jffi.Function: long contextAddress
com.kenai.jffi.Function: Function(long,com.kenai.jffi.Type,com.kenai.jffi.Type[])
com.kenai.jffi.Function: Function(long,com.kenai.jffi.CallContext)
com.kenai.jffi.Function: Function(long,com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention)
com.kenai.jffi.Function: Function(long,com.kenai.jffi.Type,com.kenai.jffi.Type[],com.kenai.jffi.CallingConvention,boolean)
com.kenai.jffi.Function: int getParameterCount()
com.kenai.jffi.Function: int getRawParameterSize()
com.kenai.jffi.Function: com.kenai.jffi.CallContext getCallContext()
com.kenai.jffi.Function: long getContextAddress()
com.kenai.jffi.Function: long getFunctionAddress()
com.kenai.jffi.Function: com.kenai.jffi.Type getReturnType()
com.kenai.jffi.Function: com.kenai.jffi.Type getParameterType(int)
com.kenai.jffi.Function: void dispose()
com.kenai.jffi.HeapInvocationBuffer
com.kenai.jffi.HeapInvocationBuffer: int PARAM_SIZE
com.kenai.jffi.HeapInvocationBuffer: com.kenai.jffi.CallContext callContext
com.kenai.jffi.HeapInvocationBuffer: byte[] buffer
com.kenai.jffi.HeapInvocationBuffer: com.kenai.jffi.ObjectBuffer objectBuffer
com.kenai.jffi.HeapInvocationBuffer: int paramOffset
com.kenai.jffi.HeapInvocationBuffer: int paramIndex
com.kenai.jffi.HeapInvocationBuffer: HeapInvocationBuffer(com.kenai.jffi.Function)
com.kenai.jffi.HeapInvocationBuffer: HeapInvocationBuffer(com.kenai.jffi.CallContext)
com.kenai.jffi.HeapInvocationBuffer: HeapInvocationBuffer(com.kenai.jffi.CallContext,int)
com.kenai.jffi.HeapInvocationBuffer: byte[] array()
com.kenai.jffi.HeapInvocationBuffer: com.kenai.jffi.ObjectBuffer objectBuffer()
com.kenai.jffi.HeapInvocationBuffer: void putByte(int)
com.kenai.jffi.HeapInvocationBuffer: void putShort(int)
com.kenai.jffi.HeapInvocationBuffer: void putInt(int)
com.kenai.jffi.HeapInvocationBuffer: void putLong(long)
com.kenai.jffi.HeapInvocationBuffer: void putFloat(float)
com.kenai.jffi.HeapInvocationBuffer: void putDouble(double)
com.kenai.jffi.HeapInvocationBuffer: void putLongDouble(double)
com.kenai.jffi.HeapInvocationBuffer: void putLongDouble(java.math.BigDecimal)
com.kenai.jffi.HeapInvocationBuffer: void putAddress(long)
com.kenai.jffi.HeapInvocationBuffer: com.kenai.jffi.ObjectBuffer getObjectBuffer()
com.kenai.jffi.HeapInvocationBuffer: void putArray(byte[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putArray(short[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putArray(int[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putArray(long[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putArray(float[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putArray(double[],int,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putDirectBuffer(java.nio.Buffer,int,int)
com.kenai.jffi.HeapInvocationBuffer: void putStruct(byte[],int)
com.kenai.jffi.HeapInvocationBuffer: void putStruct(long)
com.kenai.jffi.HeapInvocationBuffer: void putObject(java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapInvocationBuffer: void putObject(java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,int)
com.kenai.jffi.HeapInvocationBuffer: void putJNIEnvironment()
com.kenai.jffi.HeapInvocationBuffer: void putJNIObject(java.lang.Object)
com.kenai.jffi.HeapInvocationBuffer$1
com.kenai.jffi.HeapInvocationBuffer$ArrayIO
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: HeapInvocationBuffer$ArrayIO()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO getInstance()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO getBE32IO()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO getLE32IO()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO getLE64IO()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO getBE64IO()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO newInvalidArrayIO(java.lang.Throwable)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putFloat(byte[],int,float)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putDouble(byte[],int,double)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO: HeapInvocationBuffer$ArrayIO(com.kenai.jffi.HeapInvocationBuffer$1)
com.kenai.jffi.HeapInvocationBuffer$ArrayIO$SingletonHolder
com.kenai.jffi.HeapInvocationBuffer$ArrayIO$SingletonHolder: com.kenai.jffi.HeapInvocationBuffer$ArrayIO DEFAULT
com.kenai.jffi.HeapInvocationBuffer$ArrayIO$SingletonHolder: HeapInvocationBuffer$ArrayIO$SingletonHolder()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO$SingletonHolder: com.kenai.jffi.HeapInvocationBuffer$ArrayIO access$000()
com.kenai.jffi.HeapInvocationBuffer$ArrayIO$SingletonHolder: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$BE32ArrayIO
com.kenai.jffi.HeapInvocationBuffer$BE32ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO INSTANCE
com.kenai.jffi.HeapInvocationBuffer$BE32ArrayIO: HeapInvocationBuffer$BE32ArrayIO()
com.kenai.jffi.HeapInvocationBuffer$BE32ArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$BE32ArrayIO: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$BE64ArrayIO
com.kenai.jffi.HeapInvocationBuffer$BE64ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO INSTANCE
com.kenai.jffi.HeapInvocationBuffer$BE64ArrayIO: HeapInvocationBuffer$BE64ArrayIO()
com.kenai.jffi.HeapInvocationBuffer$BE64ArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$BE64ArrayIO: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: HeapInvocationBuffer$BigEndianArrayIO()
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: void putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: void putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: void putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: void putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$BigEndianArrayIO: HeapInvocationBuffer$BigEndianArrayIO(com.kenai.jffi.HeapInvocationBuffer$1)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: com.kenai.jffi.HeapInvocationBuffer$ArrayIO io
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: HeapInvocationBuffer$DefaultEncoder(com.kenai.jffi.HeapInvocationBuffer$ArrayIO)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int getBufferSize(com.kenai.jffi.CallContext)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putFloat(byte[],int,float)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putDouble(byte[],int,double)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$DefaultEncoder: int skipAddress(int)
com.kenai.jffi.HeapInvocationBuffer$Encoder
com.kenai.jffi.HeapInvocationBuffer$Encoder: HeapInvocationBuffer$Encoder()
com.kenai.jffi.HeapInvocationBuffer$Encoder: com.kenai.jffi.HeapInvocationBuffer$Encoder getInstance()
com.kenai.jffi.HeapInvocationBuffer$Encoder: int getBufferSize(com.kenai.jffi.CallContext)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putFloat(byte[],int,float)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putDouble(byte[],int,double)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$Encoder: int skipAddress(int)
com.kenai.jffi.HeapInvocationBuffer$Encoder$SingletonHolder
com.kenai.jffi.HeapInvocationBuffer$Encoder$SingletonHolder: com.kenai.jffi.HeapInvocationBuffer$Encoder INSTANCE
com.kenai.jffi.HeapInvocationBuffer$Encoder$SingletonHolder: HeapInvocationBuffer$Encoder$SingletonHolder()
com.kenai.jffi.HeapInvocationBuffer$Encoder$SingletonHolder: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: java.lang.Throwable error
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: HeapInvocationBuffer$InvalidArrayIO(java.lang.Throwable)
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: java.lang.RuntimeException ex()
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: void putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: void putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: void putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: void putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$InvalidArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$LE32ArrayIO
com.kenai.jffi.HeapInvocationBuffer$LE32ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO INSTANCE
com.kenai.jffi.HeapInvocationBuffer$LE32ArrayIO: HeapInvocationBuffer$LE32ArrayIO()
com.kenai.jffi.HeapInvocationBuffer$LE32ArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$LE32ArrayIO: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$LE64ArrayIO
com.kenai.jffi.HeapInvocationBuffer$LE64ArrayIO: com.kenai.jffi.HeapInvocationBuffer$ArrayIO INSTANCE
com.kenai.jffi.HeapInvocationBuffer$LE64ArrayIO: HeapInvocationBuffer$LE64ArrayIO()
com.kenai.jffi.HeapInvocationBuffer$LE64ArrayIO: void putAddress(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$LE64ArrayIO: void <clinit>()
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: HeapInvocationBuffer$LittleEndianArrayIO()
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: void putByte(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: void putShort(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: void putInt(byte[],int,int)
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: void putLong(byte[],int,long)
com.kenai.jffi.HeapInvocationBuffer$LittleEndianArrayIO: HeapInvocationBuffer$LittleEndianArrayIO(com.kenai.jffi.HeapInvocationBuffer$1)
com.kenai.jffi.HeapObjectParameterInvoker
com.kenai.jffi.HeapObjectParameterInvoker: com.kenai.jffi.Foreign foreign
com.kenai.jffi.HeapObjectParameterInvoker: HeapObjectParameterInvoker(com.kenai.jffi.Foreign)
com.kenai.jffi.HeapObjectParameterInvoker: boolean isNative()
com.kenai.jffi.HeapObjectParameterInvoker: int encode(com.kenai.jffi.HeapInvocationBuffer$Encoder,byte[],int,com.kenai.jffi.Type,long)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeO1(com.kenai.jffi.Function,byte[],java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeO2(com.kenai.jffi.Function,byte[],java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeO3(com.kenai.jffi.Function,byte[],java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN1O1rN(com.kenai.jffi.Function,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN2O1rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN2O2rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: byte[] encodeN3(com.kenai.jffi.Function,long,long,long)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN3O1rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN3O2rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN3O3rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: byte[] encodeN4(com.kenai.jffi.Function,long,long,long,long)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN4O1rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN4O2rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN4O3rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: byte[] encodeN5(com.kenai.jffi.Function,long,long,long,long,long)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN5O1rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN5O2rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN5O3rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: byte[] encodeN6(com.kenai.jffi.Function,long,long,long,long,long,long)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN6O1rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN6O2rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.HeapObjectParameterInvoker: long invokeN6O3rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Init
com.kenai.jffi.Init: boolean loaded
com.kenai.jffi.Init: java.lang.String stubLoaderClassName
com.kenai.jffi.Init: Init()
com.kenai.jffi.Init: void load()
com.kenai.jffi.Init: java.util.List getClassLoaders()
com.kenai.jffi.Init: java.lang.UnsatisfiedLinkError newLoadError(java.lang.Throwable)
com.kenai.jffi.Init: void <clinit>()
com.kenai.jffi.Internals
com.kenai.jffi.Internals: Internals()
com.kenai.jffi.Internals: long getErrnoSaveFunction()
com.kenai.jffi.InvocationBuffer
com.kenai.jffi.InvocationBuffer: InvocationBuffer()
com.kenai.jffi.InvocationBuffer: void putByte(int)
com.kenai.jffi.InvocationBuffer: void putShort(int)
com.kenai.jffi.InvocationBuffer: void putInt(int)
com.kenai.jffi.InvocationBuffer: void putLong(long)
com.kenai.jffi.InvocationBuffer: void putFloat(float)
com.kenai.jffi.InvocationBuffer: void putDouble(double)
com.kenai.jffi.InvocationBuffer: void putAddress(long)
com.kenai.jffi.InvocationBuffer: void putArray(byte[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putArray(short[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putArray(int[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putArray(long[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putArray(float[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putArray(double[],int,int,int)
com.kenai.jffi.InvocationBuffer: void putDirectBuffer(java.nio.Buffer,int,int)
com.kenai.jffi.InvocationBuffer: void putStruct(byte[],int)
com.kenai.jffi.InvocationBuffer: void putStruct(long)
com.kenai.jffi.InvokeDynamicSupport
com.kenai.jffi.InvokeDynamicSupport: InvokeDynamicSupport()
com.kenai.jffi.InvokeDynamicSupport: com.kenai.jffi.InvokeDynamicSupport$Invoker getFastNumericInvoker(com.kenai.jffi.CallContext,long)
com.kenai.jffi.InvokeDynamicSupport$Invoker
com.kenai.jffi.InvokeDynamicSupport$Invoker: java.lang.reflect.Method method
com.kenai.jffi.InvokeDynamicSupport$Invoker: java.lang.Object methodHandle
com.kenai.jffi.InvokeDynamicSupport$Invoker: InvokeDynamicSupport$Invoker(java.lang.reflect.Method,java.lang.Object)
com.kenai.jffi.InvokeDynamicSupport$Invoker: java.lang.Object getMethodHandle()
com.kenai.jffi.InvokeDynamicSupport$Invoker: java.lang.reflect.Method getMethod()
com.kenai.jffi.InvokeDynamicSupport$JSR292
com.kenai.jffi.InvokeDynamicSupport$JSR292: com.kenai.jffi.InvokeDynamicSupport$JSR292 INSTANCE
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.Object lookup
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.reflect.Method unreflect
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.Class methodHandles
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.reflect.Method insertArguments
com.kenai.jffi.InvokeDynamicSupport$JSR292: boolean isAvailable()
com.kenai.jffi.InvokeDynamicSupport$JSR292: com.kenai.jffi.InvokeDynamicSupport$JSR292 getInstance()
com.kenai.jffi.InvokeDynamicSupport$JSR292: InvokeDynamicSupport$JSR292(java.lang.Object,java.lang.reflect.Method,java.lang.Class,java.lang.reflect.Method)
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.Object unreflect(java.lang.reflect.Method)
com.kenai.jffi.InvokeDynamicSupport$JSR292: java.lang.Object insertArguments(java.lang.Object,int,java.lang.Object[])
com.kenai.jffi.InvokeDynamicSupport$JSR292: void <clinit>()
com.kenai.jffi.Invoker
com.kenai.jffi.Invoker: com.kenai.jffi.Foreign foreign
com.kenai.jffi.Invoker: com.kenai.jffi.ObjectParameterInvoker objectParameterInvoker
com.kenai.jffi.Invoker: com.kenai.jffi.Invoker getInstance()
com.kenai.jffi.Invoker: Invoker()
com.kenai.jffi.Invoker: Invoker(com.kenai.jffi.Foreign,com.kenai.jffi.ObjectParameterInvoker)
com.kenai.jffi.Invoker: com.kenai.jffi.ObjectParameterInvoker getObjectParameterInvoker()
com.kenai.jffi.Invoker: int invokeI0(com.kenai.jffi.CallContext,long)
com.kenai.jffi.Invoker: int invokeI1(com.kenai.jffi.CallContext,long,int)
com.kenai.jffi.Invoker: int invokeI2(com.kenai.jffi.CallContext,long,int,int)
com.kenai.jffi.Invoker: int invokeI3(com.kenai.jffi.CallContext,long,int,int,int)
com.kenai.jffi.Invoker: int invokeI4(com.kenai.jffi.CallContext,long,int,int,int,int)
com.kenai.jffi.Invoker: int invokeI5(com.kenai.jffi.CallContext,long,int,int,int,int,int)
com.kenai.jffi.Invoker: int invokeI6(com.kenai.jffi.CallContext,long,int,int,int,int,int,int)
com.kenai.jffi.Invoker: int invokeI0NoErrno(com.kenai.jffi.CallContext,long)
com.kenai.jffi.Invoker: int invokeI1NoErrno(com.kenai.jffi.CallContext,long,int)
com.kenai.jffi.Invoker: int invokeI2NoErrno(com.kenai.jffi.CallContext,long,int,int)
com.kenai.jffi.Invoker: int invokeI3NoErrno(com.kenai.jffi.CallContext,long,int,int,int)
com.kenai.jffi.Invoker: int invokeI4NoErrno(com.kenai.jffi.CallContext,long,int,int,int,int)
com.kenai.jffi.Invoker: int invokeI5NoErrno(com.kenai.jffi.CallContext,long,int,int,int,int,int)
com.kenai.jffi.Invoker: int invokeI6NoErrno(com.kenai.jffi.CallContext,long,int,int,int,int,int,int)
com.kenai.jffi.Invoker: int invokeVrI(com.kenai.jffi.Function)
com.kenai.jffi.Invoker: int invokeNoErrnoVrI(com.kenai.jffi.Function)
com.kenai.jffi.Invoker: int invokeIrI(com.kenai.jffi.Function,int)
com.kenai.jffi.Invoker: int invokeNoErrnoIrI(com.kenai.jffi.Function,int)
com.kenai.jffi.Invoker: int invokeIIrI(com.kenai.jffi.Function,int,int)
com.kenai.jffi.Invoker: int invokeNoErrnoIIrI(com.kenai.jffi.Function,int,int)
com.kenai.jffi.Invoker: int invokeIIIrI(com.kenai.jffi.Function,int,int,int)
com.kenai.jffi.Invoker: int invokeNoErrnoIIIrI(com.kenai.jffi.Function,int,int,int)
com.kenai.jffi.Invoker: int invokeIIIIrI(com.kenai.jffi.Function,int,int,int,int)
com.kenai.jffi.Invoker: int invokeIIIIIrI(com.kenai.jffi.Function,int,int,int,int,int)
com.kenai.jffi.Invoker: int invokeIIIIIIrI(com.kenai.jffi.Function,int,int,int,int,int,int)
com.kenai.jffi.Invoker: long invokeL0(com.kenai.jffi.CallContext,long)
com.kenai.jffi.Invoker: long invokeL1(com.kenai.jffi.CallContext,long,long)
com.kenai.jffi.Invoker: long invokeL2(com.kenai.jffi.CallContext,long,long,long)
com.kenai.jffi.Invoker: long invokeL3(com.kenai.jffi.CallContext,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL4(com.kenai.jffi.CallContext,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL5(com.kenai.jffi.CallContext,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL0NoErrno(com.kenai.jffi.CallContext,long)
com.kenai.jffi.Invoker: long invokeL1NoErrno(com.kenai.jffi.CallContext,long,long)
com.kenai.jffi.Invoker: long invokeL2NoErrno(com.kenai.jffi.CallContext,long,long,long)
com.kenai.jffi.Invoker: long invokeL3NoErrno(com.kenai.jffi.CallContext,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL4NoErrno(com.kenai.jffi.CallContext,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL5NoErrno(com.kenai.jffi.CallContext,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeL6NoErrno(com.kenai.jffi.CallContext,long,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeVrL(com.kenai.jffi.Function)
com.kenai.jffi.Invoker: long invokeLrL(com.kenai.jffi.Function,long)
com.kenai.jffi.Invoker: long invokeLLrL(com.kenai.jffi.Function,long,long)
com.kenai.jffi.Invoker: long invokeLLLrL(com.kenai.jffi.Function,long,long,long)
com.kenai.jffi.Invoker: long invokeLLLLrL(com.kenai.jffi.Function,long,long,long,long)
com.kenai.jffi.Invoker: long invokeLLLLLrL(com.kenai.jffi.Function,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeLLLLLLrL(com.kenai.jffi.Function,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeN0(com.kenai.jffi.CallContext,long)
com.kenai.jffi.Invoker: long invokeN1(com.kenai.jffi.CallContext,long,long)
com.kenai.jffi.Invoker: long invokeN2(com.kenai.jffi.CallContext,long,long,long)
com.kenai.jffi.Invoker: long invokeN3(com.kenai.jffi.CallContext,long,long,long,long)
com.kenai.jffi.Invoker: long invokeN4(com.kenai.jffi.CallContext,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeVrN(com.kenai.jffi.Function)
com.kenai.jffi.Invoker: long invokeNrN(com.kenai.jffi.Function,long)
com.kenai.jffi.Invoker: long invokeNNrN(com.kenai.jffi.Function,long,long)
com.kenai.jffi.Invoker: long invokeNNNrN(com.kenai.jffi.Function,long,long,long)
com.kenai.jffi.Invoker: long invokeNNNNrN(com.kenai.jffi.Function,long,long,long,long)
com.kenai.jffi.Invoker: long invokeNNNNNrN(com.kenai.jffi.Function,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeNNNNNNrN(com.kenai.jffi.Function,long,long,long,long,long,long)
com.kenai.jffi.Invoker: long invokeNNO1rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeNNO2rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeNNNO1rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeNNNO2rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: java.lang.RuntimeException newObjectCountError(int)
com.kenai.jffi.Invoker: java.lang.RuntimeException newInsufficientObjectCountError(int)
com.kenai.jffi.Invoker: java.lang.RuntimeException newHeapObjectCountError(int)
com.kenai.jffi.Invoker: long invokeN1O1(com.kenai.jffi.CallContext,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN2O1(com.kenai.jffi.CallContext,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN2O2(com.kenai.jffi.CallContext,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3O1(com.kenai.jffi.CallContext,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3O2(com.kenai.jffi.CallContext,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3O3(com.kenai.jffi.CallContext,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4O1(com.kenai.jffi.CallContext,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4O2(com.kenai.jffi.CallContext,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4O3(com.kenai.jffi.CallContext,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5O1(com.kenai.jffi.CallContext,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5O2(com.kenai.jffi.CallContext,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5O3(com.kenai.jffi.CallContext,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6O1(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6O2(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6O3(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN1(com.kenai.jffi.CallContext,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN2(com.kenai.jffi.CallContext,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN2(com.kenai.jffi.CallContext,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3(com.kenai.jffi.CallContext,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3(com.kenai.jffi.CallContext,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN3(com.kenai.jffi.CallContext,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4(com.kenai.jffi.CallContext,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4(com.kenai.jffi.CallContext,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4(com.kenai.jffi.CallContext,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN4(com.kenai.jffi.CallContext,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN5(com.kenai.jffi.CallContext,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeN6(com.kenai.jffi.CallContext,long,long,long,long,long,long,long,int,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,com.kenai.jffi.ObjectParameterStrategy,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.Invoker: long invokeAddress(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: long invokeAddress(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: int invokeInt(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: int invokeInt(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: long invokeLong(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: long invokeLong(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: float invokeFloat(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: float invokeFloat(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: double invokeDouble(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: double invokeDouble(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: java.math.BigDecimal invokeBigDecimal(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: java.math.BigDecimal invokeBigDecimal(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: byte[] invokeStruct(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: byte[] invokeStruct(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: void invokeStruct(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer,byte[],int)
com.kenai.jffi.Invoker: void invokeStruct(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer,byte[],int)
com.kenai.jffi.Invoker: java.lang.Object invokeObject(com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker: void invoke(com.kenai.jffi.Function,long,long[])
com.kenai.jffi.Invoker: void invoke(com.kenai.jffi.CallContext,long,long,long[])
com.kenai.jffi.Invoker: int invokeArrayWithObjectsInt32(long,long,com.kenai.jffi.HeapInvocationBuffer,com.kenai.jffi.ObjectBuffer)
com.kenai.jffi.Invoker: long invokeArrayWithObjectsInt64(long,long,com.kenai.jffi.HeapInvocationBuffer,com.kenai.jffi.ObjectBuffer)
com.kenai.jffi.Invoker: Invoker(com.kenai.jffi.Invoker$1)
com.kenai.jffi.Invoker$1
com.kenai.jffi.Invoker$ILP32
com.kenai.jffi.Invoker$ILP32: com.kenai.jffi.Invoker INSTANCE
com.kenai.jffi.Invoker$ILP32: long ADDRESS_MASK
com.kenai.jffi.Invoker$ILP32: Invoker$ILP32()
com.kenai.jffi.Invoker$ILP32: long invokeAddress(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker$ILP32: com.kenai.jffi.Invoker access$100()
com.kenai.jffi.Invoker$ILP32: void <clinit>()
com.kenai.jffi.Invoker$LP64
com.kenai.jffi.Invoker$LP64: com.kenai.jffi.Invoker INSTANCE
com.kenai.jffi.Invoker$LP64: Invoker$LP64()
com.kenai.jffi.Invoker$LP64: long invokeAddress(com.kenai.jffi.CallContext,long,com.kenai.jffi.HeapInvocationBuffer)
com.kenai.jffi.Invoker$LP64: com.kenai.jffi.Invoker access$000()
com.kenai.jffi.Invoker$LP64: void <clinit>()
com.kenai.jffi.Invoker$SingletonHolder
com.kenai.jffi.Invoker$SingletonHolder: com.kenai.jffi.Invoker INSTANCE
com.kenai.jffi.Invoker$SingletonHolder: Invoker$SingletonHolder()
com.kenai.jffi.Invoker$SingletonHolder: com.kenai.jffi.Invoker access$200()
com.kenai.jffi.Invoker$SingletonHolder: void <clinit>()
com.kenai.jffi.LastError
com.kenai.jffi.LastError: com.kenai.jffi.Foreign foreign
com.kenai.jffi.LastError: LastError()
com.kenai.jffi.LastError: com.kenai.jffi.LastError getInstance()
com.kenai.jffi.LastError: int getError()
com.kenai.jffi.LastError: int get()
com.kenai.jffi.LastError: void set(int)
com.kenai.jffi.LastError: LastError(com.kenai.jffi.LastError$1)
com.kenai.jffi.LastError$1
com.kenai.jffi.LastError$SingletonHolder
com.kenai.jffi.LastError$SingletonHolder: com.kenai.jffi.LastError INSTANCE
com.kenai.jffi.LastError$SingletonHolder: LastError$SingletonHolder()
com.kenai.jffi.LastError$SingletonHolder: void <clinit>()
com.kenai.jffi.Library
com.kenai.jffi.Library: java.util.Map cache
com.kenai.jffi.Library: java.lang.Object lock
com.kenai.jffi.Library: java.lang.ThreadLocal lastError
com.kenai.jffi.Library: int LAZY
com.kenai.jffi.Library: int NOW
com.kenai.jffi.Library: int LOCAL
com.kenai.jffi.Library: int GLOBAL
com.kenai.jffi.Library: long handle
com.kenai.jffi.Library: java.lang.String name
com.kenai.jffi.Library: com.kenai.jffi.Foreign foreign
com.kenai.jffi.Library: long dlopen(com.kenai.jffi.Foreign,java.lang.String,int)
com.kenai.jffi.Library: com.kenai.jffi.Library getDefault()
com.kenai.jffi.Library: com.kenai.jffi.Library getCachedInstance(java.lang.String,int)
com.kenai.jffi.Library: com.kenai.jffi.Library openLibrary(java.lang.String,int)
com.kenai.jffi.Library: Library(com.kenai.jffi.Foreign,java.lang.String,long)
com.kenai.jffi.Library: long getSymbolAddress(java.lang.String)
com.kenai.jffi.Library: java.lang.String getLastError()
com.kenai.jffi.Library: void finalize()
com.kenai.jffi.Library: void <clinit>()
com.kenai.jffi.Library$DefaultLibrary
com.kenai.jffi.Library$DefaultLibrary: com.kenai.jffi.Library INSTANCE
com.kenai.jffi.Library$DefaultLibrary: Library$DefaultLibrary()
com.kenai.jffi.Library$DefaultLibrary: com.kenai.jffi.Library access$000()
com.kenai.jffi.Library$DefaultLibrary: void <clinit>()
com.kenai.jffi.Main
com.kenai.jffi.Main: Main()
com.kenai.jffi.Main: void main(java.lang.String[])
com.kenai.jffi.Main: int v(com.kenai.jffi.Foreign,int)
com.kenai.jffi.MemoryIO
com.kenai.jffi.MemoryIO: com.kenai.jffi.Foreign foreign
com.kenai.jffi.MemoryIO: long ADDRESS_MASK
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO getInstance()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO getCheckedInstance()
com.kenai.jffi.MemoryIO: MemoryIO()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newMemoryIO()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newNativeImpl()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newNativeCheckedImpl()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newNativeImpl32()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newNativeImpl64()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newUnsafeImpl()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newUnsafeImpl32()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO newUnsafeImpl64()
com.kenai.jffi.MemoryIO: byte getByte(long)
com.kenai.jffi.MemoryIO: short getShort(long)
com.kenai.jffi.MemoryIO: int getInt(long)
com.kenai.jffi.MemoryIO: long getLong(long)
com.kenai.jffi.MemoryIO: float getFloat(long)
com.kenai.jffi.MemoryIO: double getDouble(long)
com.kenai.jffi.MemoryIO: long getAddress(long)
com.kenai.jffi.MemoryIO: void putByte(long,byte)
com.kenai.jffi.MemoryIO: void putShort(long,short)
com.kenai.jffi.MemoryIO: void putInt(long,int)
com.kenai.jffi.MemoryIO: void putLong(long,long)
com.kenai.jffi.MemoryIO: void putFloat(long,float)
com.kenai.jffi.MemoryIO: void putDouble(long,double)
com.kenai.jffi.MemoryIO: void putAddress(long,long)
com.kenai.jffi.MemoryIO: void copyMemory(long,long,long)
com.kenai.jffi.MemoryIO: void _copyMemory(long,long,long)
com.kenai.jffi.MemoryIO: void setMemory(long,long,byte)
com.kenai.jffi.MemoryIO: void memcpy(long,long,long)
com.kenai.jffi.MemoryIO: void memmove(long,long,long)
com.kenai.jffi.MemoryIO: void memset(long,int,long)
com.kenai.jffi.MemoryIO: long memchr(long,int,long)
com.kenai.jffi.MemoryIO: void putByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO: void getByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO: void putCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO: void getCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO: void putShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO: void getShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO: void putIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO: void getIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO: void putLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO: void getLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO: void putFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO: void getFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO: void putDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO: void getDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO: long allocateMemory(long,boolean)
com.kenai.jffi.MemoryIO: void freeMemory(long)
com.kenai.jffi.MemoryIO: long getStringLength(long)
com.kenai.jffi.MemoryIO: byte[] getZeroTerminatedByteArray(long)
com.kenai.jffi.MemoryIO: byte[] getZeroTerminatedByteArray(long,int)
com.kenai.jffi.MemoryIO: byte[] getZeroTerminatedByteArray(long,long)
com.kenai.jffi.MemoryIO: void putZeroTerminatedByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO: long indexOf(long,byte)
com.kenai.jffi.MemoryIO: long indexOf(long,byte,int)
com.kenai.jffi.MemoryIO: java.nio.ByteBuffer newDirectByteBuffer(long,int)
com.kenai.jffi.MemoryIO: long getDirectBufferAddress(java.nio.Buffer)
com.kenai.jffi.MemoryIO: void verifyAccessor(java.lang.Class,java.lang.Class)
com.kenai.jffi.MemoryIO: boolean isUnsafeAvailable()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO access$000()
com.kenai.jffi.MemoryIO: com.kenai.jffi.MemoryIO access$100()
com.kenai.jffi.MemoryIO: MemoryIO(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO: long access$1100()
com.kenai.jffi.MemoryIO: void <clinit>()
com.kenai.jffi.MemoryIO$1
com.kenai.jffi.MemoryIO$CheckedMemorySingletonHolder
com.kenai.jffi.MemoryIO$CheckedMemorySingletonHolder: com.kenai.jffi.MemoryIO INSTANCE
com.kenai.jffi.MemoryIO$CheckedMemorySingletonHolder: MemoryIO$CheckedMemorySingletonHolder()
com.kenai.jffi.MemoryIO$CheckedMemorySingletonHolder: com.kenai.jffi.MemoryIO access$300()
com.kenai.jffi.MemoryIO$CheckedMemorySingletonHolder: void <clinit>()
com.kenai.jffi.MemoryIO$CheckedNativeImpl
com.kenai.jffi.MemoryIO$CheckedNativeImpl: MemoryIO$CheckedNativeImpl()
com.kenai.jffi.MemoryIO$CheckedNativeImpl: byte getByte(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: short getShort(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: int getInt(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: long getLong(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: float getFloat(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: double getDouble(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putByte(long,byte)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putShort(long,short)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putInt(long,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putLong(long,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putFloat(long,float)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putDouble(long,double)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void setMemory(long,long,byte)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void _copyMemory(long,long,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: long getAddress(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putAddress(long,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void memcpy(long,long,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void memmove(long,long,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: long memchr(long,int,long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void getDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: long getStringLength(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: byte[] getZeroTerminatedByteArray(long)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: byte[] getZeroTerminatedByteArray(long,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: void putZeroTerminatedByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$CheckedNativeImpl: MemoryIO$CheckedNativeImpl(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$NativeImpl
com.kenai.jffi.MemoryIO$NativeImpl: MemoryIO$NativeImpl()
com.kenai.jffi.MemoryIO$NativeImpl: byte getByte(long)
com.kenai.jffi.MemoryIO$NativeImpl: short getShort(long)
com.kenai.jffi.MemoryIO$NativeImpl: int getInt(long)
com.kenai.jffi.MemoryIO$NativeImpl: long getLong(long)
com.kenai.jffi.MemoryIO$NativeImpl: float getFloat(long)
com.kenai.jffi.MemoryIO$NativeImpl: double getDouble(long)
com.kenai.jffi.MemoryIO$NativeImpl: void putByte(long,byte)
com.kenai.jffi.MemoryIO$NativeImpl: void putShort(long,short)
com.kenai.jffi.MemoryIO$NativeImpl: void putInt(long,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putLong(long,long)
com.kenai.jffi.MemoryIO$NativeImpl: void putFloat(long,float)
com.kenai.jffi.MemoryIO$NativeImpl: void putDouble(long,double)
com.kenai.jffi.MemoryIO$NativeImpl: void setMemory(long,long,byte)
com.kenai.jffi.MemoryIO$NativeImpl: void _copyMemory(long,long,long)
com.kenai.jffi.MemoryIO$NativeImpl: void memcpy(long,long,long)
com.kenai.jffi.MemoryIO$NativeImpl: void memmove(long,long,long)
com.kenai.jffi.MemoryIO$NativeImpl: long memchr(long,int,long)
com.kenai.jffi.MemoryIO$NativeImpl: void putByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: void getDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: long getStringLength(long)
com.kenai.jffi.MemoryIO$NativeImpl: byte[] getZeroTerminatedByteArray(long)
com.kenai.jffi.MemoryIO$NativeImpl: byte[] getZeroTerminatedByteArray(long,int)
com.kenai.jffi.MemoryIO$NativeImpl: void putZeroTerminatedByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$NativeImpl: MemoryIO$NativeImpl(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$NativeImpl32
com.kenai.jffi.MemoryIO$NativeImpl32: MemoryIO$NativeImpl32()
com.kenai.jffi.MemoryIO$NativeImpl32: long getAddress(long)
com.kenai.jffi.MemoryIO$NativeImpl32: void putAddress(long,long)
com.kenai.jffi.MemoryIO$NativeImpl32: MemoryIO$NativeImpl32(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$NativeImpl64
com.kenai.jffi.MemoryIO$NativeImpl64: MemoryIO$NativeImpl64()
com.kenai.jffi.MemoryIO$NativeImpl64: long getAddress(long)
com.kenai.jffi.MemoryIO$NativeImpl64: void putAddress(long,long)
com.kenai.jffi.MemoryIO$NativeImpl64: MemoryIO$NativeImpl64(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$SingletonHolder
com.kenai.jffi.MemoryIO$SingletonHolder: com.kenai.jffi.MemoryIO INSTANCE
com.kenai.jffi.MemoryIO$SingletonHolder: MemoryIO$SingletonHolder()
com.kenai.jffi.MemoryIO$SingletonHolder: com.kenai.jffi.MemoryIO access$200()
com.kenai.jffi.MemoryIO$SingletonHolder: void <clinit>()
com.kenai.jffi.MemoryIO$UnsafeImpl
com.kenai.jffi.MemoryIO$UnsafeImpl: sun.misc.Unsafe unsafe
com.kenai.jffi.MemoryIO$UnsafeImpl: MemoryIO$UnsafeImpl()
com.kenai.jffi.MemoryIO$UnsafeImpl: java.lang.Object getUnsafe()
com.kenai.jffi.MemoryIO$UnsafeImpl: byte getByte(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: short getShort(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: int getInt(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: long getLong(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: float getFloat(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: double getDouble(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putByte(long,byte)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putShort(long,short)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putInt(long,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putLong(long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putFloat(long,float)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putDouble(long,double)
com.kenai.jffi.MemoryIO$UnsafeImpl: void _copyMemory(long,long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl: void setMemory(long,long,byte)
com.kenai.jffi.MemoryIO$UnsafeImpl: void memcpy(long,long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl: void memmove(long,long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl: long memchr(long,int,long)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getCharArray(long,char[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getShortArray(long,short[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getIntArray(long,int[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getLongArray(long,long[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getFloatArray(long,float[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void getDoubleArray(long,double[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: long getStringLength(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: byte[] getZeroTerminatedByteArray(long)
com.kenai.jffi.MemoryIO$UnsafeImpl: byte[] getZeroTerminatedByteArray(long,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: void putZeroTerminatedByteArray(long,byte[],int,int)
com.kenai.jffi.MemoryIO$UnsafeImpl: MemoryIO$UnsafeImpl(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$UnsafeImpl: void <clinit>()
com.kenai.jffi.MemoryIO$UnsafeImpl32
com.kenai.jffi.MemoryIO$UnsafeImpl32: MemoryIO$UnsafeImpl32()
com.kenai.jffi.MemoryIO$UnsafeImpl32: long getAddress(long)
com.kenai.jffi.MemoryIO$UnsafeImpl32: void putAddress(long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl32: MemoryIO$UnsafeImpl32(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.MemoryIO$UnsafeImpl64
com.kenai.jffi.MemoryIO$UnsafeImpl64: MemoryIO$UnsafeImpl64()
com.kenai.jffi.MemoryIO$UnsafeImpl64: long getAddress(long)
com.kenai.jffi.MemoryIO$UnsafeImpl64: void putAddress(long,long)
com.kenai.jffi.MemoryIO$UnsafeImpl64: MemoryIO$UnsafeImpl64(com.kenai.jffi.MemoryIO$1)
com.kenai.jffi.NativeMethod
com.kenai.jffi.NativeMethod: long function
com.kenai.jffi.NativeMethod: java.lang.String name
com.kenai.jffi.NativeMethod: java.lang.String signature
com.kenai.jffi.NativeMethod: NativeMethod(long,java.lang.String,java.lang.String)
com.kenai.jffi.NativeMethods
com.kenai.jffi.NativeMethods: java.util.Map registeredMethods
com.kenai.jffi.NativeMethods: com.kenai.jffi.NativeMethods$ResourceHolder memory
com.kenai.jffi.NativeMethods: NativeMethods(com.kenai.jffi.NativeMethods$ResourceHolder)
com.kenai.jffi.NativeMethods: void register(java.lang.Class,java.util.List)
com.kenai.jffi.NativeMethods: void unregister(java.lang.Class)
com.kenai.jffi.NativeMethods: void <clinit>()
com.kenai.jffi.NativeMethods$ResourceHolder
com.kenai.jffi.NativeMethods$ResourceHolder: com.kenai.jffi.MemoryIO mm
com.kenai.jffi.NativeMethods$ResourceHolder: long memory
com.kenai.jffi.NativeMethods$ResourceHolder: NativeMethods$ResourceHolder(com.kenai.jffi.MemoryIO,long)
com.kenai.jffi.NativeMethods$ResourceHolder: void finalize()
com.kenai.jffi.NativeObjectParameterInvoker
com.kenai.jffi.NativeObjectParameterInvoker: com.kenai.jffi.Foreign foreign
com.kenai.jffi.NativeObjectParameterInvoker: boolean isNative()
com.kenai.jffi.NativeObjectParameterInvoker: NativeObjectParameterInvoker(com.kenai.jffi.Foreign)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN1O1rN(com.kenai.jffi.Function,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN1O1(com.kenai.jffi.CallContext,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN2O1rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN2O1(com.kenai.jffi.CallContext,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN2O2rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN3O1rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN3O2rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN3O3rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN4O1rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN4O2rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN4O3rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN5O1rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN5O2rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN5O3rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN6O1rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN6O2rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeObjectParameterInvoker: long invokeN6O3rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.NativeType
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType VOID
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType FLOAT
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType DOUBLE
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType LONGDOUBLE
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UINT8
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SINT8
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UINT16
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SINT16
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UINT32
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SINT32
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UINT64
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SINT64
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType POINTER
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UCHAR
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SCHAR
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType USHORT
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SSHORT
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType UINT
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SINT
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType ULONG
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType SLONG
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType STRUCT
com.kenai.jffi.NativeType: int ffiType
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType[] $VALUES
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType[] values()
com.kenai.jffi.NativeType: com.kenai.jffi.NativeType valueOf(java.lang.String)
com.kenai.jffi.NativeType: NativeType(java.lang.String,int,int)
com.kenai.jffi.NativeType: void <clinit>()
com.kenai.jffi.ObjectBuffer
com.kenai.jffi.ObjectBuffer: int IN
com.kenai.jffi.ObjectBuffer: int OUT
com.kenai.jffi.ObjectBuffer: int ZERO_TERMINATE
com.kenai.jffi.ObjectBuffer: int PINNED
com.kenai.jffi.ObjectBuffer: int CLEAR
com.kenai.jffi.ObjectBuffer: int INDEX_SHIFT
com.kenai.jffi.ObjectBuffer: int INDEX_MASK
com.kenai.jffi.ObjectBuffer: int TYPE_SHIFT
com.kenai.jffi.ObjectBuffer: int TYPE_MASK
com.kenai.jffi.ObjectBuffer: int PRIM_MASK
com.kenai.jffi.ObjectBuffer: int FLAGS_SHIFT
com.kenai.jffi.ObjectBuffer: int FLAGS_MASK
com.kenai.jffi.ObjectBuffer: int ARRAY
com.kenai.jffi.ObjectBuffer: int BUFFER
com.kenai.jffi.ObjectBuffer: int JNI
com.kenai.jffi.ObjectBuffer: int BYTE
com.kenai.jffi.ObjectBuffer: int SHORT
com.kenai.jffi.ObjectBuffer: int INT
com.kenai.jffi.ObjectBuffer: int LONG
com.kenai.jffi.ObjectBuffer: int FLOAT
com.kenai.jffi.ObjectBuffer: int DOUBLE
com.kenai.jffi.ObjectBuffer: int BOOLEAN
com.kenai.jffi.ObjectBuffer: int CHAR
com.kenai.jffi.ObjectBuffer: int JNIENV
com.kenai.jffi.ObjectBuffer: int JNIOBJECT
com.kenai.jffi.ObjectBuffer: java.lang.Object[] objects
com.kenai.jffi.ObjectBuffer: int[] info
com.kenai.jffi.ObjectBuffer: int infoIndex
com.kenai.jffi.ObjectBuffer: int objectIndex
com.kenai.jffi.ObjectBuffer: ObjectBuffer()
com.kenai.jffi.ObjectBuffer: ObjectBuffer(int)
com.kenai.jffi.ObjectBuffer: int objectCount()
com.kenai.jffi.ObjectBuffer: int[] info()
com.kenai.jffi.ObjectBuffer: java.lang.Object[] objects()
com.kenai.jffi.ObjectBuffer: void ensureSpace()
com.kenai.jffi.ObjectBuffer: int makeObjectFlags(int,int,int)
com.kenai.jffi.ObjectBuffer: int makeBufferFlags(int)
com.kenai.jffi.ObjectBuffer: int makeJNIFlags(int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,byte[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,short[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,int[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,long[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,float[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,double[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,boolean[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putArray(int,char[],int,int,int)
com.kenai.jffi.ObjectBuffer: void putDirectBuffer(int,java.nio.Buffer,int,int)
com.kenai.jffi.ObjectBuffer: void putJNI(int,java.lang.Object,int)
com.kenai.jffi.ObjectBuffer: void putObject(java.lang.Object,int,int,int)
com.kenai.jffi.ObjectParameterInfo
com.kenai.jffi.ObjectParameterInfo: java.util.concurrent.ConcurrentMap CACHE
com.kenai.jffi.ObjectParameterInfo: int parameterIndex
com.kenai.jffi.ObjectParameterInfo: int ioflags
com.kenai.jffi.ObjectParameterInfo: int objectInfo
com.kenai.jffi.ObjectParameterInfo: int IN
com.kenai.jffi.ObjectParameterInfo: int OUT
com.kenai.jffi.ObjectParameterInfo: int PINNED
com.kenai.jffi.ObjectParameterInfo: int NULTERMINATE
com.kenai.jffi.ObjectParameterInfo: int CLEAR
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ObjectType ARRAY
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ObjectType BUFFER
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType BYTE
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType SHORT
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType INT
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType LONG
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType FLOAT
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType DOUBLE
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType BOOLEAN
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo$ComponentType CHAR
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo create(int,com.kenai.jffi.ObjectParameterInfo$ObjectType,com.kenai.jffi.ObjectParameterInfo$ComponentType,int)
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo create(int,int)
com.kenai.jffi.ObjectParameterInfo: com.kenai.jffi.ObjectParameterInfo getCachedInfo(int)
com.kenai.jffi.ObjectParameterInfo: ObjectParameterInfo(int)
com.kenai.jffi.ObjectParameterInfo: int asObjectInfo()
com.kenai.jffi.ObjectParameterInfo: int ioflags()
com.kenai.jffi.ObjectParameterInfo: int getParameterIndex()
com.kenai.jffi.ObjectParameterInfo: boolean equals(java.lang.Object)
com.kenai.jffi.ObjectParameterInfo: int hashCode()
com.kenai.jffi.ObjectParameterInfo: void <clinit>()
com.kenai.jffi.ObjectParameterInfo$ComponentType
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType BYTE
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType SHORT
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType INT
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType LONG
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType FLOAT
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType DOUBLE
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType BOOLEAN
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType CHAR
com.kenai.jffi.ObjectParameterInfo$ComponentType: int value
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType[] $VALUES
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType[] values()
com.kenai.jffi.ObjectParameterInfo$ComponentType: com.kenai.jffi.ObjectParameterInfo$ComponentType valueOf(java.lang.String)
com.kenai.jffi.ObjectParameterInfo$ComponentType: ObjectParameterInfo$ComponentType(java.lang.String,int,int)
com.kenai.jffi.ObjectParameterInfo$ComponentType: void <clinit>()
com.kenai.jffi.ObjectParameterInfo$ObjectType
com.kenai.jffi.ObjectParameterInfo$ObjectType: com.kenai.jffi.ObjectParameterInfo$ObjectType ARRAY
com.kenai.jffi.ObjectParameterInfo$ObjectType: com.kenai.jffi.ObjectParameterInfo$ObjectType BUFFER
com.kenai.jffi.ObjectParameterInfo$ObjectType: int value
com.kenai.jffi.ObjectParameterInfo$ObjectType: com.kenai.jffi.ObjectParameterInfo$ObjectType[] $VALUES
com.kenai.jffi.ObjectParameterInfo$ObjectType: com.kenai.jffi.ObjectParameterInfo$ObjectType[] values()
com.kenai.jffi.ObjectParameterInfo$ObjectType: com.kenai.jffi.ObjectParameterInfo$ObjectType valueOf(java.lang.String)
com.kenai.jffi.ObjectParameterInfo$ObjectType: ObjectParameterInfo$ObjectType(java.lang.String,int,int)
com.kenai.jffi.ObjectParameterInfo$ObjectType: void <clinit>()
com.kenai.jffi.ObjectParameterInvoker
com.kenai.jffi.ObjectParameterInvoker: ObjectParameterInvoker()
com.kenai.jffi.ObjectParameterInvoker: com.kenai.jffi.ObjectParameterInvoker getInstance()
com.kenai.jffi.ObjectParameterInvoker: com.kenai.jffi.ObjectParameterInvoker newNativeInvoker()
com.kenai.jffi.ObjectParameterInvoker: com.kenai.jffi.ObjectParameterInvoker newHeapInvoker()
com.kenai.jffi.ObjectParameterInvoker: boolean isNative()
com.kenai.jffi.ObjectParameterInvoker: long invokeN1O1rN(com.kenai.jffi.Function,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN2O1rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN2O2rN(com.kenai.jffi.Function,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN3O1rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN3O2rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN3O3rN(com.kenai.jffi.Function,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN4O1rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN4O2rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN4O3rN(com.kenai.jffi.Function,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN5O1rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN5O2rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN5O3rN(com.kenai.jffi.Function,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN6O1rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN6O2rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker: long invokeN6O3rN(com.kenai.jffi.Function,long,long,long,long,long,long,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo,java.lang.Object,int,int,com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterInvoker$SingletonHolder
com.kenai.jffi.ObjectParameterInvoker$SingletonHolder: com.kenai.jffi.ObjectParameterInvoker INSTANCE
com.kenai.jffi.ObjectParameterInvoker$SingletonHolder: ObjectParameterInvoker$SingletonHolder()
com.kenai.jffi.ObjectParameterInvoker$SingletonHolder: void <clinit>()
com.kenai.jffi.ObjectParameterStrategy
com.kenai.jffi.ObjectParameterStrategy: boolean isDirect
com.kenai.jffi.ObjectParameterStrategy: int typeInfo
com.kenai.jffi.ObjectParameterStrategy: com.kenai.jffi.ObjectParameterStrategy$StrategyType DIRECT
com.kenai.jffi.ObjectParameterStrategy: com.kenai.jffi.ObjectParameterStrategy$StrategyType HEAP
com.kenai.jffi.ObjectParameterStrategy: ObjectParameterStrategy(boolean)
com.kenai.jffi.ObjectParameterStrategy: ObjectParameterStrategy(boolean,com.kenai.jffi.ObjectParameterType)
com.kenai.jffi.ObjectParameterStrategy: ObjectParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType)
com.kenai.jffi.ObjectParameterStrategy: ObjectParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType,com.kenai.jffi.ObjectParameterType)
com.kenai.jffi.ObjectParameterStrategy: boolean isDirect()
com.kenai.jffi.ObjectParameterStrategy: int objectInfo(com.kenai.jffi.ObjectParameterInfo)
com.kenai.jffi.ObjectParameterStrategy: long address(java.lang.Object)
com.kenai.jffi.ObjectParameterStrategy: java.lang.Object object(java.lang.Object)
com.kenai.jffi.ObjectParameterStrategy: int offset(java.lang.Object)
com.kenai.jffi.ObjectParameterStrategy: int length(java.lang.Object)
com.kenai.jffi.ObjectParameterStrategy: void <clinit>()
com.kenai.jffi.ObjectParameterStrategy$StrategyType
com.kenai.jffi.ObjectParameterStrategy$StrategyType: com.kenai.jffi.ObjectParameterStrategy$StrategyType DIRECT
com.kenai.jffi.ObjectParameterStrategy$StrategyType: com.kenai.jffi.ObjectParameterStrategy$StrategyType HEAP
com.kenai.jffi.ObjectParameterStrategy$StrategyType: com.kenai.jffi.ObjectParameterStrategy$StrategyType[] $VALUES
com.kenai.jffi.ObjectParameterStrategy$StrategyType: com.kenai.jffi.ObjectParameterStrategy$StrategyType[] values()
com.kenai.jffi.ObjectParameterStrategy$StrategyType: com.kenai.jffi.ObjectParameterStrategy$StrategyType valueOf(java.lang.String)
com.kenai.jffi.ObjectParameterStrategy$StrategyType: ObjectParameterStrategy$StrategyType(java.lang.String,int)
com.kenai.jffi.ObjectParameterStrategy$StrategyType: void <clinit>()
com.kenai.jffi.ObjectParameterType
com.kenai.jffi.ObjectParameterType: int typeInfo
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType INVALID
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType NONE
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ObjectType ARRAY
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ObjectType BUFFER
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType BYTE
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType SHORT
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType INT
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType LONG
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType FLOAT
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType DOUBLE
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType BOOLEAN
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType$ComponentType CHAR
com.kenai.jffi.ObjectParameterType: com.kenai.jffi.ObjectParameterType create(com.kenai.jffi.ObjectParameterType$ObjectType,com.kenai.jffi.ObjectParameterType$ComponentType)
com.kenai.jffi.ObjectParameterType: ObjectParameterType(int)
com.kenai.jffi.ObjectParameterType: ObjectParameterType(com.kenai.jffi.ObjectParameterType$ObjectType,com.kenai.jffi.ObjectParameterType$ComponentType)
com.kenai.jffi.ObjectParameterType: boolean equals(java.lang.Object)
com.kenai.jffi.ObjectParameterType: int hashCode()
com.kenai.jffi.ObjectParameterType: void <clinit>()
com.kenai.jffi.ObjectParameterType$ComponentType
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType BYTE
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType SHORT
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType INT
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType LONG
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType FLOAT
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType DOUBLE
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType BOOLEAN
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType CHAR
com.kenai.jffi.ObjectParameterType$ComponentType: int value
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType[] $VALUES
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType[] values()
com.kenai.jffi.ObjectParameterType$ComponentType: com.kenai.jffi.ObjectParameterType$ComponentType valueOf(java.lang.String)
com.kenai.jffi.ObjectParameterType$ComponentType: ObjectParameterType$ComponentType(java.lang.String,int,int)
com.kenai.jffi.ObjectParameterType$ComponentType: void <clinit>()
com.kenai.jffi.ObjectParameterType$ObjectType
com.kenai.jffi.ObjectParameterType$ObjectType: com.kenai.jffi.ObjectParameterType$ObjectType ARRAY
com.kenai.jffi.ObjectParameterType$ObjectType: com.kenai.jffi.ObjectParameterType$ObjectType BUFFER
com.kenai.jffi.ObjectParameterType$ObjectType: int value
com.kenai.jffi.ObjectParameterType$ObjectType: com.kenai.jffi.ObjectParameterType$ObjectType[] $VALUES
com.kenai.jffi.ObjectParameterType$ObjectType: com.kenai.jffi.ObjectParameterType$ObjectType[] values()
com.kenai.jffi.ObjectParameterType$ObjectType: com.kenai.jffi.ObjectParameterType$ObjectType valueOf(java.lang.String)
com.kenai.jffi.ObjectParameterType$ObjectType: ObjectParameterType$ObjectType(java.lang.String,int,int)
com.kenai.jffi.ObjectParameterType$ObjectType: void <clinit>()
com.kenai.jffi.ObjectParameterType$TypeCache
com.kenai.jffi.ObjectParameterType$TypeCache: com.kenai.jffi.ObjectParameterType[] arrayTypeCache
com.kenai.jffi.ObjectParameterType$TypeCache: com.kenai.jffi.ObjectParameterType[] bufferTypeCache
com.kenai.jffi.ObjectParameterType$TypeCache: ObjectParameterType$TypeCache()
com.kenai.jffi.ObjectParameterType$TypeCache: void <clinit>()
com.kenai.jffi.PageManager
com.kenai.jffi.PageManager: int PROT_EXEC
com.kenai.jffi.PageManager: int PROT_READ
com.kenai.jffi.PageManager: int PROT_WRITE
com.kenai.jffi.PageManager: com.kenai.jffi.Foreign foreign
com.kenai.jffi.PageManager: int pageSize
com.kenai.jffi.PageManager: PageManager()
com.kenai.jffi.PageManager: com.kenai.jffi.PageManager getInstance()
com.kenai.jffi.PageManager: long pageSize()
com.kenai.jffi.PageManager: long calculatePageSize()
com.kenai.jffi.PageManager: long allocatePages(int,int)
com.kenai.jffi.PageManager: void freePages(long,int)
com.kenai.jffi.PageManager: void protectPages(long,int,int)
com.kenai.jffi.PageManager$SingletonHolder
com.kenai.jffi.PageManager$SingletonHolder: com.kenai.jffi.PageManager INSTANCE
com.kenai.jffi.PageManager$SingletonHolder: PageManager$SingletonHolder()
com.kenai.jffi.PageManager$SingletonHolder: void <clinit>()
com.kenai.jffi.PageManager$Unix
com.kenai.jffi.PageManager$Unix: PageManager$Unix()
com.kenai.jffi.PageManager$Unix: long allocatePages(int,int)
com.kenai.jffi.PageManager$Unix: void freePages(long,int)
com.kenai.jffi.PageManager$Unix: void protectPages(long,int,int)
com.kenai.jffi.PageManager$Windows
com.kenai.jffi.PageManager$Windows: PageManager$Windows()
com.kenai.jffi.PageManager$Windows: long allocatePages(int,int)
com.kenai.jffi.PageManager$Windows: void freePages(long,int)
com.kenai.jffi.PageManager$Windows: void protectPages(long,int,int)
com.kenai.jffi.PageManager$Windows: int w32prot(int)
com.kenai.jffi.Platform
com.kenai.jffi.Platform: java.util.Locale LOCALE
com.kenai.jffi.Platform: com.kenai.jffi.Platform$OS os
com.kenai.jffi.Platform: int javaVersionMajor
com.kenai.jffi.Platform: com.kenai.jffi.Platform$OS determineOS()
com.kenai.jffi.Platform: com.kenai.jffi.Platform determinePlatform(com.kenai.jffi.Platform$OS)
com.kenai.jffi.Platform: com.kenai.jffi.Platform newDarwinPlatform()
com.kenai.jffi.Platform: com.kenai.jffi.Platform newWindowsPlatform()
com.kenai.jffi.Platform: com.kenai.jffi.Platform newDefaultPlatform(com.kenai.jffi.Platform$OS)
com.kenai.jffi.Platform: Platform(com.kenai.jffi.Platform$OS)
com.kenai.jffi.Platform: com.kenai.jffi.Platform getPlatform()
com.kenai.jffi.Platform: com.kenai.jffi.Platform$OS getOS()
com.kenai.jffi.Platform: com.kenai.jffi.Platform$CPU getCPU()
com.kenai.jffi.Platform: int getJavaMajorVersion()
com.kenai.jffi.Platform: int longSize()
com.kenai.jffi.Platform: int addressSize()
com.kenai.jffi.Platform: long addressMask()
com.kenai.jffi.Platform: java.lang.String getName()
com.kenai.jffi.Platform: java.lang.String mapLibraryName(java.lang.String)
com.kenai.jffi.Platform: java.lang.String getLibraryNamePattern()
com.kenai.jffi.Platform: boolean isSupported()
com.kenai.jffi.Platform: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)
com.kenai.jffi.Platform: java.util.Locale access$000()
com.kenai.jffi.Platform: com.kenai.jffi.Platform$OS access$100()
com.kenai.jffi.Platform: com.kenai.jffi.Platform access$200(com.kenai.jffi.Platform$OS)
com.kenai.jffi.Platform: Platform(com.kenai.jffi.Platform$OS,com.kenai.jffi.Platform$1)
com.kenai.jffi.Platform: void <clinit>()
com.kenai.jffi.Platform$1
com.kenai.jffi.Platform$1: int[] $SwitchMap$com$kenai$jffi$Platform$OS
com.kenai.jffi.Platform$1: void <clinit>()
com.kenai.jffi.Platform$ArchHolder
com.kenai.jffi.Platform$ArchHolder: com.kenai.jffi.Platform$CPU cpu
com.kenai.jffi.Platform$ArchHolder: Platform$ArchHolder()
com.kenai.jffi.Platform$ArchHolder: com.kenai.jffi.Platform$CPU determineCPU()
com.kenai.jffi.Platform$ArchHolder: void <clinit>()
com.kenai.jffi.Platform$CPU
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU I386
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU X86_64
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU PPC
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU PPC64
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU PPC64LE
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU SPARC
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU SPARCV9
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU S390X
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU ARM
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU UNKNOWN
com.kenai.jffi.Platform$CPU: int dataModel
com.kenai.jffi.Platform$CPU: long addressMask
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU[] $VALUES
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU[] values()
com.kenai.jffi.Platform$CPU: com.kenai.jffi.Platform$CPU valueOf(java.lang.String)
com.kenai.jffi.Platform$CPU: Platform$CPU(java.lang.String,int,int)
com.kenai.jffi.Platform$CPU: java.lang.String toString()
com.kenai.jffi.Platform$CPU: void <clinit>()
com.kenai.jffi.Platform$Darwin
com.kenai.jffi.Platform$Darwin: Platform$Darwin()
com.kenai.jffi.Platform$Darwin: java.lang.String mapLibraryName(java.lang.String)
com.kenai.jffi.Platform$Darwin: java.lang.String getLibraryNamePattern()
com.kenai.jffi.Platform$Darwin: java.lang.String getName()
com.kenai.jffi.Platform$Darwin: int longSize()
com.kenai.jffi.Platform$Default
com.kenai.jffi.Platform$Default: Platform$Default(com.kenai.jffi.Platform$OS)
com.kenai.jffi.Platform$Default: int longSize()
com.kenai.jffi.Platform$OS
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS DARWIN
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS FREEBSD
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS NETBSD
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS OPENBSD
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS LINUX
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS SOLARIS
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS WINDOWS
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS AIX
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS ZLINUX
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS UNKNOWN
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS[] $VALUES
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS[] values()
com.kenai.jffi.Platform$OS: com.kenai.jffi.Platform$OS valueOf(java.lang.String)
com.kenai.jffi.Platform$OS: Platform$OS(java.lang.String,int)
com.kenai.jffi.Platform$OS: java.lang.String toString()
com.kenai.jffi.Platform$OS: void <clinit>()
com.kenai.jffi.Platform$SingletonHolder
com.kenai.jffi.Platform$SingletonHolder: com.kenai.jffi.Platform PLATFORM
com.kenai.jffi.Platform$SingletonHolder: Platform$SingletonHolder()
com.kenai.jffi.Platform$SingletonHolder: void <clinit>()
com.kenai.jffi.Platform$Windows
com.kenai.jffi.Platform$Windows: Platform$Windows()
com.kenai.jffi.Platform$Windows: java.lang.String getLibraryNamePattern()
com.kenai.jffi.Platform$Windows: int longSize()
com.kenai.jffi.Struct
com.kenai.jffi.Struct: java.util.Map structCache
com.kenai.jffi.Struct: java.lang.ref.ReferenceQueue structReferenceQueue
com.kenai.jffi.Struct: com.kenai.jffi.Type[] fields
com.kenai.jffi.Struct: com.kenai.jffi.Struct newStruct(com.kenai.jffi.Type[])
com.kenai.jffi.Struct: Struct(com.kenai.jffi.Foreign,com.kenai.jffi.Type[])
com.kenai.jffi.Struct: Struct(com.kenai.jffi.Type[])
com.kenai.jffi.Struct: boolean equals(java.lang.Object)
com.kenai.jffi.Struct: int hashCode()
com.kenai.jffi.Struct: void <clinit>()
com.kenai.jffi.Struct$1
com.kenai.jffi.Struct$StructReference
com.kenai.jffi.Struct$StructReference: java.util.List fieldsList
com.kenai.jffi.Struct$StructReference: Struct$StructReference(com.kenai.jffi.Struct,java.lang.ref.ReferenceQueue,java.util.List)
com.kenai.jffi.Struct$StructReference: Struct$StructReference(com.kenai.jffi.Struct,java.lang.ref.ReferenceQueue,java.util.List,com.kenai.jffi.Struct$1)
com.kenai.jffi.Type
com.kenai.jffi.Type: com.kenai.jffi.Type VOID
com.kenai.jffi.Type: com.kenai.jffi.Type FLOAT
com.kenai.jffi.Type: com.kenai.jffi.Type DOUBLE
com.kenai.jffi.Type: com.kenai.jffi.Type LONGDOUBLE
com.kenai.jffi.Type: com.kenai.jffi.Type UINT8
com.kenai.jffi.Type: com.kenai.jffi.Type SINT8
com.kenai.jffi.Type: com.kenai.jffi.Type UINT16
com.kenai.jffi.Type: com.kenai.jffi.Type SINT16
com.kenai.jffi.Type: com.kenai.jffi.Type UINT32
com.kenai.jffi.Type: com.kenai.jffi.Type SINT32
com.kenai.jffi.Type: com.kenai.jffi.Type UINT64
com.kenai.jffi.Type: com.kenai.jffi.Type SINT64
com.kenai.jffi.Type: com.kenai.jffi.Type POINTER
com.kenai.jffi.Type: com.kenai.jffi.Type UCHAR
com.kenai.jffi.Type: com.kenai.jffi.Type SCHAR
com.kenai.jffi.Type: com.kenai.jffi.Type USHORT
com.kenai.jffi.Type: com.kenai.jffi.Type SSHORT
com.kenai.jffi.Type: com.kenai.jffi.Type UINT
com.kenai.jffi.Type: com.kenai.jffi.Type SINT
com.kenai.jffi.Type: com.kenai.jffi.Type ULONG
com.kenai.jffi.Type: com.kenai.jffi.Type SLONG
com.kenai.jffi.Type: com.kenai.jffi.Type ULONG_LONG
com.kenai.jffi.Type: com.kenai.jffi.Type SLONG_LONG
com.kenai.jffi.Type: int type
com.kenai.jffi.Type: int size
com.kenai.jffi.Type: int alignment
com.kenai.jffi.Type: long handle
com.kenai.jffi.Type: Type()
com.kenai.jffi.Type: int type()
com.kenai.jffi.Type: long handle()
com.kenai.jffi.Type: int size()
com.kenai.jffi.Type: int alignment()
com.kenai.jffi.Type: int resolveType()
com.kenai.jffi.Type: int resolveSize()
com.kenai.jffi.Type: int resolveAlignment()
com.kenai.jffi.Type: long resolveHandle()
com.kenai.jffi.Type: com.kenai.jffi.Type$TypeInfo getTypeInfo()
com.kenai.jffi.Type: boolean equals(java.lang.Object)
com.kenai.jffi.Type: int hashCode()
com.kenai.jffi.Type: long[] nativeHandles(com.kenai.jffi.Type[])
com.kenai.jffi.Type: long[] nativeHandles(java.util.List)
com.kenai.jffi.Type: com.kenai.jffi.Type builtin(com.kenai.jffi.NativeType)
com.kenai.jffi.Type: void <clinit>()
com.kenai.jffi.Type$1
com.kenai.jffi.Type$Builtin
com.kenai.jffi.Type$Builtin: com.kenai.jffi.NativeType nativeType
com.kenai.jffi.Type$Builtin: com.kenai.jffi.Type$TypeInfo typeInfo
com.kenai.jffi.Type$Builtin: Type$Builtin(com.kenai.jffi.NativeType)
com.kenai.jffi.Type$Builtin: com.kenai.jffi.Type$TypeInfo getTypeInfo()
com.kenai.jffi.Type$Builtin: com.kenai.jffi.Type$TypeInfo lookupTypeInfo()
com.kenai.jffi.Type$Builtin: boolean equals(java.lang.Object)
com.kenai.jffi.Type$Builtin: int hashCode()
com.kenai.jffi.Type$Builtin: Type$Builtin(com.kenai.jffi.NativeType,com.kenai.jffi.Type$1)
com.kenai.jffi.Type$TypeInfo
com.kenai.jffi.Type$TypeInfo: int type
com.kenai.jffi.Type$TypeInfo: int size
com.kenai.jffi.Type$TypeInfo: int alignment
com.kenai.jffi.Type$TypeInfo: long handle
com.kenai.jffi.Type$TypeInfo: Type$TypeInfo(long,int,int,int)
com.kenai.jffi.Union
com.kenai.jffi.Union: com.kenai.jffi.Type[] fields
com.kenai.jffi.Union: com.kenai.jffi.Union newUnion(com.kenai.jffi.Type[])
com.kenai.jffi.Union: Union(com.kenai.jffi.Type[])
com.kenai.jffi.Union: boolean equals(java.lang.Object)
com.kenai.jffi.Union: int hashCode()
com.kenai.jffi.Util
com.kenai.jffi.Util: Util()
com.kenai.jffi.Util: int ffi_align(int,int)
com.kenai.jffi.Util: boolean startsWithIgnoreCase(java.lang.String,java.lang.String,java.util.Locale)
com.kenai.jffi.Util: boolean equalsIgnoreCase(java.lang.String,java.lang.String,java.util.Locale)
com.kenai.jffi.Version
com.kenai.jffi.Version: int MAJOR
com.kenai.jffi.Version: int MINOR
com.kenai.jffi.Version: int MICRO
com.kenai.jffi.Version: Version()
com.kenai.jffi.internal.StubLoader
com.kenai.jffi.internal.StubLoader: int VERSION_MAJOR
com.kenai.jffi.internal.StubLoader: int VERSION_MINOR
com.kenai.jffi.internal.StubLoader: java.lang.String versionClassName
com.kenai.jffi.internal.StubLoader: java.util.Locale LOCALE
com.kenai.jffi.internal.StubLoader: java.lang.String bootPropertyFilename
com.kenai.jffi.internal.StubLoader: java.lang.String bootLibraryPropertyName
com.kenai.jffi.internal.StubLoader: java.lang.String stubLibraryName
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$OS os
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$CPU cpu
com.kenai.jffi.internal.StubLoader: java.lang.Throwable failureCause
com.kenai.jffi.internal.StubLoader: boolean loaded
com.kenai.jffi.internal.StubLoader: boolean isLoaded()
com.kenai.jffi.internal.StubLoader: java.lang.Throwable getFailureCause()
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$OS determineOS()
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$CPU determineCPU()
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$CPU getCPU()
com.kenai.jffi.internal.StubLoader: com.kenai.jffi.internal.StubLoader$OS getOS()
com.kenai.jffi.internal.StubLoader: java.lang.String getStubLibraryName()
com.kenai.jffi.internal.StubLoader: java.lang.String getPlatformName()
com.kenai.jffi.internal.StubLoader: java.lang.String getStubLibraryPath()
com.kenai.jffi.internal.StubLoader: StubLoader()
com.kenai.jffi.internal.StubLoader: void load()
com.kenai.jffi.internal.StubLoader: java.lang.String getBootPath()
com.kenai.jffi.internal.StubLoader: java.lang.String getAlternateLibraryPath(java.lang.String)
com.kenai.jffi.internal.StubLoader: boolean loadFromBootPath(java.lang.String,java.lang.String,java.util.Collection)
com.kenai.jffi.internal.StubLoader: java.lang.String dlExtension()
com.kenai.jffi.internal.StubLoader: void loadFromJar()
com.kenai.jffi.internal.StubLoader: java.io.InputStream getStubLibraryStream()
com.kenai.jffi.internal.StubLoader: java.io.InputStream getResourceAsStream(java.lang.String)
com.kenai.jffi.internal.StubLoader: int getVersionField(java.lang.String)
com.kenai.jffi.internal.StubLoader: java.util.Locale access$000()
com.kenai.jffi.internal.StubLoader: void <clinit>()
com.kenai.jffi.internal.StubLoader$1
com.kenai.jffi.internal.StubLoader$1: int[] $SwitchMap$com$kenai$jffi$internal$StubLoader$OS
com.kenai.jffi.internal.StubLoader$1: void <clinit>()
com.kenai.jffi.internal.StubLoader$CPU
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU I386
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU X86_64
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU PPC
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU PPC64
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU PPC64LE
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU SPARC
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU SPARCV9
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU S390X
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU ARM
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU UNKNOWN
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU[] $VALUES
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU[] values()
com.kenai.jffi.internal.StubLoader$CPU: com.kenai.jffi.internal.StubLoader$CPU valueOf(java.lang.String)
com.kenai.jffi.internal.StubLoader$CPU: StubLoader$CPU(java.lang.String,int)
com.kenai.jffi.internal.StubLoader$CPU: java.lang.String toString()
com.kenai.jffi.internal.StubLoader$CPU: void <clinit>()
com.kenai.jffi.internal.StubLoader$OS
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS DARWIN
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS FREEBSD
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS NETBSD
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS OPENBSD
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS LINUX
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS SOLARIS
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS WINDOWS
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS AIX
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS ZLINUX
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS UNKNOWN
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS[] $VALUES
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS[] values()
com.kenai.jffi.internal.StubLoader$OS: com.kenai.jffi.internal.StubLoader$OS valueOf(java.lang.String)
com.kenai.jffi.internal.StubLoader$OS: StubLoader$OS(java.lang.String,int)
com.kenai.jffi.internal.StubLoader$OS: java.lang.String toString()
com.kenai.jffi.internal.StubLoader$OS: void <clinit>()
com.kenai.jnr.x86asm.CONDITION: com.kenai.jnr.x86asm.CONDITION[] values()
com.kenai.jnr.x86asm.CONDITION: com.kenai.jnr.x86asm.CONDITION valueOf(java.lang.String)
com.kenai.jnr.x86asm.CPU: com.kenai.jnr.x86asm.CPU[] values()
com.kenai.jnr.x86asm.CPU: com.kenai.jnr.x86asm.CPU valueOf(java.lang.String)
com.kenai.jnr.x86asm.CpuInfo$Vendor: com.kenai.jnr.x86asm.CpuInfo$Vendor[] values()
com.kenai.jnr.x86asm.CpuInfo$Vendor: com.kenai.jnr.x86asm.CpuInfo$Vendor valueOf(java.lang.String)
com.kenai.jnr.x86asm.ERROR_CODE: com.kenai.jnr.x86asm.ERROR_CODE[] values()
com.kenai.jnr.x86asm.ERROR_CODE: com.kenai.jnr.x86asm.ERROR_CODE valueOf(java.lang.String)
com.kenai.jnr.x86asm.HINT: com.kenai.jnr.x86asm.HINT[] values()
com.kenai.jnr.x86asm.HINT: com.kenai.jnr.x86asm.HINT valueOf(java.lang.String)
com.kenai.jnr.x86asm.INST_CODE: com.kenai.jnr.x86asm.INST_CODE[] values()
com.kenai.jnr.x86asm.INST_CODE: com.kenai.jnr.x86asm.INST_CODE valueOf(java.lang.String)
com.kenai.jnr.x86asm.InstructionGroup: com.kenai.jnr.x86asm.InstructionGroup[] values()
com.kenai.jnr.x86asm.InstructionGroup: com.kenai.jnr.x86asm.InstructionGroup valueOf(java.lang.String)
com.kenai.jnr.x86asm.LABEL_STATE: com.kenai.jnr.x86asm.LABEL_STATE[] values()
com.kenai.jnr.x86asm.LABEL_STATE: com.kenai.jnr.x86asm.LABEL_STATE valueOf(java.lang.String)
com.kenai.jnr.x86asm.RELOC_MODE: com.kenai.jnr.x86asm.RELOC_MODE[] values()
com.kenai.jnr.x86asm.RELOC_MODE: com.kenai.jnr.x86asm.RELOC_MODE valueOf(java.lang.String)
com.kenai.jnr.x86asm.RelocData$Type: com.kenai.jnr.x86asm.RelocData$Type[] values()
com.kenai.jnr.x86asm.RelocData$Type: com.kenai.jnr.x86asm.RelocData$Type valueOf(java.lang.String)
com.kenai.jnr.x86asm.SEGMENT: com.kenai.jnr.x86asm.SEGMENT[] values()
com.kenai.jnr.x86asm.SEGMENT: com.kenai.jnr.x86asm.SEGMENT valueOf(java.lang.String)
com.ociweb.FogLight
com.ociweb.FogLight: void main(java.lang.String[])
com.ociweb.device.testApp.PiCamTest
com.ociweb.device.testApp.PiCamTest: void main(java.lang.String[])
com.ociweb.gl.api.MQTTConnectionStatus: com.ociweb.gl.api.MQTTConnectionStatus[] values()
com.ociweb.gl.api.MQTTConnectionStatus: com.ociweb.gl.api.MQTTConnectionStatus valueOf(java.lang.String)
com.ociweb.gl.api.MQTTQoS: com.ociweb.gl.api.MQTTQoS[] values()
com.ociweb.gl.api.MQTTQoS: com.ociweb.gl.api.MQTTQoS valueOf(java.lang.String)
com.ociweb.gl.api.TimeTrigger: com.ociweb.gl.api.TimeTrigger[] values()
com.ociweb.gl.api.TimeTrigger: com.ociweb.gl.api.TimeTrigger valueOf(java.lang.String)
com.ociweb.gl.api.WaitFor: com.ociweb.gl.api.WaitFor[] values()
com.ociweb.gl.api.WaitFor: com.ociweb.gl.api.WaitFor valueOf(java.lang.String)
com.ociweb.gl.impl.stage.MessagePubSubStage$PubType: com.ociweb.gl.impl.stage.MessagePubSubStage$PubType[] values()
com.ociweb.gl.impl.stage.MessagePubSubStage$PubType: com.ociweb.gl.impl.stage.MessagePubSubStage$PubType valueOf(java.lang.String)
com.ociweb.iot.astropi.AstroPiTwig: com.ociweb.iot.astropi.AstroPiTwig[] values()
com.ociweb.iot.astropi.AstroPiTwig: com.ociweb.iot.astropi.AstroPiTwig valueOf(java.lang.String)
com.ociweb.iot.astropi.AstroPiTwig$AstroPi: com.ociweb.iot.astropi.AstroPiTwig$AstroPi[] values()
com.ociweb.iot.astropi.AstroPiTwig$AstroPi: com.ociweb.iot.astropi.AstroPiTwig$AstroPi valueOf(java.lang.String)
com.ociweb.iot.grove.adc.ADCTwig: com.ociweb.iot.grove.adc.ADCTwig[] values()
com.ociweb.iot.grove.adc.ADCTwig: com.ociweb.iot.grove.adc.ADCTwig valueOf(java.lang.String)
com.ociweb.iot.grove.adc.ADCTwig$ADC: com.ociweb.iot.grove.adc.ADCTwig$ADC[] values()
com.ociweb.iot.grove.adc.ADCTwig$ADC: com.ociweb.iot.grove.adc.ADCTwig$ADC valueOf(java.lang.String)
com.ociweb.iot.grove.gps.GPSTwig: com.ociweb.iot.grove.gps.GPSTwig[] values()
com.ociweb.iot.grove.gps.GPSTwig: com.ociweb.iot.grove.gps.GPSTwig valueOf(java.lang.String)
com.ociweb.iot.grove.i2c.I2CTwig: com.ociweb.iot.grove.i2c.I2CTwig[] values()
com.ociweb.iot.grove.i2c.I2CTwig: com.ociweb.iot.grove.i2c.I2CTwig valueOf(java.lang.String)
com.ociweb.iot.grove.lcd_rgb.LCD_RGB_Twig: com.ociweb.iot.grove.lcd_rgb.LCD_RGB_Twig[] values()
com.ociweb.iot.grove.lcd_rgb.LCD_RGB_Twig: com.ociweb.iot.grove.lcd_rgb.LCD_RGB_Twig valueOf(java.lang.String)
com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig: com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig[] values()
com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig: com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig valueOf(java.lang.String)
com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig$MiniMotorDriver: com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig$MiniMotorDriver[] values()
com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig$MiniMotorDriver: com.ociweb.iot.grove.mini_motor_driver.MiniMotorDriverTwig$MiniMotorDriver valueOf(java.lang.String)
com.ociweb.iot.grove.motor_driver.MotorDriverTwig: com.ociweb.iot.grove.motor_driver.MotorDriverTwig[] values()
com.ociweb.iot.grove.motor_driver.MotorDriverTwig: com.ociweb.iot.grove.motor_driver.MotorDriverTwig valueOf(java.lang.String)
com.ociweb.iot.grove.mp3_v2.MP3_V2Twig: com.ociweb.iot.grove.mp3_v2.MP3_V2Twig[] values()
com.ociweb.iot.grove.mp3_v2.MP3_V2Twig: com.ociweb.iot.grove.mp3_v2.MP3_V2Twig valueOf(java.lang.String)
com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$AudioStorageDevice: com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$AudioStorageDevice[] values()
com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$AudioStorageDevice: com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$AudioStorageDevice valueOf(java.lang.String)
com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$EQ: com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$EQ[] values()
com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$EQ: com.ociweb.iot.grove.mp3_v2.MP3_V2_Consts$EQ valueOf(java.lang.String)
com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Direction: com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Direction[] values()
com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Direction: com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Direction valueOf(java.lang.String)
com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Orientation: com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Orientation[] values()
com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Orientation: com.ociweb.iot.grove.oled.Grove_OLED_128x64_Constants$Orientation valueOf(java.lang.String)
com.ociweb.iot.grove.oled.OLEDTwig: com.ociweb.iot.grove.oled.OLEDTwig[] values()
com.ociweb.iot.grove.oled.OLEDTwig: com.ociweb.iot.grove.oled.OLEDTwig valueOf(java.lang.String)
com.ociweb.iot.grove.oled.OLED_96x96_DriverChip: com.ociweb.iot.grove.oled.OLED_96x96_DriverChip[] values()
com.ociweb.iot.grove.oled.OLED_96x96_DriverChip: com.ociweb.iot.grove.oled.OLED_96x96_DriverChip valueOf(java.lang.String)
com.ociweb.iot.grove.oled.ScrollSpeed: com.ociweb.iot.grove.oled.ScrollSpeed[] values()
com.ociweb.iot.grove.oled.ScrollSpeed: com.ociweb.iot.grove.oled.ScrollSpeed valueOf(java.lang.String)
com.ociweb.iot.grove.oled.oled2.OLEDMode: com.ociweb.iot.grove.oled.oled2.OLEDMode[] values()
com.ociweb.iot.grove.oled.oled2.OLEDMode: com.ociweb.iot.grove.oled.oled2.OLEDMode valueOf(java.lang.String)
com.ociweb.iot.grove.oled.oled2.OLEDOrientation: com.ociweb.iot.grove.oled.oled2.OLEDOrientation[] values()
com.ociweb.iot.grove.oled.oled2.OLEDOrientation: com.ociweb.iot.grove.oled.oled2.OLEDOrientation valueOf(java.lang.String)
com.ociweb.iot.grove.oled.oled2.OLEDScreenPresentation: com.ociweb.iot.grove.oled.oled2.OLEDScreenPresentation[] values()
com.ociweb.iot.grove.oled.oled2.OLEDScreenPresentation: com.ociweb.iot.grove.oled.oled2.OLEDScreenPresentation valueOf(java.lang.String)
com.ociweb.iot.grove.oled.oled2.OLEDScrollDirection: com.ociweb.iot.grove.oled.oled2.OLEDScrollDirection[] values()
com.ociweb.iot.grove.oled.oled2.OLEDScrollDirection: com.ociweb.iot.grove.oled.oled2.OLEDScrollDirection valueOf(java.lang.String)
com.ociweb.iot.grove.oled.oled2.OLEDScrollSpeed: com.ociweb.iot.grove.oled.oled2.OLEDScrollSpeed[] values()
com.ociweb.iot.grove.oled.oled2.OLEDScrollSpeed: com.ociweb.iot.grove.oled.oled2.OLEDScrollSpeed valueOf(java.lang.String)
com.ociweb.iot.grove.real_time_clock.RTCTwig: com.ociweb.iot.grove.real_time_clock.RTCTwig[] values()
com.ociweb.iot.grove.real_time_clock.RTCTwig: com.ociweb.iot.grove.real_time_clock.RTCTwig valueOf(java.lang.String)
com.ociweb.iot.grove.real_time_clock.RTCTwig$RTC: com.ociweb.iot.grove.real_time_clock.RTCTwig$RTC[] values()
com.ociweb.iot.grove.real_time_clock.RTCTwig$RTC: com.ociweb.iot.grove.real_time_clock.RTCTwig$RTC valueOf(java.lang.String)
com.ociweb.iot.grove.simple_analog.SimpleAnalogTwig: com.ociweb.iot.grove.simple_analog.SimpleAnalogTwig[] values()
com.ociweb.iot.grove.simple_analog.SimpleAnalogTwig: com.ociweb.iot.grove.simple_analog.SimpleAnalogTwig valueOf(java.lang.String)
com.ociweb.iot.grove.simple_digital.SimpleDigitalTwig: com.ociweb.iot.grove.simple_digital.SimpleDigitalTwig[] values()
com.ociweb.iot.grove.simple_digital.SimpleDigitalTwig: com.ociweb.iot.grove.simple_digital.SimpleDigitalTwig valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelDataRate: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelDataRate[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelDataRate: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelDataRate valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelScale: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelScale[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelScale: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerAccelScale valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagDataRate: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagDataRate[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagDataRate: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagDataRate valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagRes: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagRes[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagRes: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagRes valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagScale: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagScale[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagScale: com.ociweb.iot.grove.six_axis_accelerometer.AccelerometerMagScale valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.AccerometerValues$Changed: com.ociweb.iot.grove.six_axis_accelerometer.AccerometerValues$Changed[] values()
com.ociweb.iot.grove.six_axis_accelerometer.AccerometerValues$Changed: com.ociweb.iot.grove.six_axis_accelerometer.AccerometerValues$Changed valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig: com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig[] values()
com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig: com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig valueOf(java.lang.String)
com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig$SixAxisAccelerometer: com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig$SixAxisAccelerometer[] values()
com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig$SixAxisAccelerometer: com.ociweb.iot.grove.six_axis_accelerometer.SixAxisAccelerometerTwig$SixAxisAccelerometer valueOf(java.lang.String)
com.ociweb.iot.grove.temp_and_humid.TempAndHumidTwig$MODULE_TYPE: com.ociweb.iot.grove.temp_and_humid.TempAndHumidTwig$MODULE_TYPE[] values()
com.ociweb.iot.grove.temp_and_humid.TempAndHumidTwig$MODULE_TYPE: com.ociweb.iot.grove.temp_and_humid.TempAndHumidTwig$MODULE_TYPE valueOf(java.lang.String)
com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig: com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig[] values()
com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig: com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig valueOf(java.lang.String)
com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig$ThreeAxisAccelerometer_16g: com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig$ThreeAxisAccelerometer_16g[] values()
com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig$ThreeAxisAccelerometer_16g: com.ociweb.iot.grove.three_axis_accelerometer_16g.ThreeAxisAccelerometer_16gTwig$ThreeAxisAccelerometer_16g valueOf(java.lang.String)
com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTransducer$Z: com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTransducer$Z[] values()
com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTransducer$Z: com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTransducer$Z valueOf(java.lang.String)
com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTwig: com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTwig[] values()
com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTwig: com.ociweb.iot.grove.thumb_joystick.ThumbJoystickTwig valueOf(java.lang.String)
com.ociweb.iot.hardware.HardwarePlatformType: com.ociweb.iot.hardware.HardwarePlatformType[] values()
com.ociweb.iot.hardware.HardwarePlatformType: com.ociweb.iot.hardware.HardwarePlatformType valueOf(java.lang.String)
com.ociweb.iot.hardware.impl.grovepi.BeagleBoneModel: com.ociweb.iot.hardware.impl.grovepi.BeagleBoneModel[] values()
com.ociweb.iot.hardware.impl.grovepi.BeagleBoneModel: com.ociweb.iot.hardware.impl.grovepi.BeagleBoneModel valueOf(java.lang.String)
com.ociweb.iot.hardware.impl.grovepi.LinuxDesktopModel: com.ociweb.iot.hardware.impl.grovepi.LinuxDesktopModel[] values()
com.ociweb.iot.hardware.impl.grovepi.LinuxDesktopModel: com.ociweb.iot.hardware.impl.grovepi.LinuxDesktopModel valueOf(java.lang.String)
com.ociweb.iot.hardware.impl.grovepi.MacModel: com.ociweb.iot.hardware.impl.grovepi.MacModel[] values()
com.ociweb.iot.hardware.impl.grovepi.MacModel: com.ociweb.iot.hardware.impl.grovepi.MacModel valueOf(java.lang.String)
com.ociweb.iot.hardware.impl.grovepi.PiModel: com.ociweb.iot.hardware.impl.grovepi.PiModel[] values()
com.ociweb.iot.hardware.impl.grovepi.PiModel: com.ociweb.iot.hardware.impl.grovepi.PiModel valueOf(java.lang.String)
com.ociweb.iot.hardware.impl.grovepi.WindowsDesktopModel: com.ociweb.iot.hardware.impl.grovepi.WindowsDesktopModel[] values()
com.ociweb.iot.hardware.impl.grovepi.WindowsDesktopModel: com.ociweb.iot.hardware.impl.grovepi.WindowsDesktopModel valueOf(java.lang.String)
com.ociweb.iot.lightblink.IoTApp
com.ociweb.iot.lightblink.IoTApp: void main(java.lang.String[])
com.ociweb.iot.maker.Baud: com.ociweb.iot.maker.Baud[] values()
com.ociweb.iot.maker.Baud: com.ociweb.iot.maker.Baud valueOf(java.lang.String)
com.ociweb.iot.maker.Port: com.ociweb.iot.maker.Port[] values()
com.ociweb.iot.maker.Port: com.ociweb.iot.maker.Port valueOf(java.lang.String)
com.ociweb.iot.maker.TriState: com.ociweb.iot.maker.TriState[] values()
com.ociweb.iot.maker.TriState: com.ociweb.iot.maker.TriState valueOf(java.lang.String)
com.ociweb.iot.maker.image.FogColorSpace: com.ociweb.iot.maker.image.FogColorSpace[] values()
com.ociweb.iot.maker.image.FogColorSpace: com.ociweb.iot.maker.image.FogColorSpace valueOf(java.lang.String)
com.ociweb.iot.maker.image.FogExifOrientation: com.ociweb.iot.maker.image.FogExifOrientation[] values()
com.ociweb.iot.maker.image.FogExifOrientation: com.ociweb.iot.maker.image.FogExifOrientation valueOf(java.lang.String)
com.ociweb.iot.maker.image.FogFixedRotation: com.ociweb.iot.maker.image.FogFixedRotation[] values()
com.ociweb.iot.maker.image.FogFixedRotation: com.ociweb.iot.maker.image.FogFixedRotation valueOf(java.lang.String)
com.ociweb.pronghorn.code.Code$State: com.ociweb.pronghorn.code.Code$State[] values()
com.ociweb.pronghorn.code.Code$State: com.ociweb.pronghorn.code.Code$State valueOf(java.lang.String)
com.ociweb.pronghorn.network.config.HTTPContentTypeDefaults: com.ociweb.pronghorn.network.config.HTTPContentTypeDefaults[] values()
com.ociweb.pronghorn.network.config.HTTPContentTypeDefaults: com.ociweb.pronghorn.network.config.HTTPContentTypeDefaults valueOf(java.lang.String)
com.ociweb.pronghorn.network.config.HTTPHeaderDefaults: com.ociweb.pronghorn.network.config.HTTPHeaderDefaults[] values()
com.ociweb.pronghorn.network.config.HTTPHeaderDefaults: com.ociweb.pronghorn.network.config.HTTPHeaderDefaults valueOf(java.lang.String)
com.ociweb.pronghorn.network.config.HTTPRevisionDefaults: com.ociweb.pronghorn.network.config.HTTPRevisionDefaults[] values()
com.ociweb.pronghorn.network.config.HTTPRevisionDefaults: com.ociweb.pronghorn.network.config.HTTPRevisionDefaults valueOf(java.lang.String)
com.ociweb.pronghorn.network.config.HTTPVerbDefaults: com.ociweb.pronghorn.network.config.HTTPVerbDefaults[] values()
com.ociweb.pronghorn.network.config.HTTPVerbDefaults: com.ociweb.pronghorn.network.config.HTTPVerbDefaults valueOf(java.lang.String)
com.ociweb.pronghorn.network.twitter.TwitterKey: com.ociweb.pronghorn.network.twitter.TwitterKey[] values()
com.ociweb.pronghorn.network.twitter.TwitterKey: com.ociweb.pronghorn.network.twitter.TwitterKey valueOf(java.lang.String)
com.ociweb.pronghorn.stage.math.BuildMatrixCompute$MatrixTypes: com.ociweb.pronghorn.stage.math.BuildMatrixCompute$MatrixTypes[] values()
com.ociweb.pronghorn.stage.math.BuildMatrixCompute$MatrixTypes: com.ociweb.pronghorn.stage.math.BuildMatrixCompute$MatrixTypes valueOf(java.lang.String)
com.ociweb.pronghorn.util.Blocker$BlockStatus: com.ociweb.pronghorn.util.Blocker$BlockStatus[] values()
com.ociweb.pronghorn.util.Blocker$BlockStatus: com.ociweb.pronghorn.util.Blocker$BlockStatus valueOf(java.lang.String)
jnr.ffi.Address
jnr.ffi.Address: jnr.ffi.Address NULL
jnr.ffi.Address: long address
jnr.ffi.Address: Address(long)
jnr.ffi.Address: Address(jnr.ffi.Address)
jnr.ffi.Address: long address()
jnr.ffi.Address: int intValue()
jnr.ffi.Address: long longValue()
jnr.ffi.Address: float floatValue()
jnr.ffi.Address: double doubleValue()
jnr.ffi.Address: long nativeAddress()
jnr.ffi.Address: int hashCode()
jnr.ffi.Address: boolean equals(java.lang.Object)
jnr.ffi.Address: java.lang.String toString()
jnr.ffi.Address: java.lang.String toHexString()
jnr.ffi.Address: int compareTo(jnr.ffi.Address)
jnr.ffi.Address: boolean isNull()
jnr.ffi.Address: jnr.ffi.Address valueOf(long)
jnr.ffi.Address: jnr.ffi.Address valueOf(int)
jnr.ffi.Address: int compareTo(java.lang.Object)
jnr.ffi.Address: void <clinit>()
jnr.ffi.CallingConvention
jnr.ffi.CallingConvention: jnr.ffi.CallingConvention DEFAULT
jnr.ffi.CallingConvention: jnr.ffi.CallingConvention STDCALL
jnr.ffi.CallingConvention: jnr.ffi.CallingConvention[] $VALUES
jnr.ffi.CallingConvention: jnr.ffi.CallingConvention[] values()
jnr.ffi.CallingConvention: jnr.ffi.CallingConvention valueOf(java.lang.String)
jnr.ffi.CallingConvention: CallingConvention(java.lang.String,int)
jnr.ffi.CallingConvention: void <clinit>()
jnr.ffi.LastError
jnr.ffi.LastError: LastError()
jnr.ffi.LastError: int getLastError(jnr.ffi.Runtime)
jnr.ffi.LastError: void setLastError(jnr.ffi.Runtime,int)
jnr.ffi.Library
jnr.ffi.Library: java.util.Map customSearchPaths
jnr.ffi.Library: java.lang.String name
jnr.ffi.Library: Library(java.lang.String)
jnr.ffi.Library: jnr.ffi.Runtime getRuntime(java.lang.Object)
jnr.ffi.Library: java.lang.Object loadLibrary(java.lang.String,java.lang.Class)
jnr.ffi.Library: java.lang.Object loadLibrary(java.lang.Class,java.lang.String[])
jnr.ffi.Library: java.lang.Object loadLibrary(java.lang.String,java.lang.Class,java.util.Map)
jnr.ffi.Library: java.lang.Object loadLibrary(java.lang.Class,java.util.Map,java.lang.String[])
jnr.ffi.Library: void addLibraryPath(java.lang.String,java.io.File)
jnr.ffi.Library: java.util.List getLibraryPath(java.lang.String)
jnr.ffi.Library: jnr.ffi.Library getInstance(java.lang.String)
jnr.ffi.Library: java.lang.String getName()
jnr.ffi.Library: void <clinit>()
jnr.ffi.LibraryLoader
jnr.ffi.LibraryLoader: java.util.List searchPaths
jnr.ffi.LibraryLoader: java.util.List libraryNames
jnr.ffi.LibraryLoader: java.util.List typeMappers
jnr.ffi.LibraryLoader: java.util.List functionMappers
jnr.ffi.LibraryLoader: java.util.Map optionMap
jnr.ffi.LibraryLoader: jnr.ffi.mapper.TypeMapper$Builder typeMapperBuilder
jnr.ffi.LibraryLoader: jnr.ffi.mapper.FunctionMapper$Builder functionMapperBuilder
jnr.ffi.LibraryLoader: java.lang.Class interfaceClass
jnr.ffi.LibraryLoader: boolean failImmediately
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader create(java.lang.Class)
jnr.ffi.LibraryLoader: LibraryLoader(java.lang.Class)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader library(java.lang.String)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader search(java.lang.String)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader option(jnr.ffi.LibraryOption,java.lang.Object)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader mapper(jnr.ffi.mapper.TypeMapper)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader mapper(jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader map(java.lang.Class,jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader map(java.lang.Class,jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader map(java.lang.Class,jnr.ffi.mapper.DataConverter)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader mapper(jnr.ffi.mapper.FunctionMapper)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader map(java.lang.String,java.lang.String)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader convention(jnr.ffi.CallingConvention)
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader stdcall()
jnr.ffi.LibraryLoader: jnr.ffi.LibraryLoader failImmediately()
jnr.ffi.LibraryLoader: java.lang.Object load(java.lang.String)
jnr.ffi.LibraryLoader: java.lang.Object load()
jnr.ffi.LibraryLoader: java.lang.Object createErrorProxy(java.lang.Throwable)
jnr.ffi.LibraryLoader: java.util.Collection getSearchPaths()
jnr.ffi.LibraryLoader: java.lang.Object loadLibrary(java.lang.Class,java.util.Collection,java.util.Collection,java.util.Map)
jnr.ffi.LibraryLoader: java.util.List getPropertyPaths(java.lang.String)
jnr.ffi.LibraryLoader: java.util.List access$100(java.lang.String)
jnr.ffi.LibraryLoader$1
jnr.ffi.LibraryLoader$1: java.lang.Throwable val$ex
jnr.ffi.LibraryLoader$1: jnr.ffi.LibraryLoader this$0
jnr.ffi.LibraryLoader$1: LibraryLoader$1(jnr.ffi.LibraryLoader,java.lang.Throwable)
jnr.ffi.LibraryLoader$1: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
jnr.ffi.LibraryLoader$2
jnr.ffi.LibraryLoader$2: int[] $SwitchMap$jnr$ffi$LibraryOption
jnr.ffi.LibraryLoader$2: int[] $SwitchMap$jnr$ffi$Platform$OS
jnr.ffi.LibraryLoader$2: void <clinit>()
jnr.ffi.LibraryLoader$StaticDataHolder
jnr.ffi.LibraryLoader$StaticDataHolder: java.util.List USER_LIBRARY_PATH
jnr.ffi.LibraryLoader$StaticDataHolder: LibraryLoader$StaticDataHolder()
jnr.ffi.LibraryLoader$StaticDataHolder: void addPaths(java.util.List,java.io.File)
jnr.ffi.LibraryLoader$StaticDataHolder: java.util.List access$000()
jnr.ffi.LibraryLoader$StaticDataHolder: void <clinit>()
jnr.ffi.LibraryOption
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption SaveError
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption IgnoreError
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption TypeMapper
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption FunctionMapper
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption CallingConvention
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption LoadNow
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption[] $VALUES
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption[] values()
jnr.ffi.LibraryOption: jnr.ffi.LibraryOption valueOf(java.lang.String)
jnr.ffi.LibraryOption: LibraryOption(java.lang.String,int)
jnr.ffi.LibraryOption: void <clinit>()
jnr.ffi.Memory
jnr.ffi.Memory: Memory()
jnr.ffi.Memory: jnr.ffi.Pointer allocate(jnr.ffi.Runtime,int)
jnr.ffi.Memory: jnr.ffi.Pointer allocate(jnr.ffi.Runtime,jnr.ffi.NativeType)
jnr.ffi.Memory: jnr.ffi.Pointer allocate(jnr.ffi.Runtime,jnr.ffi.Type)
jnr.ffi.Memory: jnr.ffi.Pointer allocate(jnr.ffi.Runtime,jnr.ffi.TypeAlias)
jnr.ffi.Memory: jnr.ffi.Pointer allocateDirect(jnr.ffi.Runtime,int)
jnr.ffi.Memory: jnr.ffi.Pointer allocateDirect(jnr.ffi.Runtime,jnr.ffi.NativeType)
jnr.ffi.Memory: jnr.ffi.Pointer allocateDirect(jnr.ffi.Runtime,jnr.ffi.TypeAlias)
jnr.ffi.Memory: jnr.ffi.Pointer allocateDirect(jnr.ffi.Runtime,int,boolean)
jnr.ffi.Memory: jnr.ffi.Pointer allocateTemporary(jnr.ffi.Runtime,jnr.ffi.NativeType)
jnr.ffi.Memory: jnr.ffi.Pointer allocateTemporary(jnr.ffi.Runtime,jnr.ffi.TypeAlias)
jnr.ffi.Memory: jnr.ffi.Pointer allocateTemporary(jnr.ffi.Runtime,jnr.ffi.NativeType,boolean)
jnr.ffi.NativeLong
jnr.ffi.NativeLong: jnr.ffi.NativeLong ZERO
jnr.ffi.NativeLong: jnr.ffi.NativeLong ONE
jnr.ffi.NativeLong: jnr.ffi.NativeLong MINUS_ONE
jnr.ffi.NativeLong: long value
jnr.ffi.NativeLong: NativeLong(long)
jnr.ffi.NativeLong: NativeLong(int)
jnr.ffi.NativeLong: int intValue()
jnr.ffi.NativeLong: long longValue()
jnr.ffi.NativeLong: float floatValue()
jnr.ffi.NativeLong: double doubleValue()
jnr.ffi.NativeLong: int hashCode()
jnr.ffi.NativeLong: boolean equals(java.lang.Object)
jnr.ffi.NativeLong: java.lang.String toString()
jnr.ffi.NativeLong: int compareTo(jnr.ffi.NativeLong)
jnr.ffi.NativeLong: jnr.ffi.NativeLong _valueOf(long)
jnr.ffi.NativeLong: jnr.ffi.NativeLong _valueOf(int)
jnr.ffi.NativeLong: jnr.ffi.NativeLong valueOf(long)
jnr.ffi.NativeLong: jnr.ffi.NativeLong valueOf(int)
jnr.ffi.NativeLong: int compareTo(java.lang.Object)
jnr.ffi.NativeLong: jnr.ffi.NativeLong access$000()
jnr.ffi.NativeLong: jnr.ffi.NativeLong access$100()
jnr.ffi.NativeLong: jnr.ffi.NativeLong access$200()
jnr.ffi.NativeLong: void <clinit>()
jnr.ffi.NativeLong$Cache
jnr.ffi.NativeLong$Cache: jnr.ffi.NativeLong[] cache
jnr.ffi.NativeLong$Cache: NativeLong$Cache()
jnr.ffi.NativeLong$Cache: void <clinit>()
jnr.ffi.NativeType
jnr.ffi.NativeType: jnr.ffi.NativeType VOID
jnr.ffi.NativeType: jnr.ffi.NativeType SCHAR
jnr.ffi.NativeType: jnr.ffi.NativeType UCHAR
jnr.ffi.NativeType: jnr.ffi.NativeType SSHORT
jnr.ffi.NativeType: jnr.ffi.NativeType USHORT
jnr.ffi.NativeType: jnr.ffi.NativeType SINT
jnr.ffi.NativeType: jnr.ffi.NativeType UINT
jnr.ffi.NativeType: jnr.ffi.NativeType SLONG
jnr.ffi.NativeType: jnr.ffi.NativeType ULONG
jnr.ffi.NativeType: jnr.ffi.NativeType SLONGLONG
jnr.ffi.NativeType: jnr.ffi.NativeType ULONGLONG
jnr.ffi.NativeType: jnr.ffi.NativeType FLOAT
jnr.ffi.NativeType: jnr.ffi.NativeType DOUBLE
jnr.ffi.NativeType: jnr.ffi.NativeType STRUCT
jnr.ffi.NativeType: jnr.ffi.NativeType ADDRESS
jnr.ffi.NativeType: jnr.ffi.NativeType[] $VALUES
jnr.ffi.NativeType: jnr.ffi.NativeType[] values()
jnr.ffi.NativeType: jnr.ffi.NativeType valueOf(java.lang.String)
jnr.ffi.NativeType: NativeType(java.lang.String,int)
jnr.ffi.NativeType: void <clinit>()
jnr.ffi.ObjectReferenceManager
jnr.ffi.ObjectReferenceManager: ObjectReferenceManager()
jnr.ffi.ObjectReferenceManager: jnr.ffi.ObjectReferenceManager newInstance(jnr.ffi.Runtime)
jnr.ffi.ObjectReferenceManager: jnr.ffi.Pointer newReference(java.lang.Object)
jnr.ffi.ObjectReferenceManager: void freeReference(jnr.ffi.Pointer)
jnr.ffi.ObjectReferenceManager: java.lang.Object getObject(jnr.ffi.Pointer)
jnr.ffi.ObjectReferenceManager: jnr.ffi.Pointer add(java.lang.Object)
jnr.ffi.ObjectReferenceManager: boolean remove(jnr.ffi.Pointer)
jnr.ffi.ObjectReferenceManager: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.Platform
jnr.ffi.Platform: java.util.Locale LOCALE
jnr.ffi.Platform: jnr.ffi.Platform$OS os
jnr.ffi.Platform: jnr.ffi.Platform$CPU cpu
jnr.ffi.Platform: int addressSize
jnr.ffi.Platform: int longSize
jnr.ffi.Platform: java.util.regex.Pattern libPattern
jnr.ffi.Platform: jnr.ffi.Platform$OS determineOS()
jnr.ffi.Platform: jnr.ffi.Platform determinePlatform(jnr.ffi.Platform$OS)
jnr.ffi.Platform: jnr.ffi.Platform determinePlatform()
jnr.ffi.Platform: jnr.ffi.Platform$CPU determineCPU()
jnr.ffi.Platform: Platform(jnr.ffi.Platform$OS,jnr.ffi.Platform$CPU,int,int,java.lang.String)
jnr.ffi.Platform: Platform(jnr.ffi.Platform$OS)
jnr.ffi.Platform: int calculateAddressSize(jnr.ffi.Platform$CPU)
jnr.ffi.Platform: jnr.ffi.Platform getNativePlatform()
jnr.ffi.Platform: jnr.ffi.Platform getPlatform()
jnr.ffi.Platform: jnr.ffi.Platform$OS getOS()
jnr.ffi.Platform: jnr.ffi.Platform$CPU getCPU()
jnr.ffi.Platform: boolean isBSD()
jnr.ffi.Platform: boolean isUnix()
jnr.ffi.Platform: int longSize()
jnr.ffi.Platform: int addressSize()
jnr.ffi.Platform: java.lang.String getName()
jnr.ffi.Platform: java.lang.String mapLibraryName(java.lang.String)
jnr.ffi.Platform: java.lang.String locateLibrary(java.lang.String,java.util.List)
jnr.ffi.Platform: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)
jnr.ffi.Platform: boolean equalsIgnoreCase(java.lang.String,java.lang.String)
jnr.ffi.Platform: jnr.ffi.Platform access$000()
jnr.ffi.Platform: java.util.Locale access$100()
jnr.ffi.Platform: Platform(jnr.ffi.Platform$OS,jnr.ffi.Platform$1)
jnr.ffi.Platform: void <clinit>()
jnr.ffi.Platform$1
jnr.ffi.Platform$1: int[] $SwitchMap$jnr$ffi$Platform$OS
jnr.ffi.Platform$1: int[] $SwitchMap$jnr$ffi$Platform$CPU
jnr.ffi.Platform$1: void <clinit>()
jnr.ffi.Platform$CPU
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU I386
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU X86_64
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU PPC
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU PPC64
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU PPC64LE
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU SPARC
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU SPARCV9
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU S390X
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU MIPS32
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU ARM
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU UNKNOWN
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU[] $VALUES
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU[] values()
jnr.ffi.Platform$CPU: jnr.ffi.Platform$CPU valueOf(java.lang.String)
jnr.ffi.Platform$CPU: Platform$CPU(java.lang.String,int)
jnr.ffi.Platform$CPU: java.lang.String toString()
jnr.ffi.Platform$CPU: void <clinit>()
jnr.ffi.Platform$Darwin
jnr.ffi.Platform$Darwin: Platform$Darwin()
jnr.ffi.Platform$Darwin: java.lang.String mapLibraryName(java.lang.String)
jnr.ffi.Platform$Darwin: java.lang.String getName()
jnr.ffi.Platform$Default
jnr.ffi.Platform$Default: Platform$Default(jnr.ffi.Platform$OS)
jnr.ffi.Platform$Linux
jnr.ffi.Platform$Linux: Platform$Linux()
jnr.ffi.Platform$Linux: java.lang.String locateLibrary(java.lang.String,java.util.List)
jnr.ffi.Platform$Linux: java.lang.String mapLibraryName(java.lang.String)
jnr.ffi.Platform$Linux$1
jnr.ffi.Platform$Linux$1: java.util.regex.Pattern p
jnr.ffi.Platform$Linux$1: java.lang.String exact
jnr.ffi.Platform$Linux$1: java.lang.String val$libName
jnr.ffi.Platform$Linux$1: jnr.ffi.Platform$Linux this$0
jnr.ffi.Platform$Linux$1: Platform$Linux$1(jnr.ffi.Platform$Linux,java.lang.String)
jnr.ffi.Platform$Linux$1: boolean accept(java.io.File,java.lang.String)
jnr.ffi.Platform$OS
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS DARWIN
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS FREEBSD
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS NETBSD
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS OPENBSD
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS LINUX
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS SOLARIS
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS WINDOWS
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS AIX
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS ZLINUX
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS UNKNOWN
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS[] $VALUES
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS[] values()
jnr.ffi.Platform$OS: jnr.ffi.Platform$OS valueOf(java.lang.String)
jnr.ffi.Platform$OS: Platform$OS(java.lang.String,int)
jnr.ffi.Platform$OS: java.lang.String toString()
jnr.ffi.Platform$OS: void <clinit>()
jnr.ffi.Platform$SingletonHolder
jnr.ffi.Platform$SingletonHolder: jnr.ffi.Platform PLATFORM
jnr.ffi.Platform$SingletonHolder: Platform$SingletonHolder()
jnr.ffi.Platform$SingletonHolder: void <clinit>()
jnr.ffi.Platform$Supported
jnr.ffi.Platform$Supported: Platform$Supported(jnr.ffi.Platform$OS)
jnr.ffi.Platform$Unsupported
jnr.ffi.Platform$Unsupported: Platform$Unsupported(jnr.ffi.Platform$OS)
jnr.ffi.Platform$Windows
jnr.ffi.Platform$Windows: Platform$Windows()
jnr.ffi.Pointer
jnr.ffi.Pointer: jnr.ffi.Runtime runtime
jnr.ffi.Pointer: long address
jnr.ffi.Pointer: boolean isDirect
jnr.ffi.Pointer: jnr.ffi.Pointer wrap(jnr.ffi.Runtime,long)
jnr.ffi.Pointer: jnr.ffi.Pointer wrap(jnr.ffi.Runtime,long,long)
jnr.ffi.Pointer: jnr.ffi.Pointer wrap(jnr.ffi.Runtime,java.nio.ByteBuffer)
jnr.ffi.Pointer: jnr.ffi.Pointer newIntPointer(jnr.ffi.Runtime,long)
jnr.ffi.Pointer: Pointer(jnr.ffi.Runtime,long,boolean)
jnr.ffi.Pointer: boolean isDirect()
jnr.ffi.Pointer: long address()
jnr.ffi.Pointer: jnr.ffi.Runtime getRuntime()
jnr.ffi.Pointer: java.lang.String toString()
jnr.ffi.Pointer: long size()
jnr.ffi.Pointer: boolean hasArray()
jnr.ffi.Pointer: java.lang.Object array()
jnr.ffi.Pointer: int arrayOffset()
jnr.ffi.Pointer: int arrayLength()
jnr.ffi.Pointer: byte getByte(long)
jnr.ffi.Pointer: short getShort(long)
jnr.ffi.Pointer: int getInt(long)
jnr.ffi.Pointer: long getLong(long)
jnr.ffi.Pointer: long getLongLong(long)
jnr.ffi.Pointer: float getFloat(long)
jnr.ffi.Pointer: double getDouble(long)
jnr.ffi.Pointer: long getNativeLong(long)
jnr.ffi.Pointer: long getInt(jnr.ffi.Type,long)
jnr.ffi.Pointer: void putByte(long,byte)
jnr.ffi.Pointer: void putShort(long,short)
jnr.ffi.Pointer: void putInt(long,int)
jnr.ffi.Pointer: void putLong(long,long)
jnr.ffi.Pointer: void putLongLong(long,long)
jnr.ffi.Pointer: void putFloat(long,float)
jnr.ffi.Pointer: void putDouble(long,double)
jnr.ffi.Pointer: void putNativeLong(long,long)
jnr.ffi.Pointer: void putInt(jnr.ffi.Type,long,long)
jnr.ffi.Pointer: long getAddress(long)
jnr.ffi.Pointer: void putAddress(long,long)
jnr.ffi.Pointer: void putAddress(long,jnr.ffi.Address)
jnr.ffi.Pointer: void get(long,byte[],int,int)
jnr.ffi.Pointer: void put(long,byte[],int,int)
jnr.ffi.Pointer: void get(long,short[],int,int)
jnr.ffi.Pointer: void put(long,short[],int,int)
jnr.ffi.Pointer: void get(long,int[],int,int)
jnr.ffi.Pointer: void put(long,int[],int,int)
jnr.ffi.Pointer: void get(long,long[],int,int)
jnr.ffi.Pointer: void put(long,long[],int,int)
jnr.ffi.Pointer: void get(long,float[],int,int)
jnr.ffi.Pointer: void put(long,float[],int,int)
jnr.ffi.Pointer: void get(long,double[],int,int)
jnr.ffi.Pointer: void put(long,double[],int,int)
jnr.ffi.Pointer: jnr.ffi.Pointer getPointer(long)
jnr.ffi.Pointer: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.Pointer: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.Pointer: java.lang.String getString(long)
jnr.ffi.Pointer: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.Pointer: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.Pointer: jnr.ffi.Pointer slice(long)
jnr.ffi.Pointer: jnr.ffi.Pointer slice(long,long)
jnr.ffi.Pointer: void transferTo(long,jnr.ffi.Pointer,long,long)
jnr.ffi.Pointer: void transferFrom(long,jnr.ffi.Pointer,long,long)
jnr.ffi.Pointer: void checkBounds(long,long)
jnr.ffi.Pointer: void setMemory(long,long,byte)
jnr.ffi.Pointer: int indexOf(long,byte)
jnr.ffi.Pointer: int indexOf(long,byte,int)
jnr.ffi.Pointer: void get(long,jnr.ffi.Pointer[],int,int)
jnr.ffi.Pointer: void put(long,jnr.ffi.Pointer[],int,int)
jnr.ffi.Pointer: java.lang.String[] getNullTerminatedStringArray(long)
jnr.ffi.Pointer: jnr.ffi.Pointer[] getNullTerminatedPointerArray(long)
jnr.ffi.Runtime
jnr.ffi.Runtime: Runtime()
jnr.ffi.Runtime: jnr.ffi.Runtime getSystemRuntime()
jnr.ffi.Runtime: jnr.ffi.Runtime getRuntime(java.lang.Object)
jnr.ffi.Runtime: jnr.ffi.Type findType(jnr.ffi.NativeType)
jnr.ffi.Runtime: jnr.ffi.Type findType(jnr.ffi.TypeAlias)
jnr.ffi.Runtime: jnr.ffi.provider.MemoryManager getMemoryManager()
jnr.ffi.Runtime: jnr.ffi.provider.ClosureManager getClosureManager()
jnr.ffi.Runtime: jnr.ffi.ObjectReferenceManager newObjectReferenceManager()
jnr.ffi.Runtime: int getLastError()
jnr.ffi.Runtime: void setLastError(int)
jnr.ffi.Runtime: long addressMask()
jnr.ffi.Runtime: int addressSize()
jnr.ffi.Runtime: int longSize()
jnr.ffi.Runtime: java.nio.ByteOrder byteOrder()
jnr.ffi.Runtime: boolean isCompatible(jnr.ffi.Runtime)
jnr.ffi.Runtime$SingletonHolder
jnr.ffi.Runtime$SingletonHolder: jnr.ffi.Runtime SYSTEM_RUNTIME
jnr.ffi.Runtime$SingletonHolder: Runtime$SingletonHolder()
jnr.ffi.Runtime$SingletonHolder: void <clinit>()
jnr.ffi.Struct
jnr.ffi.Struct: java.nio.charset.Charset ASCII
jnr.ffi.Struct: java.nio.charset.Charset UTF8
jnr.ffi.Struct: jnr.ffi.Struct$Info __info
jnr.ffi.Struct: Struct(jnr.ffi.Runtime)
jnr.ffi.Struct: Struct(jnr.ffi.Runtime,boolean)
jnr.ffi.Struct: jnr.ffi.Runtime getRuntime()
jnr.ffi.Struct: void useMemory(jnr.ffi.Pointer)
jnr.ffi.Struct: jnr.ffi.Pointer getMemory(jnr.ffi.Struct)
jnr.ffi.Struct: jnr.ffi.Pointer getMemory(jnr.ffi.Struct,int)
jnr.ffi.Struct: int size(jnr.ffi.Struct)
jnr.ffi.Struct: int alignment(jnr.ffi.Struct)
jnr.ffi.Struct: boolean isDirect(jnr.ffi.Struct)
jnr.ffi.Struct: int align(int,int)
jnr.ffi.Struct: jnr.ffi.Struct[] arrayOf(jnr.ffi.Runtime,java.lang.Class,int)
jnr.ffi.Struct: java.lang.String toString()
jnr.ffi.Struct: void arrayBegin()
jnr.ffi.Struct: void arrayEnd()
jnr.ffi.Struct: jnr.ffi.Struct$Member[] array(jnr.ffi.Struct$Member[])
jnr.ffi.Struct: jnr.ffi.Struct$Signed8[] array(jnr.ffi.Struct$Signed8[])
jnr.ffi.Struct: jnr.ffi.Struct$Unsigned8[] array(jnr.ffi.Struct$Unsigned8[])
jnr.ffi.Struct: jnr.ffi.Struct$Signed16[] array(jnr.ffi.Struct$Signed16[])
jnr.ffi.Struct: jnr.ffi.Struct$Unsigned16[] array(jnr.ffi.Struct$Unsigned16[])
jnr.ffi.Struct: jnr.ffi.Struct$Signed32[] array(jnr.ffi.Struct$Signed32[])
jnr.ffi.Struct: jnr.ffi.Struct$Unsigned32[] array(jnr.ffi.Struct$Unsigned32[])
jnr.ffi.Struct: jnr.ffi.Struct$Signed64[] array(jnr.ffi.Struct$Signed64[])
jnr.ffi.Struct: jnr.ffi.Struct$Unsigned64[] array(jnr.ffi.Struct$Unsigned64[])
jnr.ffi.Struct: jnr.ffi.Struct$SignedLong[] array(jnr.ffi.Struct$SignedLong[])
jnr.ffi.Struct: jnr.ffi.Struct$UnsignedLong[] array(jnr.ffi.Struct$UnsignedLong[])
jnr.ffi.Struct: jnr.ffi.Struct$Float[] array(jnr.ffi.Struct$Float[])
jnr.ffi.Struct: jnr.ffi.Struct$Double[] array(jnr.ffi.Struct$Double[])
jnr.ffi.Struct: jnr.ffi.Struct$Address[] array(jnr.ffi.Struct$Address[])
jnr.ffi.Struct: jnr.ffi.Struct$Pointer[] array(jnr.ffi.Struct$Pointer[])
jnr.ffi.Struct: jnr.ffi.Struct inner(jnr.ffi.Struct)
jnr.ffi.Struct: jnr.ffi.Struct$Function function(java.lang.Class)
jnr.ffi.Struct: int access$000(int,int)
jnr.ffi.Struct: void <clinit>()
jnr.ffi.Struct$AbstractBoolean
jnr.ffi.Struct$AbstractBoolean: jnr.ffi.Struct this$0
jnr.ffi.Struct$AbstractBoolean: Struct$AbstractBoolean(jnr.ffi.Struct,jnr.ffi.NativeType)
jnr.ffi.Struct$AbstractBoolean: Struct$AbstractBoolean(jnr.ffi.Struct,jnr.ffi.NativeType,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$AbstractBoolean: boolean get()
jnr.ffi.Struct$AbstractBoolean: void set(boolean)
jnr.ffi.Struct$AbstractBoolean: java.lang.String toString()
jnr.ffi.Struct$AbstractMember
jnr.ffi.Struct$AbstractMember: int offset
jnr.ffi.Struct$AbstractMember: jnr.ffi.Struct this$0
jnr.ffi.Struct$AbstractMember: Struct$AbstractMember(jnr.ffi.Struct,int)
jnr.ffi.Struct$AbstractMember: Struct$AbstractMember(jnr.ffi.Struct,int,int,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$AbstractMember: Struct$AbstractMember(jnr.ffi.Struct,int,int)
jnr.ffi.Struct$AbstractMember: Struct$AbstractMember(jnr.ffi.Struct,jnr.ffi.NativeType)
jnr.ffi.Struct$AbstractMember: Struct$AbstractMember(jnr.ffi.Struct,jnr.ffi.NativeType,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$AbstractMember: jnr.ffi.Pointer getMemory()
jnr.ffi.Struct$AbstractMember: jnr.ffi.Struct struct()
jnr.ffi.Struct$AbstractMember: long offset()
jnr.ffi.Struct$Address
jnr.ffi.Struct$Address: jnr.ffi.Struct this$0
jnr.ffi.Struct$Address: Struct$Address(jnr.ffi.Struct)
jnr.ffi.Struct$Address: Struct$Address(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Address: jnr.ffi.Address get()
jnr.ffi.Struct$Address: void set(jnr.ffi.Address)
jnr.ffi.Struct$Address: void set(java.lang.Number)
jnr.ffi.Struct$Address: int intValue()
jnr.ffi.Struct$Address: long longValue()
jnr.ffi.Struct$Address: java.lang.String toString()
jnr.ffi.Struct$AsciiString
jnr.ffi.Struct$AsciiString: jnr.ffi.Struct this$0
jnr.ffi.Struct$AsciiString: Struct$AsciiString(jnr.ffi.Struct,int)
jnr.ffi.Struct$AsciiStringRef
jnr.ffi.Struct$AsciiStringRef: jnr.ffi.Struct this$0
jnr.ffi.Struct$AsciiStringRef: Struct$AsciiStringRef(jnr.ffi.Struct,int)
jnr.ffi.Struct$AsciiStringRef: Struct$AsciiStringRef(jnr.ffi.Struct)
jnr.ffi.Struct$Boolean
jnr.ffi.Struct$Boolean: jnr.ffi.Struct this$0
jnr.ffi.Struct$Boolean: Struct$Boolean(jnr.ffi.Struct)
jnr.ffi.Struct$Boolean: boolean get()
jnr.ffi.Struct$Boolean: void set(boolean)
jnr.ffi.Struct$Boolean: java.lang.String toString()
jnr.ffi.Struct$Double
jnr.ffi.Struct$Double: jnr.ffi.Struct this$0
jnr.ffi.Struct$Double: Struct$Double(jnr.ffi.Struct)
jnr.ffi.Struct$Double: Struct$Double(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Double: double get()
jnr.ffi.Struct$Double: void set(double)
jnr.ffi.Struct$Double: void set(java.lang.Number)
jnr.ffi.Struct$Double: int intValue()
jnr.ffi.Struct$Double: long longValue()
jnr.ffi.Struct$Double: float floatValue()
jnr.ffi.Struct$Double: double doubleValue()
jnr.ffi.Struct$Double: java.lang.String toString()
jnr.ffi.Struct$Enum
jnr.ffi.Struct$Enum: jnr.ffi.Struct this$0
jnr.ffi.Struct$Enum: Struct$Enum(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Enum16
jnr.ffi.Struct$Enum16: jnr.ffi.Struct this$0
jnr.ffi.Struct$Enum16: Struct$Enum16(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Enum16: java.lang.Enum get()
jnr.ffi.Struct$Enum16: void set(java.lang.Enum)
jnr.ffi.Struct$Enum16: void set(java.lang.Number)
jnr.ffi.Struct$Enum16: int intValue()
jnr.ffi.Struct$Enum16: java.lang.Object get()
jnr.ffi.Struct$Enum32
jnr.ffi.Struct$Enum32: jnr.ffi.Struct this$0
jnr.ffi.Struct$Enum32: Struct$Enum32(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Enum32: java.lang.Enum get()
jnr.ffi.Struct$Enum32: void set(java.lang.Enum)
jnr.ffi.Struct$Enum32: void set(java.lang.Number)
jnr.ffi.Struct$Enum32: int intValue()
jnr.ffi.Struct$Enum32: java.lang.Object get()
jnr.ffi.Struct$Enum64
jnr.ffi.Struct$Enum64: jnr.ffi.Struct this$0
jnr.ffi.Struct$Enum64: Struct$Enum64(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Enum64: java.lang.Enum get()
jnr.ffi.Struct$Enum64: void set(java.lang.Enum)
jnr.ffi.Struct$Enum64: void set(java.lang.Number)
jnr.ffi.Struct$Enum64: int intValue()
jnr.ffi.Struct$Enum64: long longValue()
jnr.ffi.Struct$Enum64: java.lang.Object get()
jnr.ffi.Struct$Enum8
jnr.ffi.Struct$Enum8: jnr.ffi.Struct this$0
jnr.ffi.Struct$Enum8: Struct$Enum8(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Enum8: java.lang.Enum get()
jnr.ffi.Struct$Enum8: void set(java.lang.Enum)
jnr.ffi.Struct$Enum8: void set(java.lang.Number)
jnr.ffi.Struct$Enum8: int intValue()
jnr.ffi.Struct$Enum8: java.lang.Object get()
jnr.ffi.Struct$EnumField
jnr.ffi.Struct$EnumField: java.lang.Class enumClass
jnr.ffi.Struct$EnumField: jnr.ffi.Struct this$0
jnr.ffi.Struct$EnumField: Struct$EnumField(jnr.ffi.Struct,jnr.ffi.NativeType,java.lang.Class)
jnr.ffi.Struct$EnumField: java.lang.Object get()
jnr.ffi.Struct$EnumField: java.lang.String toString()
jnr.ffi.Struct$EnumLong
jnr.ffi.Struct$EnumLong: jnr.ffi.Struct this$0
jnr.ffi.Struct$EnumLong: Struct$EnumLong(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$EnumLong: java.lang.Enum get()
jnr.ffi.Struct$EnumLong: void set(java.lang.Enum)
jnr.ffi.Struct$EnumLong: void set(java.lang.Number)
jnr.ffi.Struct$EnumLong: int intValue()
jnr.ffi.Struct$EnumLong: long longValue()
jnr.ffi.Struct$EnumLong: java.lang.Object get()
jnr.ffi.Struct$Float
jnr.ffi.Struct$Float: jnr.ffi.Struct this$0
jnr.ffi.Struct$Float: Struct$Float(jnr.ffi.Struct)
jnr.ffi.Struct$Float: Struct$Float(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Float: float get()
jnr.ffi.Struct$Float: void set(float)
jnr.ffi.Struct$Float: void set(java.lang.Number)
jnr.ffi.Struct$Float: int intValue()
jnr.ffi.Struct$Float: double doubleValue()
jnr.ffi.Struct$Float: float floatValue()
jnr.ffi.Struct$Float: long longValue()
jnr.ffi.Struct$Float: java.lang.String toString()
jnr.ffi.Struct$Function
jnr.ffi.Struct$Function: java.lang.Class closureClass
jnr.ffi.Struct$Function: java.lang.Object instance
jnr.ffi.Struct$Function: jnr.ffi.Struct this$0
jnr.ffi.Struct$Function: Struct$Function(jnr.ffi.Struct,java.lang.Class)
jnr.ffi.Struct$Function: void set(java.lang.Object)
jnr.ffi.Struct$Info
jnr.ffi.Struct$Info: jnr.ffi.Runtime runtime
jnr.ffi.Struct$Info: jnr.ffi.Pointer memory
jnr.ffi.Struct$Info: jnr.ffi.Struct enclosing
jnr.ffi.Struct$Info: int offset
jnr.ffi.Struct$Info: int size
jnr.ffi.Struct$Info: int minAlign
jnr.ffi.Struct$Info: boolean isUnion
jnr.ffi.Struct$Info: boolean resetIndex
jnr.ffi.Struct$Info: Struct$Info(jnr.ffi.Runtime)
jnr.ffi.Struct$Info: jnr.ffi.Pointer getMemory(int)
jnr.ffi.Struct$Info: jnr.ffi.Pointer getMemory()
jnr.ffi.Struct$Info: boolean isDirect()
jnr.ffi.Struct$Info: int size()
jnr.ffi.Struct$Info: int getMinimumAlignment()
jnr.ffi.Struct$Info: jnr.ffi.Pointer allocateMemory(int)
jnr.ffi.Struct$Info: void useMemory(jnr.ffi.Pointer)
jnr.ffi.Struct$Info: int addField(int,int,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Info: int addField(int,int)
jnr.ffi.Struct$Info: jnr.ffi.Runtime access$100(jnr.ffi.Struct$Info)
jnr.ffi.Struct$IntegerAlias
jnr.ffi.Struct$IntegerAlias: jnr.ffi.Struct this$0
jnr.ffi.Struct$IntegerAlias: Struct$IntegerAlias(jnr.ffi.Struct,jnr.ffi.TypeAlias)
jnr.ffi.Struct$IntegerAlias: Struct$IntegerAlias(jnr.ffi.Struct,jnr.ffi.TypeAlias,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$IntegerAlias: void set(java.lang.Number)
jnr.ffi.Struct$IntegerAlias: void set(long)
jnr.ffi.Struct$IntegerAlias: long get()
jnr.ffi.Struct$IntegerAlias: int intValue()
jnr.ffi.Struct$IntegerAlias: long longValue()
jnr.ffi.Struct$Member
jnr.ffi.Struct$Member: jnr.ffi.Struct this$0
jnr.ffi.Struct$Member: Struct$Member(jnr.ffi.Struct)
jnr.ffi.Struct$Member: jnr.ffi.Struct struct()
jnr.ffi.Struct$Member: jnr.ffi.Pointer getMemory()
jnr.ffi.Struct$Member: long offset()
jnr.ffi.Struct$NumberField
jnr.ffi.Struct$NumberField: int offset
jnr.ffi.Struct$NumberField: jnr.ffi.Type type
jnr.ffi.Struct$NumberField: jnr.ffi.Struct this$0
jnr.ffi.Struct$NumberField: Struct$NumberField(jnr.ffi.Struct,jnr.ffi.NativeType)
jnr.ffi.Struct$NumberField: Struct$NumberField(jnr.ffi.Struct,jnr.ffi.NativeType,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$NumberField: Struct$NumberField(jnr.ffi.Struct,jnr.ffi.TypeAlias)
jnr.ffi.Struct$NumberField: Struct$NumberField(jnr.ffi.Struct,jnr.ffi.TypeAlias,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$NumberField: jnr.ffi.Pointer getMemory()
jnr.ffi.Struct$NumberField: jnr.ffi.Struct struct()
jnr.ffi.Struct$NumberField: long offset()
jnr.ffi.Struct$NumberField: void set(java.lang.Number)
jnr.ffi.Struct$NumberField: double doubleValue()
jnr.ffi.Struct$NumberField: float floatValue()
jnr.ffi.Struct$NumberField: byte byteValue()
jnr.ffi.Struct$NumberField: short shortValue()
jnr.ffi.Struct$NumberField: int intValue()
jnr.ffi.Struct$NumberField: long longValue()
jnr.ffi.Struct$NumberField: java.lang.String toString()
jnr.ffi.Struct$Offset
jnr.ffi.Struct$Offset: int offset
jnr.ffi.Struct$Offset: Struct$Offset(int)
jnr.ffi.Struct$Offset: int intValue()
jnr.ffi.Struct$Offset: long longValue()
jnr.ffi.Struct$Offset: float floatValue()
jnr.ffi.Struct$Offset: double doubleValue()
jnr.ffi.Struct$Padding
jnr.ffi.Struct$Padding: jnr.ffi.Struct this$0
jnr.ffi.Struct$Padding: Struct$Padding(jnr.ffi.Struct,jnr.ffi.Type,int)
jnr.ffi.Struct$Padding: Struct$Padding(jnr.ffi.Struct,jnr.ffi.NativeType,int)
jnr.ffi.Struct$Pointer
jnr.ffi.Struct$Pointer: jnr.ffi.Struct this$0
jnr.ffi.Struct$Pointer: Struct$Pointer(jnr.ffi.Struct)
jnr.ffi.Struct$Pointer: Struct$Pointer(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Pointer: jnr.ffi.Pointer get()
jnr.ffi.Struct$Pointer: int size()
jnr.ffi.Struct$Pointer: void set(jnr.ffi.Pointer)
jnr.ffi.Struct$Pointer: void set(java.lang.Number)
jnr.ffi.Struct$Pointer: int intValue()
jnr.ffi.Struct$Pointer: long longValue()
jnr.ffi.Struct$Pointer: java.lang.String toString()
jnr.ffi.Struct$Signed16
jnr.ffi.Struct$Signed16: jnr.ffi.Struct this$0
jnr.ffi.Struct$Signed16: Struct$Signed16(jnr.ffi.Struct)
jnr.ffi.Struct$Signed16: Struct$Signed16(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Signed16: short get()
jnr.ffi.Struct$Signed16: void set(short)
jnr.ffi.Struct$Signed16: void set(java.lang.Number)
jnr.ffi.Struct$Signed16: short shortValue()
jnr.ffi.Struct$Signed16: int intValue()
jnr.ffi.Struct$Signed32
jnr.ffi.Struct$Signed32: jnr.ffi.Struct this$0
jnr.ffi.Struct$Signed32: Struct$Signed32(jnr.ffi.Struct)
jnr.ffi.Struct$Signed32: Struct$Signed32(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Signed32: int get()
jnr.ffi.Struct$Signed32: void set(int)
jnr.ffi.Struct$Signed32: void set(java.lang.Number)
jnr.ffi.Struct$Signed32: int intValue()
jnr.ffi.Struct$Signed64
jnr.ffi.Struct$Signed64: jnr.ffi.Struct this$0
jnr.ffi.Struct$Signed64: Struct$Signed64(jnr.ffi.Struct)
jnr.ffi.Struct$Signed64: Struct$Signed64(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Signed64: long get()
jnr.ffi.Struct$Signed64: void set(long)
jnr.ffi.Struct$Signed64: void set(java.lang.Number)
jnr.ffi.Struct$Signed64: int intValue()
jnr.ffi.Struct$Signed64: long longValue()
jnr.ffi.Struct$Signed64: java.lang.String toString()
jnr.ffi.Struct$Signed8
jnr.ffi.Struct$Signed8: jnr.ffi.Struct this$0
jnr.ffi.Struct$Signed8: Struct$Signed8(jnr.ffi.Struct)
jnr.ffi.Struct$Signed8: Struct$Signed8(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Signed8: byte get()
jnr.ffi.Struct$Signed8: void set(byte)
jnr.ffi.Struct$Signed8: void set(java.lang.Number)
jnr.ffi.Struct$Signed8: byte byteValue()
jnr.ffi.Struct$Signed8: short shortValue()
jnr.ffi.Struct$Signed8: int intValue()
jnr.ffi.Struct$SignedLong
jnr.ffi.Struct$SignedLong: jnr.ffi.Struct this$0
jnr.ffi.Struct$SignedLong: Struct$SignedLong(jnr.ffi.Struct)
jnr.ffi.Struct$SignedLong: Struct$SignedLong(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$SignedLong: long get()
jnr.ffi.Struct$SignedLong: void set(long)
jnr.ffi.Struct$SignedLong: void set(java.lang.Number)
jnr.ffi.Struct$SignedLong: int intValue()
jnr.ffi.Struct$SignedLong: long longValue()
jnr.ffi.Struct$SignedLong: java.lang.String toString()
jnr.ffi.Struct$String
jnr.ffi.Struct$String: java.nio.charset.Charset charset
jnr.ffi.Struct$String: int length
jnr.ffi.Struct$String: jnr.ffi.Struct this$0
jnr.ffi.Struct$String: Struct$String(jnr.ffi.Struct,int,int,int,java.nio.charset.Charset)
jnr.ffi.Struct$String: Struct$String(jnr.ffi.Struct,int,int,jnr.ffi.Struct$Offset,int,java.nio.charset.Charset)
jnr.ffi.Struct$String: int length()
jnr.ffi.Struct$String: jnr.ffi.Pointer getStringMemory()
jnr.ffi.Struct$String: java.lang.String get()
jnr.ffi.Struct$String: void set(java.lang.String)
jnr.ffi.Struct$String: java.lang.String toString()
jnr.ffi.Struct$UTF8String
jnr.ffi.Struct$UTF8String: jnr.ffi.Struct this$0
jnr.ffi.Struct$UTF8String: Struct$UTF8String(jnr.ffi.Struct,int)
jnr.ffi.Struct$UTF8StringRef
jnr.ffi.Struct$UTF8StringRef: jnr.ffi.Struct this$0
jnr.ffi.Struct$UTF8StringRef: Struct$UTF8StringRef(jnr.ffi.Struct,int)
jnr.ffi.Struct$UTF8StringRef: Struct$UTF8StringRef(jnr.ffi.Struct)
jnr.ffi.Struct$UTFString
jnr.ffi.Struct$UTFString: jnr.ffi.Struct this$0
jnr.ffi.Struct$UTFString: Struct$UTFString(jnr.ffi.Struct,int,java.nio.charset.Charset)
jnr.ffi.Struct$UTFString: jnr.ffi.Pointer getStringMemory()
jnr.ffi.Struct$UTFString: java.lang.String get()
jnr.ffi.Struct$UTFString: void set(java.lang.String)
jnr.ffi.Struct$UTFStringRef
jnr.ffi.Struct$UTFStringRef: jnr.ffi.Pointer valueHolder
jnr.ffi.Struct$UTFStringRef: jnr.ffi.Struct this$0
jnr.ffi.Struct$UTFStringRef: Struct$UTFStringRef(jnr.ffi.Struct,int,java.nio.charset.Charset)
jnr.ffi.Struct$UTFStringRef: Struct$UTFStringRef(jnr.ffi.Struct,java.nio.charset.Charset)
jnr.ffi.Struct$UTFStringRef: jnr.ffi.Pointer getStringMemory()
jnr.ffi.Struct$UTFStringRef: java.lang.String get()
jnr.ffi.Struct$UTFStringRef: void set(java.lang.String)
jnr.ffi.Struct$Unsigned16
jnr.ffi.Struct$Unsigned16: jnr.ffi.Struct this$0
jnr.ffi.Struct$Unsigned16: Struct$Unsigned16(jnr.ffi.Struct)
jnr.ffi.Struct$Unsigned16: Struct$Unsigned16(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Unsigned16: int get()
jnr.ffi.Struct$Unsigned16: void set(int)
jnr.ffi.Struct$Unsigned16: void set(java.lang.Number)
jnr.ffi.Struct$Unsigned16: int intValue()
jnr.ffi.Struct$Unsigned32
jnr.ffi.Struct$Unsigned32: jnr.ffi.Struct this$0
jnr.ffi.Struct$Unsigned32: Struct$Unsigned32(jnr.ffi.Struct)
jnr.ffi.Struct$Unsigned32: Struct$Unsigned32(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Unsigned32: long get()
jnr.ffi.Struct$Unsigned32: void set(long)
jnr.ffi.Struct$Unsigned32: void set(java.lang.Number)
jnr.ffi.Struct$Unsigned32: int intValue()
jnr.ffi.Struct$Unsigned32: long longValue()
jnr.ffi.Struct$Unsigned64
jnr.ffi.Struct$Unsigned64: jnr.ffi.Struct this$0
jnr.ffi.Struct$Unsigned64: Struct$Unsigned64(jnr.ffi.Struct)
jnr.ffi.Struct$Unsigned64: Struct$Unsigned64(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Unsigned64: long get()
jnr.ffi.Struct$Unsigned64: void set(long)
jnr.ffi.Struct$Unsigned64: void set(java.lang.Number)
jnr.ffi.Struct$Unsigned64: int intValue()
jnr.ffi.Struct$Unsigned64: long longValue()
jnr.ffi.Struct$Unsigned64: java.lang.String toString()
jnr.ffi.Struct$Unsigned8
jnr.ffi.Struct$Unsigned8: jnr.ffi.Struct this$0
jnr.ffi.Struct$Unsigned8: Struct$Unsigned8(jnr.ffi.Struct)
jnr.ffi.Struct$Unsigned8: Struct$Unsigned8(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$Unsigned8: short get()
jnr.ffi.Struct$Unsigned8: void set(short)
jnr.ffi.Struct$Unsigned8: void set(java.lang.Number)
jnr.ffi.Struct$Unsigned8: short shortValue()
jnr.ffi.Struct$Unsigned8: int intValue()
jnr.ffi.Struct$UnsignedLong
jnr.ffi.Struct$UnsignedLong: jnr.ffi.Struct this$0
jnr.ffi.Struct$UnsignedLong: Struct$UnsignedLong(jnr.ffi.Struct)
jnr.ffi.Struct$UnsignedLong: Struct$UnsignedLong(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$UnsignedLong: long get()
jnr.ffi.Struct$UnsignedLong: void set(long)
jnr.ffi.Struct$UnsignedLong: void set(java.lang.Number)
jnr.ffi.Struct$UnsignedLong: int intValue()
jnr.ffi.Struct$UnsignedLong: long longValue()
jnr.ffi.Struct$UnsignedLong: java.lang.String toString()
jnr.ffi.Struct$WBOOL
jnr.ffi.Struct$WBOOL: jnr.ffi.Struct this$0
jnr.ffi.Struct$WBOOL: Struct$WBOOL(jnr.ffi.Struct)
jnr.ffi.Struct$WBOOL: boolean get()
jnr.ffi.Struct$WBOOL: void set(boolean)
jnr.ffi.Struct$WBOOL: java.lang.String toString()
jnr.ffi.Struct$blkcnt_t
jnr.ffi.Struct$blkcnt_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$blkcnt_t: Struct$blkcnt_t(jnr.ffi.Struct)
jnr.ffi.Struct$blkcnt_t: Struct$blkcnt_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$blksize_t
jnr.ffi.Struct$blksize_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$blksize_t: Struct$blksize_t(jnr.ffi.Struct)
jnr.ffi.Struct$blksize_t: Struct$blksize_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$caddr_t
jnr.ffi.Struct$caddr_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$caddr_t: Struct$caddr_t(jnr.ffi.Struct)
jnr.ffi.Struct$caddr_t: Struct$caddr_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$clock_t
jnr.ffi.Struct$clock_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$clock_t: Struct$clock_t(jnr.ffi.Struct)
jnr.ffi.Struct$clock_t: Struct$clock_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$dev_t
jnr.ffi.Struct$dev_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$dev_t: Struct$dev_t(jnr.ffi.Struct)
jnr.ffi.Struct$dev_t: Struct$dev_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$fsblkcnt_t
jnr.ffi.Struct$fsblkcnt_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$fsblkcnt_t: Struct$fsblkcnt_t(jnr.ffi.Struct)
jnr.ffi.Struct$fsblkcnt_t: Struct$fsblkcnt_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$fsfilcnt_t
jnr.ffi.Struct$fsfilcnt_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$fsfilcnt_t: Struct$fsfilcnt_t(jnr.ffi.Struct)
jnr.ffi.Struct$fsfilcnt_t: Struct$fsfilcnt_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$gid_t
jnr.ffi.Struct$gid_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$gid_t: Struct$gid_t(jnr.ffi.Struct)
jnr.ffi.Struct$gid_t: Struct$gid_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$id_t
jnr.ffi.Struct$id_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$id_t: Struct$id_t(jnr.ffi.Struct)
jnr.ffi.Struct$id_t: Struct$id_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$in_addr_t
jnr.ffi.Struct$in_addr_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$in_addr_t: Struct$in_addr_t(jnr.ffi.Struct)
jnr.ffi.Struct$in_addr_t: Struct$in_addr_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$in_port_t
jnr.ffi.Struct$in_port_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$in_port_t: Struct$in_port_t(jnr.ffi.Struct)
jnr.ffi.Struct$in_port_t: Struct$in_port_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$ino64_t
jnr.ffi.Struct$ino64_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$ino64_t: Struct$ino64_t(jnr.ffi.Struct)
jnr.ffi.Struct$ino64_t: Struct$ino64_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$ino_t
jnr.ffi.Struct$ino_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$ino_t: Struct$ino_t(jnr.ffi.Struct)
jnr.ffi.Struct$ino_t: Struct$ino_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$int16_t
jnr.ffi.Struct$int16_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$int16_t: Struct$int16_t(jnr.ffi.Struct)
jnr.ffi.Struct$int16_t: Struct$int16_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$int32_t
jnr.ffi.Struct$int32_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$int32_t: Struct$int32_t(jnr.ffi.Struct)
jnr.ffi.Struct$int32_t: Struct$int32_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$int64_t
jnr.ffi.Struct$int64_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$int64_t: Struct$int64_t(jnr.ffi.Struct)
jnr.ffi.Struct$int64_t: Struct$int64_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$int8_t
jnr.ffi.Struct$int8_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$int8_t: Struct$int8_t(jnr.ffi.Struct)
jnr.ffi.Struct$int8_t: Struct$int8_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$intptr_t
jnr.ffi.Struct$intptr_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$intptr_t: Struct$intptr_t(jnr.ffi.Struct)
jnr.ffi.Struct$intptr_t: Struct$intptr_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$key_t
jnr.ffi.Struct$key_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$key_t: Struct$key_t(jnr.ffi.Struct)
jnr.ffi.Struct$key_t: Struct$key_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$mode_t
jnr.ffi.Struct$mode_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$mode_t: Struct$mode_t(jnr.ffi.Struct)
jnr.ffi.Struct$mode_t: Struct$mode_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$nlink_t
jnr.ffi.Struct$nlink_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$nlink_t: Struct$nlink_t(jnr.ffi.Struct)
jnr.ffi.Struct$nlink_t: Struct$nlink_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$off_t
jnr.ffi.Struct$off_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$off_t: Struct$off_t(jnr.ffi.Struct)
jnr.ffi.Struct$off_t: Struct$off_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$pid_t
jnr.ffi.Struct$pid_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$pid_t: Struct$pid_t(jnr.ffi.Struct)
jnr.ffi.Struct$pid_t: Struct$pid_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$rlim_t
jnr.ffi.Struct$rlim_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$rlim_t: Struct$rlim_t(jnr.ffi.Struct)
jnr.ffi.Struct$rlim_t: Struct$rlim_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$sa_family_t
jnr.ffi.Struct$sa_family_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$sa_family_t: Struct$sa_family_t(jnr.ffi.Struct)
jnr.ffi.Struct$sa_family_t: Struct$sa_family_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$size_t
jnr.ffi.Struct$size_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$size_t: Struct$size_t(jnr.ffi.Struct)
jnr.ffi.Struct$size_t: Struct$size_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$socklen_t
jnr.ffi.Struct$socklen_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$socklen_t: Struct$socklen_t(jnr.ffi.Struct)
jnr.ffi.Struct$socklen_t: Struct$socklen_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$ssize_t
jnr.ffi.Struct$ssize_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$ssize_t: Struct$ssize_t(jnr.ffi.Struct)
jnr.ffi.Struct$ssize_t: Struct$ssize_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$swblk_t
jnr.ffi.Struct$swblk_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$swblk_t: Struct$swblk_t(jnr.ffi.Struct)
jnr.ffi.Struct$swblk_t: Struct$swblk_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$time_t
jnr.ffi.Struct$time_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$time_t: Struct$time_t(jnr.ffi.Struct)
jnr.ffi.Struct$time_t: Struct$time_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$u_int16_t
jnr.ffi.Struct$u_int16_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$u_int16_t: Struct$u_int16_t(jnr.ffi.Struct)
jnr.ffi.Struct$u_int16_t: Struct$u_int16_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$u_int32_t
jnr.ffi.Struct$u_int32_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$u_int32_t: Struct$u_int32_t(jnr.ffi.Struct)
jnr.ffi.Struct$u_int32_t: Struct$u_int32_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$u_int64_t
jnr.ffi.Struct$u_int64_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$u_int64_t: Struct$u_int64_t(jnr.ffi.Struct)
jnr.ffi.Struct$u_int64_t: Struct$u_int64_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$u_int8_t
jnr.ffi.Struct$u_int8_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$u_int8_t: Struct$u_int8_t(jnr.ffi.Struct)
jnr.ffi.Struct$u_int8_t: Struct$u_int8_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$uid_t
jnr.ffi.Struct$uid_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$uid_t: Struct$uid_t(jnr.ffi.Struct)
jnr.ffi.Struct$uid_t: Struct$uid_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.Struct$uintptr_t
jnr.ffi.Struct$uintptr_t: jnr.ffi.Struct this$0
jnr.ffi.Struct$uintptr_t: Struct$uintptr_t(jnr.ffi.Struct)
jnr.ffi.Struct$uintptr_t: Struct$uintptr_t(jnr.ffi.Struct,jnr.ffi.Struct$Offset)
jnr.ffi.StructLayout
jnr.ffi.StructLayout: java.nio.charset.Charset ASCII
jnr.ffi.StructLayout: java.nio.charset.Charset UTF8
jnr.ffi.StructLayout: jnr.ffi.Runtime runtime
jnr.ffi.StructLayout: boolean isUnion
jnr.ffi.StructLayout: boolean resetIndex
jnr.ffi.StructLayout: jnr.ffi.StructLayout enclosing
jnr.ffi.StructLayout: int offset
jnr.ffi.StructLayout: int size
jnr.ffi.StructLayout: int alignment
jnr.ffi.StructLayout: int paddedSize
jnr.ffi.StructLayout: StructLayout(jnr.ffi.Runtime)
jnr.ffi.StructLayout: StructLayout(jnr.ffi.Runtime,int)
jnr.ffi.StructLayout: jnr.ffi.Runtime getRuntime()
jnr.ffi.StructLayout: int size()
jnr.ffi.StructLayout: int alignment()
jnr.ffi.StructLayout: int offset()
jnr.ffi.StructLayout: jnr.ffi.NativeType getNativeType()
jnr.ffi.StructLayout: java.lang.String toString()
jnr.ffi.StructLayout: int align(int,int)
jnr.ffi.StructLayout: int addField(int,int)
jnr.ffi.StructLayout: int addField(int,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout: int addField(jnr.ffi.Type)
jnr.ffi.StructLayout: int addField(jnr.ffi.Type,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout: jnr.ffi.StructLayout$Offset at(int)
jnr.ffi.StructLayout: void arrayBegin()
jnr.ffi.StructLayout: void arrayEnd()
jnr.ffi.StructLayout: jnr.ffi.StructLayout$Field[] array(jnr.ffi.StructLayout$Field[])
jnr.ffi.StructLayout: jnr.ffi.StructLayout inner(jnr.ffi.StructLayout)
jnr.ffi.StructLayout: jnr.ffi.StructLayout$Function function(java.lang.Class)
jnr.ffi.StructLayout: jnr.ffi.StructLayout$Function function(java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout: void <clinit>()
jnr.ffi.StructLayout$AbstractBoolean
jnr.ffi.StructLayout$AbstractBoolean: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$AbstractBoolean: StructLayout$AbstractBoolean(jnr.ffi.StructLayout,jnr.ffi.NativeType)
jnr.ffi.StructLayout$AbstractBoolean: StructLayout$AbstractBoolean(jnr.ffi.StructLayout,jnr.ffi.NativeType,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AbstractBoolean: boolean get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$AbstractBoolean: void set(jnr.ffi.Pointer,boolean)
jnr.ffi.StructLayout$AbstractBoolean: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$AbstractField
jnr.ffi.StructLayout$AbstractField: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,int,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,int,int)
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,jnr.ffi.NativeType)
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,jnr.ffi.Type)
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,jnr.ffi.NativeType,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AbstractField: StructLayout$AbstractField(jnr.ffi.StructLayout,jnr.ffi.Type,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AsciiString
jnr.ffi.StructLayout$AsciiString: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$AsciiString: StructLayout$AsciiString(jnr.ffi.StructLayout,int)
jnr.ffi.StructLayout$AsciiString: StructLayout$AsciiString(jnr.ffi.StructLayout,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AsciiStringRef
jnr.ffi.StructLayout$AsciiStringRef: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$AsciiStringRef: StructLayout$AsciiStringRef(jnr.ffi.StructLayout,int)
jnr.ffi.StructLayout$AsciiStringRef: StructLayout$AsciiStringRef(jnr.ffi.StructLayout,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$AsciiStringRef: StructLayout$AsciiStringRef(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Boolean
jnr.ffi.StructLayout$Boolean: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Boolean: StructLayout$Boolean(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Boolean: StructLayout$Boolean(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Boolean: boolean get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Boolean: void set(jnr.ffi.Pointer,boolean)
jnr.ffi.StructLayout$Double
jnr.ffi.StructLayout$Double: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Double: StructLayout$Double(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Double: StructLayout$Double(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Double: double get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: void set(jnr.ffi.Pointer,double)
jnr.ffi.StructLayout$Double: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Double: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Double: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum
jnr.ffi.StructLayout$Enum: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Enum: StructLayout$Enum(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Enum: StructLayout$Enum(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Enum16
jnr.ffi.StructLayout$Enum16: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Enum16: StructLayout$Enum16(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Enum16: StructLayout$Enum16(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Enum16: void set(jnr.ffi.Pointer,java.lang.Enum)
jnr.ffi.StructLayout$Enum16: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Enum16: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum16: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32
jnr.ffi.StructLayout$Enum32: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Enum32: StructLayout$Enum32(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Enum32: StructLayout$Enum32(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Enum32: void set(jnr.ffi.Pointer,java.lang.Enum)
jnr.ffi.StructLayout$Enum32: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Enum32: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum32: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64
jnr.ffi.StructLayout$Enum64: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Enum64: StructLayout$Enum64(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Enum64: StructLayout$Enum64(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Enum64: void set(jnr.ffi.Pointer,java.lang.Enum)
jnr.ffi.StructLayout$Enum64: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Enum64: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum64: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8
jnr.ffi.StructLayout$Enum8: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Enum8: StructLayout$Enum8(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Enum8: StructLayout$Enum8(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Enum8: void set(jnr.ffi.Pointer,java.lang.Enum)
jnr.ffi.StructLayout$Enum8: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Enum8: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Enum8: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumField
jnr.ffi.StructLayout$EnumField: java.lang.Class enumClass
jnr.ffi.StructLayout$EnumField: jnr.ffi.util.EnumMapper enumMapper
jnr.ffi.StructLayout$EnumField: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$EnumField: StructLayout$EnumField(jnr.ffi.StructLayout,jnr.ffi.NativeType,java.lang.Class)
jnr.ffi.StructLayout$EnumField: StructLayout$EnumField(jnr.ffi.StructLayout,jnr.ffi.NativeType,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$EnumField: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumField: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong
jnr.ffi.StructLayout$EnumLong: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$EnumLong: StructLayout$EnumLong(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$EnumLong: StructLayout$EnumLong(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$EnumLong: void set(jnr.ffi.Pointer,java.lang.Enum)
jnr.ffi.StructLayout$EnumLong: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$EnumLong: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: java.lang.Enum get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$EnumLong: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Field
jnr.ffi.StructLayout$Field: int offset
jnr.ffi.StructLayout$Field: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Field: StructLayout$Field(jnr.ffi.StructLayout,int)
jnr.ffi.StructLayout$Field: jnr.ffi.StructLayout enclosing()
jnr.ffi.StructLayout$Field: long offset()
jnr.ffi.StructLayout$Float
jnr.ffi.StructLayout$Float: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Float: StructLayout$Float(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Float: StructLayout$Float(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Float: float get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: void set(jnr.ffi.Pointer,float)
jnr.ffi.StructLayout$Float: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Float: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Float: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Function
jnr.ffi.StructLayout$Function: java.lang.Class closureClass
jnr.ffi.StructLayout$Function: java.lang.Object instance
jnr.ffi.StructLayout$Function: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Function: StructLayout$Function(jnr.ffi.StructLayout,java.lang.Class)
jnr.ffi.StructLayout$Function: StructLayout$Function(jnr.ffi.StructLayout,java.lang.Class,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Function: void set(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.StructLayout$IntegerAlias
jnr.ffi.StructLayout$IntegerAlias: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$IntegerAlias: StructLayout$IntegerAlias(jnr.ffi.StructLayout,jnr.ffi.TypeAlias)
jnr.ffi.StructLayout$IntegerAlias: StructLayout$IntegerAlias(jnr.ffi.StructLayout,jnr.ffi.TypeAlias,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$IntegerAlias: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$IntegerAlias: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$IntegerAlias: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$IntegerAlias: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField
jnr.ffi.StructLayout$NumberField: jnr.ffi.Type type
jnr.ffi.StructLayout$NumberField: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$NumberField: StructLayout$NumberField(jnr.ffi.StructLayout,jnr.ffi.NativeType)
jnr.ffi.StructLayout$NumberField: StructLayout$NumberField(jnr.ffi.StructLayout,jnr.ffi.Type)
jnr.ffi.StructLayout$NumberField: StructLayout$NumberField(jnr.ffi.StructLayout,jnr.ffi.NativeType,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$NumberField: StructLayout$NumberField(jnr.ffi.StructLayout,jnr.ffi.Type,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$NumberField: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$NumberField: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$NumberField: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Offset
jnr.ffi.StructLayout$Offset: int offset
jnr.ffi.StructLayout$Offset: StructLayout$Offset(int)
jnr.ffi.StructLayout$Offset: int intValue()
jnr.ffi.StructLayout$Offset: long longValue()
jnr.ffi.StructLayout$Offset: float floatValue()
jnr.ffi.StructLayout$Offset: double doubleValue()
jnr.ffi.StructLayout$Padding
jnr.ffi.StructLayout$Padding: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Padding: StructLayout$Padding(jnr.ffi.StructLayout,jnr.ffi.Type,int)
jnr.ffi.StructLayout$Padding: StructLayout$Padding(jnr.ffi.StructLayout,jnr.ffi.Type,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Padding: StructLayout$Padding(jnr.ffi.StructLayout,jnr.ffi.NativeType,int)
jnr.ffi.StructLayout$Padding: StructLayout$Padding(jnr.ffi.StructLayout,jnr.ffi.NativeType,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Pointer
jnr.ffi.StructLayout$Pointer: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Pointer: StructLayout$Pointer(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Pointer: StructLayout$Pointer(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Pointer: jnr.ffi.Pointer get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: int size()
jnr.ffi.StructLayout$Pointer: void set(jnr.ffi.Pointer,jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Pointer: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Pointer: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16
jnr.ffi.StructLayout$Signed16: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Signed16: StructLayout$Signed16(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Signed16: StructLayout$Signed16(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Signed16: short get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: void set(jnr.ffi.Pointer,short)
jnr.ffi.StructLayout$Signed16: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Signed16: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed16: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32
jnr.ffi.StructLayout$Signed32: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Signed32: StructLayout$Signed32(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Signed32: StructLayout$Signed32(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Signed32: int get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: void set(jnr.ffi.Pointer,int)
jnr.ffi.StructLayout$Signed32: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Signed32: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed32: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64
jnr.ffi.StructLayout$Signed64: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Signed64: StructLayout$Signed64(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Signed64: StructLayout$Signed64(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Signed64: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$Signed64: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Signed64: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed64: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8
jnr.ffi.StructLayout$Signed8: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Signed8: StructLayout$Signed8(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Signed8: StructLayout$Signed8(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Signed8: byte get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: void set(jnr.ffi.Pointer,byte)
jnr.ffi.StructLayout$Signed8: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Signed8: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Signed8: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong
jnr.ffi.StructLayout$SignedLong: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$SignedLong: StructLayout$SignedLong(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$SignedLong: StructLayout$SignedLong(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$SignedLong: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$SignedLong: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$SignedLong: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$SignedLong: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$String
jnr.ffi.StructLayout$String: java.nio.charset.Charset charset
jnr.ffi.StructLayout$String: int length
jnr.ffi.StructLayout$String: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$String: StructLayout$String(jnr.ffi.StructLayout,int,int,int,java.nio.charset.Charset)
jnr.ffi.StructLayout$String: StructLayout$String(jnr.ffi.StructLayout,int,int,jnr.ffi.StructLayout$Offset,int,java.nio.charset.Charset)
jnr.ffi.StructLayout$String: int length()
jnr.ffi.StructLayout$String: jnr.ffi.Pointer getStringMemory(jnr.ffi.Pointer)
jnr.ffi.StructLayout$String: java.lang.String get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$String: void set(jnr.ffi.Pointer,java.lang.String)
jnr.ffi.StructLayout$String: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UTF8String
jnr.ffi.StructLayout$UTF8String: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$UTF8String: StructLayout$UTF8String(jnr.ffi.StructLayout,int)
jnr.ffi.StructLayout$UTF8String: StructLayout$UTF8String(jnr.ffi.StructLayout,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$UTF8StringRef
jnr.ffi.StructLayout$UTF8StringRef: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$UTF8StringRef: StructLayout$UTF8StringRef(jnr.ffi.StructLayout,int)
jnr.ffi.StructLayout$UTF8StringRef: StructLayout$UTF8StringRef(jnr.ffi.StructLayout,int,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$UTF8StringRef: StructLayout$UTF8StringRef(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$UTFString
jnr.ffi.StructLayout$UTFString: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$UTFString: StructLayout$UTFString(jnr.ffi.StructLayout,int,java.nio.charset.Charset)
jnr.ffi.StructLayout$UTFString: StructLayout$UTFString(jnr.ffi.StructLayout,int,java.nio.charset.Charset,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$UTFString: jnr.ffi.Pointer getStringMemory(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UTFString: java.lang.String get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UTFString: void set(jnr.ffi.Pointer,java.lang.String)
jnr.ffi.StructLayout$UTFStringRef
jnr.ffi.StructLayout$UTFStringRef: jnr.ffi.Pointer valueHolder
jnr.ffi.StructLayout$UTFStringRef: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$UTFStringRef: StructLayout$UTFStringRef(jnr.ffi.StructLayout,int,java.nio.charset.Charset)
jnr.ffi.StructLayout$UTFStringRef: StructLayout$UTFStringRef(jnr.ffi.StructLayout,int,java.nio.charset.Charset,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$UTFStringRef: StructLayout$UTFStringRef(jnr.ffi.StructLayout,java.nio.charset.Charset)
jnr.ffi.StructLayout$UTFStringRef: jnr.ffi.Pointer getStringMemory(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UTFStringRef: java.lang.String get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UTFStringRef: void set(jnr.ffi.Pointer,java.lang.String)
jnr.ffi.StructLayout$Unsigned16
jnr.ffi.StructLayout$Unsigned16: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Unsigned16: StructLayout$Unsigned16(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Unsigned16: StructLayout$Unsigned16(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Unsigned16: int get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: void set(jnr.ffi.Pointer,int)
jnr.ffi.StructLayout$Unsigned16: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Unsigned16: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned16: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32
jnr.ffi.StructLayout$Unsigned32: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Unsigned32: StructLayout$Unsigned32(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Unsigned32: StructLayout$Unsigned32(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Unsigned32: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$Unsigned32: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Unsigned32: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned32: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64
jnr.ffi.StructLayout$Unsigned64: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Unsigned64: StructLayout$Unsigned64(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Unsigned64: StructLayout$Unsigned64(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Unsigned64: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$Unsigned64: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Unsigned64: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned64: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8
jnr.ffi.StructLayout$Unsigned8: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$Unsigned8: StructLayout$Unsigned8(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$Unsigned8: StructLayout$Unsigned8(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$Unsigned8: short get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: void set(jnr.ffi.Pointer,short)
jnr.ffi.StructLayout$Unsigned8: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$Unsigned8: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$Unsigned8: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong
jnr.ffi.StructLayout$UnsignedLong: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$UnsignedLong: StructLayout$UnsignedLong(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$UnsignedLong: StructLayout$UnsignedLong(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$UnsignedLong: long get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: void set(jnr.ffi.Pointer,long)
jnr.ffi.StructLayout$UnsignedLong: void set(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.StructLayout$UnsignedLong: int intValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: long longValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: java.lang.String toString(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: short shortValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: byte byteValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: float floatValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$UnsignedLong: double doubleValue(jnr.ffi.Pointer)
jnr.ffi.StructLayout$WBOOL
jnr.ffi.StructLayout$WBOOL: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$WBOOL: StructLayout$WBOOL(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$WBOOL: StructLayout$WBOOL(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$WBOOL: boolean get(jnr.ffi.Pointer)
jnr.ffi.StructLayout$WBOOL: void set(jnr.ffi.Pointer,boolean)
jnr.ffi.StructLayout$blkcnt_t
jnr.ffi.StructLayout$blkcnt_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$blkcnt_t: StructLayout$blkcnt_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$blkcnt_t: StructLayout$blkcnt_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$blksize_t
jnr.ffi.StructLayout$blksize_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$blksize_t: StructLayout$blksize_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$blksize_t: StructLayout$blksize_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$caddr_t
jnr.ffi.StructLayout$caddr_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$caddr_t: StructLayout$caddr_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$caddr_t: StructLayout$caddr_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$clock_t
jnr.ffi.StructLayout$clock_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$clock_t: StructLayout$clock_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$clock_t: StructLayout$clock_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$dev_t
jnr.ffi.StructLayout$dev_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$dev_t: StructLayout$dev_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$dev_t: StructLayout$dev_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$fsblkcnt_t
jnr.ffi.StructLayout$fsblkcnt_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$fsblkcnt_t: StructLayout$fsblkcnt_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$fsblkcnt_t: StructLayout$fsblkcnt_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$fsfilcnt_t
jnr.ffi.StructLayout$fsfilcnt_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$fsfilcnt_t: StructLayout$fsfilcnt_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$fsfilcnt_t: StructLayout$fsfilcnt_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$gid_t
jnr.ffi.StructLayout$gid_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$gid_t: StructLayout$gid_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$gid_t: StructLayout$gid_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$id_t
jnr.ffi.StructLayout$id_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$id_t: StructLayout$id_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$id_t: StructLayout$id_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$in_addr_t
jnr.ffi.StructLayout$in_addr_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$in_addr_t: StructLayout$in_addr_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$in_addr_t: StructLayout$in_addr_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$in_port_t
jnr.ffi.StructLayout$in_port_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$in_port_t: StructLayout$in_port_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$in_port_t: StructLayout$in_port_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$ino64_t
jnr.ffi.StructLayout$ino64_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$ino64_t: StructLayout$ino64_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$ino64_t: StructLayout$ino64_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$ino_t
jnr.ffi.StructLayout$ino_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$ino_t: StructLayout$ino_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$ino_t: StructLayout$ino_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$int16_t
jnr.ffi.StructLayout$int16_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$int16_t: StructLayout$int16_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$int16_t: StructLayout$int16_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$int32_t
jnr.ffi.StructLayout$int32_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$int32_t: StructLayout$int32_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$int32_t: StructLayout$int32_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$int64_t
jnr.ffi.StructLayout$int64_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$int64_t: StructLayout$int64_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$int64_t: StructLayout$int64_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$int8_t
jnr.ffi.StructLayout$int8_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$int8_t: StructLayout$int8_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$int8_t: StructLayout$int8_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$intptr_t
jnr.ffi.StructLayout$intptr_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$intptr_t: StructLayout$intptr_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$intptr_t: StructLayout$intptr_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$key_t
jnr.ffi.StructLayout$key_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$key_t: StructLayout$key_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$key_t: StructLayout$key_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$mode_t
jnr.ffi.StructLayout$mode_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$mode_t: StructLayout$mode_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$mode_t: StructLayout$mode_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$nlink_t
jnr.ffi.StructLayout$nlink_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$nlink_t: StructLayout$nlink_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$nlink_t: StructLayout$nlink_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$off_t
jnr.ffi.StructLayout$off_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$off_t: StructLayout$off_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$off_t: StructLayout$off_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$pid_t
jnr.ffi.StructLayout$pid_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$pid_t: StructLayout$pid_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$pid_t: StructLayout$pid_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$rlim_t
jnr.ffi.StructLayout$rlim_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$rlim_t: StructLayout$rlim_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$rlim_t: StructLayout$rlim_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$sa_family_t
jnr.ffi.StructLayout$sa_family_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$sa_family_t: StructLayout$sa_family_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$sa_family_t: StructLayout$sa_family_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$size_t
jnr.ffi.StructLayout$size_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$size_t: StructLayout$size_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$size_t: StructLayout$size_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$socklen_t
jnr.ffi.StructLayout$socklen_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$socklen_t: StructLayout$socklen_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$socklen_t: StructLayout$socklen_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$ssize_t
jnr.ffi.StructLayout$ssize_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$ssize_t: StructLayout$ssize_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$ssize_t: StructLayout$ssize_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$swblk_t
jnr.ffi.StructLayout$swblk_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$swblk_t: StructLayout$swblk_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$swblk_t: StructLayout$swblk_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$time_t
jnr.ffi.StructLayout$time_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$time_t: StructLayout$time_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$time_t: StructLayout$time_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$u_int16_t
jnr.ffi.StructLayout$u_int16_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$u_int16_t: StructLayout$u_int16_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$u_int16_t: StructLayout$u_int16_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$u_int32_t
jnr.ffi.StructLayout$u_int32_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$u_int32_t: StructLayout$u_int32_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$u_int32_t: StructLayout$u_int32_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$u_int64_t
jnr.ffi.StructLayout$u_int64_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$u_int64_t: StructLayout$u_int64_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$u_int64_t: StructLayout$u_int64_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$u_int8_t
jnr.ffi.StructLayout$u_int8_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$u_int8_t: StructLayout$u_int8_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$u_int8_t: StructLayout$u_int8_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$uid_t
jnr.ffi.StructLayout$uid_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$uid_t: StructLayout$uid_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$uid_t: StructLayout$uid_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.StructLayout$uintptr_t
jnr.ffi.StructLayout$uintptr_t: jnr.ffi.StructLayout this$0
jnr.ffi.StructLayout$uintptr_t: StructLayout$uintptr_t(jnr.ffi.StructLayout)
jnr.ffi.StructLayout$uintptr_t: StructLayout$uintptr_t(jnr.ffi.StructLayout,jnr.ffi.StructLayout$Offset)
jnr.ffi.Type
jnr.ffi.Type: Type()
jnr.ffi.Type: int size()
jnr.ffi.Type: int alignment()
jnr.ffi.Type: jnr.ffi.NativeType getNativeType()
jnr.ffi.TypeAlias
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias int8_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias u_int8_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias int16_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias u_int16_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias int32_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias u_int32_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias int64_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias u_int64_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias intptr_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias uintptr_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias caddr_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias dev_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias blkcnt_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias blksize_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias gid_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias in_addr_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias in_port_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias ino_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias ino64_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias key_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias mode_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias nlink_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias id_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias pid_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias off_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias swblk_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias uid_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias clock_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias size_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias ssize_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias time_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias fsblkcnt_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias fsfilcnt_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias sa_family_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias socklen_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias rlim_t
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias[] $VALUES
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias[] values()
jnr.ffi.TypeAlias: jnr.ffi.TypeAlias valueOf(java.lang.String)
jnr.ffi.TypeAlias: TypeAlias(java.lang.String,int)
jnr.ffi.TypeAlias: void <clinit>()
jnr.ffi.Union
jnr.ffi.Union: Union(jnr.ffi.Runtime)
jnr.ffi.Variable
jnr.ffi.Variable: java.lang.Object get()
jnr.ffi.Variable: void set(java.lang.Object)
jnr.ffi.annotations.Clear
jnr.ffi.annotations.Delegate
jnr.ffi.annotations.Delegate: jnr.ffi.CallingConvention convention()
jnr.ffi.annotations.Direct
jnr.ffi.annotations.Encoding
jnr.ffi.annotations.Encoding: java.lang.String value()
jnr.ffi.annotations.IgnoreError
jnr.ffi.annotations.In
jnr.ffi.annotations.LongLong
jnr.ffi.annotations.NulTerminate
jnr.ffi.annotations.Out
jnr.ffi.annotations.Pinned
jnr.ffi.annotations.SaveError
jnr.ffi.annotations.StdCall
jnr.ffi.annotations.Synchronized
jnr.ffi.annotations.Transient
jnr.ffi.annotations.TypeDefinition
jnr.ffi.annotations.TypeDefinition: jnr.ffi.TypeAlias alias()
jnr.ffi.byref.AbstractNumberReference
jnr.ffi.byref.AbstractNumberReference: java.lang.Number value
jnr.ffi.byref.AbstractNumberReference: AbstractNumberReference(java.lang.Number)
jnr.ffi.byref.AbstractNumberReference: java.lang.Number checkNull(java.lang.Number)
jnr.ffi.byref.AbstractNumberReference: java.lang.Number getValue()
jnr.ffi.byref.AbstractNumberReference: byte byteValue()
jnr.ffi.byref.AbstractNumberReference: short shortValue()
jnr.ffi.byref.AbstractNumberReference: int intValue()
jnr.ffi.byref.AbstractNumberReference: long longValue()
jnr.ffi.byref.AbstractNumberReference: float floatValue()
jnr.ffi.byref.AbstractNumberReference: double doubleValue()
jnr.ffi.byref.AbstractNumberReference: java.lang.Object getValue()
jnr.ffi.byref.AbstractReference
jnr.ffi.byref.AbstractReference: java.lang.Object value
jnr.ffi.byref.AbstractReference: AbstractReference(java.lang.Object)
jnr.ffi.byref.AbstractReference: java.lang.Object checkNull(java.lang.Object)
jnr.ffi.byref.AbstractReference: java.lang.Object getValue()
jnr.ffi.byref.AddressByReference
jnr.ffi.byref.AddressByReference: AddressByReference()
jnr.ffi.byref.AddressByReference: AddressByReference(jnr.ffi.Address)
jnr.ffi.byref.AddressByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.AddressByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.AddressByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.ByReference
jnr.ffi.byref.ByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.ByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ByReference: java.lang.Object getValue()
jnr.ffi.byref.ByteByReference
jnr.ffi.byref.ByteByReference: ByteByReference()
jnr.ffi.byref.ByteByReference: ByteByReference(java.lang.Byte)
jnr.ffi.byref.ByteByReference: ByteByReference(byte)
jnr.ffi.byref.ByteByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ByteByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ByteByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.DoubleByReference
jnr.ffi.byref.DoubleByReference: java.lang.Double DEFAULT
jnr.ffi.byref.DoubleByReference: DoubleByReference()
jnr.ffi.byref.DoubleByReference: DoubleByReference(java.lang.Double)
jnr.ffi.byref.DoubleByReference: DoubleByReference(double)
jnr.ffi.byref.DoubleByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.DoubleByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.DoubleByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.DoubleByReference: void <clinit>()
jnr.ffi.byref.FloatByReference
jnr.ffi.byref.FloatByReference: java.lang.Float DEFAULT
jnr.ffi.byref.FloatByReference: FloatByReference()
jnr.ffi.byref.FloatByReference: FloatByReference(java.lang.Float)
jnr.ffi.byref.FloatByReference: FloatByReference(float)
jnr.ffi.byref.FloatByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.FloatByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.FloatByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.FloatByReference: void <clinit>()
jnr.ffi.byref.IntByReference
jnr.ffi.byref.IntByReference: IntByReference()
jnr.ffi.byref.IntByReference: IntByReference(java.lang.Integer)
jnr.ffi.byref.IntByReference: IntByReference(int)
jnr.ffi.byref.IntByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.IntByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.IntByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.LongLongByReference
jnr.ffi.byref.LongLongByReference: LongLongByReference()
jnr.ffi.byref.LongLongByReference: LongLongByReference(java.lang.Long)
jnr.ffi.byref.LongLongByReference: LongLongByReference(long)
jnr.ffi.byref.LongLongByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.LongLongByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.LongLongByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.NativeLongByReference
jnr.ffi.byref.NativeLongByReference: NativeLongByReference()
jnr.ffi.byref.NativeLongByReference: NativeLongByReference(jnr.ffi.NativeLong)
jnr.ffi.byref.NativeLongByReference: NativeLongByReference(long)
jnr.ffi.byref.NativeLongByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.NativeLongByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.NativeLongByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.NumberByReference
jnr.ffi.byref.NumberByReference: jnr.ffi.TypeAlias typeAlias
jnr.ffi.byref.NumberByReference: NumberByReference(jnr.ffi.TypeAlias,java.lang.Number)
jnr.ffi.byref.NumberByReference: NumberByReference(jnr.ffi.TypeAlias)
jnr.ffi.byref.NumberByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.NumberByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.NumberByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.NumberByReference$1
jnr.ffi.byref.NumberByReference$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.byref.NumberByReference$1: void <clinit>()
jnr.ffi.byref.PointerByReference
jnr.ffi.byref.PointerByReference: PointerByReference()
jnr.ffi.byref.PointerByReference: PointerByReference(jnr.ffi.Pointer)
jnr.ffi.byref.PointerByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.PointerByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.PointerByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.byref.ShortByReference
jnr.ffi.byref.ShortByReference: ShortByReference()
jnr.ffi.byref.ShortByReference: ShortByReference(java.lang.Short)
jnr.ffi.byref.ShortByReference: ShortByReference(short)
jnr.ffi.byref.ShortByReference: void toNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ShortByReference: void fromNative(jnr.ffi.Runtime,jnr.ffi.Pointer,long)
jnr.ffi.byref.ShortByReference: int nativeSize(jnr.ffi.Runtime)
jnr.ffi.mapper.AbstractDataConverter
jnr.ffi.mapper.AbstractDataConverter: AbstractDataConverter()
jnr.ffi.mapper.AbstractFromNativeType
jnr.ffi.mapper.AbstractFromNativeType: jnr.ffi.mapper.FromNativeConverter converter
jnr.ffi.mapper.AbstractFromNativeType: AbstractFromNativeType(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.AbstractFromNativeType: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter()
jnr.ffi.mapper.AbstractSignatureTypeMapper
jnr.ffi.mapper.AbstractSignatureTypeMapper: AbstractSignatureTypeMapper()
jnr.ffi.mapper.AbstractSignatureTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.AbstractSignatureTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.AbstractToNativeType
jnr.ffi.mapper.AbstractToNativeType: jnr.ffi.mapper.ToNativeConverter converter
jnr.ffi.mapper.AbstractToNativeType: AbstractToNativeType(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.AbstractToNativeType: jnr.ffi.mapper.ToNativeConverter getToNativeConverter()
jnr.ffi.mapper.CachingTypeMapper
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.SignatureTypeMapper mapper
jnr.ffi.mapper.CachingTypeMapper: java.util.Map toNativeTypeMap
jnr.ffi.mapper.CachingTypeMapper: java.util.Map fromNativeTypeMap
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.CachingTypeMapper$InvalidType UNCACHEABLE_TYPE
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.CachingTypeMapper$InvalidType NO_TYPE
jnr.ffi.mapper.CachingTypeMapper: CachingTypeMapper(jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.FromNativeType lookupAndCacheFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.CachingTypeMapper: jnr.ffi.mapper.ToNativeType lookupAndCacheToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.CachingTypeMapper: void <clinit>()
jnr.ffi.mapper.CachingTypeMapper$1
jnr.ffi.mapper.CachingTypeMapper$InvalidType
jnr.ffi.mapper.CachingTypeMapper$InvalidType: CachingTypeMapper$InvalidType()
jnr.ffi.mapper.CachingTypeMapper$InvalidType: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter()
jnr.ffi.mapper.CachingTypeMapper$InvalidType: jnr.ffi.mapper.ToNativeConverter getToNativeConverter()
jnr.ffi.mapper.CachingTypeMapper$InvalidType: CachingTypeMapper$InvalidType(jnr.ffi.mapper.CachingTypeMapper$1)
jnr.ffi.mapper.CompositeFunctionMapper
jnr.ffi.mapper.CompositeFunctionMapper: java.util.Collection functionMappers
jnr.ffi.mapper.CompositeFunctionMapper: CompositeFunctionMapper(java.util.Collection)
jnr.ffi.mapper.CompositeFunctionMapper: java.lang.String mapFunctionName(java.lang.String,jnr.ffi.mapper.FunctionMapper$Context)
jnr.ffi.mapper.CompositeTypeMapper
jnr.ffi.mapper.CompositeTypeMapper: java.util.Collection signatureTypeMappers
jnr.ffi.mapper.CompositeTypeMapper: CompositeTypeMapper(jnr.ffi.mapper.SignatureTypeMapper[])
jnr.ffi.mapper.CompositeTypeMapper: CompositeTypeMapper(java.util.Collection)
jnr.ffi.mapper.CompositeTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.CompositeTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.DataConverter
jnr.ffi.mapper.DefaultSignatureType
jnr.ffi.mapper.DefaultSignatureType: java.lang.Class declaredClass
jnr.ffi.mapper.DefaultSignatureType: java.util.Collection annotations
jnr.ffi.mapper.DefaultSignatureType: java.lang.reflect.Type genericType
jnr.ffi.mapper.DefaultSignatureType: DefaultSignatureType(java.lang.Class,java.util.Collection,java.lang.reflect.Type)
jnr.ffi.mapper.DefaultSignatureType: java.lang.Class getDeclaredType()
jnr.ffi.mapper.DefaultSignatureType: java.util.Collection getAnnotations()
jnr.ffi.mapper.DefaultSignatureType: java.lang.reflect.Type getGenericType()
jnr.ffi.mapper.DefaultSignatureType: boolean equals(java.lang.Object)
jnr.ffi.mapper.DefaultSignatureType: int hashCode()
jnr.ffi.mapper.DefaultSignatureType: jnr.ffi.mapper.DefaultSignatureType create(java.lang.Class,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.DefaultSignatureType: jnr.ffi.mapper.DefaultSignatureType create(java.lang.Class,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.DefaultTypeMapper
jnr.ffi.mapper.DefaultTypeMapper: java.util.Map toNativeConverters
jnr.ffi.mapper.DefaultTypeMapper: java.util.Map fromNativeConverters
jnr.ffi.mapper.DefaultTypeMapper: DefaultTypeMapper()
jnr.ffi.mapper.DefaultTypeMapper: void put(java.lang.Class,jnr.ffi.mapper.DataConverter)
jnr.ffi.mapper.DefaultTypeMapper: void put(java.lang.Class,jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.DefaultTypeMapper: void put(java.lang.Class,jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.DefaultTypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(java.lang.Class)
jnr.ffi.mapper.DefaultTypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(java.lang.Class)
jnr.ffi.mapper.FromNativeContext
jnr.ffi.mapper.FromNativeContext: java.util.Collection getAnnotations()
jnr.ffi.mapper.FromNativeContext: jnr.ffi.Runtime getRuntime()
jnr.ffi.mapper.FromNativeConverter
jnr.ffi.mapper.FromNativeConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.FromNativeConverter: java.lang.Class nativeType()
jnr.ffi.mapper.FromNativeConverter$Cacheable
jnr.ffi.mapper.FromNativeConverter$FromNative
jnr.ffi.mapper.FromNativeConverter$FromNative: java.lang.Class nativeType()
jnr.ffi.mapper.FromNativeConverter$NoContext
jnr.ffi.mapper.FromNativeType
jnr.ffi.mapper.FromNativeType: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter()
jnr.ffi.mapper.FromNativeType$Cacheable
jnr.ffi.mapper.FromNativeTypes
jnr.ffi.mapper.FromNativeTypes: FromNativeTypes()
jnr.ffi.mapper.FromNativeTypes: jnr.ffi.mapper.FromNativeType create(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.FromNativeTypes$Cacheable
jnr.ffi.mapper.FromNativeTypes$Cacheable: FromNativeTypes$Cacheable(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.FromNativeTypes$UnCacheable
jnr.ffi.mapper.FromNativeTypes$UnCacheable: FromNativeTypes$UnCacheable(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.FunctionMapper
jnr.ffi.mapper.FunctionMapper: jnr.ffi.mapper.FunctionMapper IDENTITY
jnr.ffi.mapper.FunctionMapper: java.lang.String mapFunctionName(java.lang.String,jnr.ffi.mapper.FunctionMapper$Context)
jnr.ffi.mapper.FunctionMapper: void <clinit>()
jnr.ffi.mapper.FunctionMapper$1
jnr.ffi.mapper.FunctionMapper$1: FunctionMapper$1()
jnr.ffi.mapper.FunctionMapper$1: java.lang.String mapFunctionName(java.lang.String,jnr.ffi.mapper.FunctionMapper$Context)
jnr.ffi.mapper.FunctionMapper$Builder
jnr.ffi.mapper.FunctionMapper$Builder: java.util.Map functionNameMap
jnr.ffi.mapper.FunctionMapper$Builder: FunctionMapper$Builder()
jnr.ffi.mapper.FunctionMapper$Builder: jnr.ffi.mapper.FunctionMapper$Builder map(java.lang.String,java.lang.String)
jnr.ffi.mapper.FunctionMapper$Builder: jnr.ffi.mapper.FunctionMapper build()
jnr.ffi.mapper.FunctionMapper$Context
jnr.ffi.mapper.FunctionMapper$Context: jnr.ffi.Library getLibrary()
jnr.ffi.mapper.FunctionMapper$Context: boolean isSymbolPresent(java.lang.String)
jnr.ffi.mapper.FunctionMapper$Context: java.util.Collection getAnnotations()
jnr.ffi.mapper.MethodParameterContext
jnr.ffi.mapper.MethodParameterContext: jnr.ffi.Runtime runtime
jnr.ffi.mapper.MethodParameterContext: java.lang.reflect.Method method
jnr.ffi.mapper.MethodParameterContext: int parameterIndex
jnr.ffi.mapper.MethodParameterContext: java.util.Collection annotations
jnr.ffi.mapper.MethodParameterContext: java.lang.annotation.Annotation[] annotationArray
jnr.ffi.mapper.MethodParameterContext: MethodParameterContext(jnr.ffi.Runtime,java.lang.reflect.Method,int)
jnr.ffi.mapper.MethodParameterContext: MethodParameterContext(jnr.ffi.Runtime,java.lang.reflect.Method,int,java.lang.annotation.Annotation[])
jnr.ffi.mapper.MethodParameterContext: MethodParameterContext(jnr.ffi.Runtime,java.lang.reflect.Method,int,java.util.Collection)
jnr.ffi.mapper.MethodParameterContext: java.lang.reflect.Method getMethod()
jnr.ffi.mapper.MethodParameterContext: int getParameterIndex()
jnr.ffi.mapper.MethodParameterContext: java.util.Collection getAnnotations()
jnr.ffi.mapper.MethodParameterContext: jnr.ffi.Runtime getRuntime()
jnr.ffi.mapper.MethodParameterContext: java.util.Collection buildAnnotationCollection()
jnr.ffi.mapper.MethodParameterContext: boolean equals(java.lang.Object)
jnr.ffi.mapper.MethodParameterContext: int hashCode()
jnr.ffi.mapper.MethodResultContext
jnr.ffi.mapper.MethodResultContext: jnr.ffi.Runtime runtime
jnr.ffi.mapper.MethodResultContext: java.lang.reflect.Method method
jnr.ffi.mapper.MethodResultContext: java.util.Collection annotations
jnr.ffi.mapper.MethodResultContext: MethodResultContext(jnr.ffi.Runtime,java.lang.reflect.Method)
jnr.ffi.mapper.MethodResultContext: java.lang.reflect.Method getMethod()
jnr.ffi.mapper.MethodResultContext: java.util.Collection getAnnotations()
jnr.ffi.mapper.MethodResultContext: jnr.ffi.Runtime getRuntime()
jnr.ffi.mapper.SignatureType
jnr.ffi.mapper.SignatureType: java.lang.Class getDeclaredType()
jnr.ffi.mapper.SignatureType: java.util.Collection getAnnotations()
jnr.ffi.mapper.SignatureType: java.lang.reflect.Type getGenericType()
jnr.ffi.mapper.SignatureTypeMapper
jnr.ffi.mapper.SignatureTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.SignatureTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.SignatureTypeMapperAdapter
jnr.ffi.mapper.SignatureTypeMapperAdapter: jnr.ffi.mapper.TypeMapper typeMapper
jnr.ffi.mapper.SignatureTypeMapperAdapter: SignatureTypeMapperAdapter(jnr.ffi.mapper.TypeMapper)
jnr.ffi.mapper.SignatureTypeMapperAdapter: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.mapper.SignatureTypeMapperAdapter: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.SimpleFunctionMapper
jnr.ffi.mapper.SimpleFunctionMapper: java.util.Map functionNameMap
jnr.ffi.mapper.SimpleFunctionMapper: SimpleFunctionMapper(java.util.Map)
jnr.ffi.mapper.SimpleFunctionMapper: java.lang.String mapFunctionName(java.lang.String,jnr.ffi.mapper.FunctionMapper$Context)
jnr.ffi.mapper.SimpleTypeMapper
jnr.ffi.mapper.SimpleTypeMapper: java.util.Map toNativeConverters
jnr.ffi.mapper.SimpleTypeMapper: java.util.Map fromNativeConverters
jnr.ffi.mapper.SimpleTypeMapper: SimpleTypeMapper(java.util.Map,java.util.Map)
jnr.ffi.mapper.SimpleTypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(java.lang.Class)
jnr.ffi.mapper.SimpleTypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(java.lang.Class)
jnr.ffi.mapper.ToNativeContext
jnr.ffi.mapper.ToNativeContext: java.util.Collection getAnnotations()
jnr.ffi.mapper.ToNativeContext: jnr.ffi.Runtime getRuntime()
jnr.ffi.mapper.ToNativeConverter
jnr.ffi.mapper.ToNativeConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.ToNativeConverter: java.lang.Class nativeType()
jnr.ffi.mapper.ToNativeConverter$Cacheable
jnr.ffi.mapper.ToNativeConverter$NoContext
jnr.ffi.mapper.ToNativeConverter$PostInvocation
jnr.ffi.mapper.ToNativeConverter$PostInvocation: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.mapper.ToNativeConverter$ToNative
jnr.ffi.mapper.ToNativeConverter$ToNative: java.lang.Class nativeType()
jnr.ffi.mapper.ToNativeType
jnr.ffi.mapper.ToNativeType: jnr.ffi.mapper.ToNativeConverter getToNativeConverter()
jnr.ffi.mapper.ToNativeType$Cacheable
jnr.ffi.mapper.ToNativeTypes
jnr.ffi.mapper.ToNativeTypes: ToNativeTypes()
jnr.ffi.mapper.ToNativeTypes: jnr.ffi.mapper.ToNativeType create(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.ToNativeTypes$Cacheable
jnr.ffi.mapper.ToNativeTypes$Cacheable: ToNativeTypes$Cacheable(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.ToNativeTypes$UnCacheable
jnr.ffi.mapper.ToNativeTypes$UnCacheable: ToNativeTypes$UnCacheable(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.TypeMapper
jnr.ffi.mapper.TypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(java.lang.Class)
jnr.ffi.mapper.TypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(java.lang.Class)
jnr.ffi.mapper.TypeMapper$Builder
jnr.ffi.mapper.TypeMapper$Builder: java.util.Map toNativeConverterMap
jnr.ffi.mapper.TypeMapper$Builder: java.util.Map fromNativeConverterMap
jnr.ffi.mapper.TypeMapper$Builder: TypeMapper$Builder()
jnr.ffi.mapper.TypeMapper$Builder: jnr.ffi.mapper.TypeMapper$Builder map(java.lang.Class,jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.mapper.TypeMapper$Builder: jnr.ffi.mapper.TypeMapper$Builder map(java.lang.Class,jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.mapper.TypeMapper$Builder: jnr.ffi.mapper.TypeMapper$Builder map(java.lang.Class,jnr.ffi.mapper.DataConverter)
jnr.ffi.mapper.TypeMapper$Builder: jnr.ffi.mapper.TypeMapper build()
jnr.ffi.mapper.Util
jnr.ffi.mapper.Util: Util()
jnr.ffi.provider.AbstractArrayMemoryIO
jnr.ffi.provider.AbstractArrayMemoryIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO io
jnr.ffi.provider.AbstractArrayMemoryIO: byte[] buffer
jnr.ffi.provider.AbstractArrayMemoryIO: int offset
jnr.ffi.provider.AbstractArrayMemoryIO: int length
jnr.ffi.provider.AbstractArrayMemoryIO: AbstractArrayMemoryIO(jnr.ffi.Runtime,byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: AbstractArrayMemoryIO(jnr.ffi.Runtime,byte[])
jnr.ffi.provider.AbstractArrayMemoryIO: AbstractArrayMemoryIO(jnr.ffi.Runtime,int)
jnr.ffi.provider.AbstractArrayMemoryIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO getArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO: byte[] array()
jnr.ffi.provider.AbstractArrayMemoryIO: int offset()
jnr.ffi.provider.AbstractArrayMemoryIO: int length()
jnr.ffi.provider.AbstractArrayMemoryIO: int arrayLength()
jnr.ffi.provider.AbstractArrayMemoryIO: int arrayOffset()
jnr.ffi.provider.AbstractArrayMemoryIO: boolean hasArray()
jnr.ffi.provider.AbstractArrayMemoryIO: long size()
jnr.ffi.provider.AbstractArrayMemoryIO: int index(long)
jnr.ffi.provider.AbstractArrayMemoryIO: int remaining(long)
jnr.ffi.provider.AbstractArrayMemoryIO: boolean isNull()
jnr.ffi.provider.AbstractArrayMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.AbstractArrayMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.AbstractArrayMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.AbstractArrayMemoryIO: void putZeroTerminatedByteArray(long,byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: byte getByte(long)
jnr.ffi.provider.AbstractArrayMemoryIO: short getShort(long)
jnr.ffi.provider.AbstractArrayMemoryIO: int getInt(long)
jnr.ffi.provider.AbstractArrayMemoryIO: long getLongLong(long)
jnr.ffi.provider.AbstractArrayMemoryIO: long getAddress(long)
jnr.ffi.provider.AbstractArrayMemoryIO: float getFloat(long)
jnr.ffi.provider.AbstractArrayMemoryIO: double getDouble(long)
jnr.ffi.provider.AbstractArrayMemoryIO: void putByte(long,byte)
jnr.ffi.provider.AbstractArrayMemoryIO: void putShort(long,short)
jnr.ffi.provider.AbstractArrayMemoryIO: void putInt(long,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.AbstractArrayMemoryIO: void putAddress(long,long)
jnr.ffi.provider.AbstractArrayMemoryIO: void putFloat(long,float)
jnr.ffi.provider.AbstractArrayMemoryIO: void putDouble(long,double)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO: int indexOf(long,byte)
jnr.ffi.provider.AbstractArrayMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.AbstractArrayMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.AbstractArrayMemoryIO: void clear()
jnr.ffi.provider.AbstractArrayMemoryIO: java.lang.Object array()
jnr.ffi.provider.AbstractArrayMemoryIO$1
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: AbstractArrayMemoryIO$ArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO getArrayIO(jnr.ffi.Runtime)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: short getInt16(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: int getInt32(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: long getInt64(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: long getAddress(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putInt16(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putInt32(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putInt64(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putAddress(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: float getFloat32(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putFloat32(byte[],int,float)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: double getFloat64(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO: void putFloat64(byte[],int,double)
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO INSTANCE
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO: AbstractArrayMemoryIO$BE32ArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO: long getAddress(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO: void putAddress(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$BE32ArrayIO: void <clinit>()
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO INSTANCE
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO: AbstractArrayMemoryIO$BE64ArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO: long getAddress(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO: void putAddress(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$BE64ArrayIO: void <clinit>()
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: AbstractArrayMemoryIO$BigEndianArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: short getInt16(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: int getInt32(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: long getInt64(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: void putInt16(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: void putInt32(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: void putInt64(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$BigEndianArrayIO: AbstractArrayMemoryIO$BigEndianArrayIO(jnr.ffi.provider.AbstractArrayMemoryIO$1)
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO INSTANCE
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO: AbstractArrayMemoryIO$LE32ArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO: long getAddress(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO: void putAddress(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$LE32ArrayIO: void <clinit>()
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO: jnr.ffi.provider.AbstractArrayMemoryIO$ArrayIO INSTANCE
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO: AbstractArrayMemoryIO$LE64ArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO: long getAddress(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO: void putAddress(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$LE64ArrayIO: void <clinit>()
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: AbstractArrayMemoryIO$LittleEndianArrayIO()
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: short getInt16(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: int getInt32(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: long getInt64(byte[],int)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: void putInt16(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: void putInt32(byte[],int,int)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: void putInt64(byte[],int,long)
jnr.ffi.provider.AbstractArrayMemoryIO$LittleEndianArrayIO: AbstractArrayMemoryIO$LittleEndianArrayIO(jnr.ffi.provider.AbstractArrayMemoryIO$1)
jnr.ffi.provider.AbstractBufferMemoryIO
jnr.ffi.provider.AbstractBufferMemoryIO: java.nio.ByteBuffer buffer
jnr.ffi.provider.AbstractBufferMemoryIO: AbstractBufferMemoryIO(jnr.ffi.Runtime,java.nio.ByteBuffer,long)
jnr.ffi.provider.AbstractBufferMemoryIO: long size()
jnr.ffi.provider.AbstractBufferMemoryIO: java.nio.ByteBuffer getByteBuffer()
jnr.ffi.provider.AbstractBufferMemoryIO: int arrayLength()
jnr.ffi.provider.AbstractBufferMemoryIO: int arrayOffset()
jnr.ffi.provider.AbstractBufferMemoryIO: java.lang.Object array()
jnr.ffi.provider.AbstractBufferMemoryIO: boolean hasArray()
jnr.ffi.provider.AbstractBufferMemoryIO: byte getByte(long)
jnr.ffi.provider.AbstractBufferMemoryIO: short getShort(long)
jnr.ffi.provider.AbstractBufferMemoryIO: int getInt(long)
jnr.ffi.provider.AbstractBufferMemoryIO: long getLongLong(long)
jnr.ffi.provider.AbstractBufferMemoryIO: float getFloat(long)
jnr.ffi.provider.AbstractBufferMemoryIO: double getDouble(long)
jnr.ffi.provider.AbstractBufferMemoryIO: void putByte(long,byte)
jnr.ffi.provider.AbstractBufferMemoryIO: void putShort(long,short)
jnr.ffi.provider.AbstractBufferMemoryIO: void putInt(long,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.AbstractBufferMemoryIO: void putFloat(long,float)
jnr.ffi.provider.AbstractBufferMemoryIO: void putDouble(long,double)
jnr.ffi.provider.AbstractBufferMemoryIO: java.lang.String getString(long,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void putString(long,java.lang.String)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.AbstractBufferMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.AbstractBufferMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.AbstractBufferMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.AbstractBufferMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.AbstractBufferMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.AbstractMemoryIO
jnr.ffi.provider.AbstractMemoryIO: void checkBounds(long,long,long)
jnr.ffi.provider.AbstractMemoryIO: AbstractMemoryIO(jnr.ffi.Runtime,long,boolean)
jnr.ffi.provider.AbstractMemoryIO: int indexOf(long,byte)
jnr.ffi.provider.AbstractMemoryIO: long getAddress(long)
jnr.ffi.provider.AbstractMemoryIO: void putAddress(long,long)
jnr.ffi.provider.AbstractMemoryIO: void checkBounds(long,long)
jnr.ffi.provider.AbstractMemoryIO: void putAddress(long,jnr.ffi.Address)
jnr.ffi.provider.AbstractMemoryIO: long getNativeLong(long)
jnr.ffi.provider.AbstractMemoryIO: void putNativeLong(long,long)
jnr.ffi.provider.AbstractMemoryIO: long getLong(long)
jnr.ffi.provider.AbstractMemoryIO: void putLong(long,long)
jnr.ffi.provider.AbstractMemoryIO: void putInt(jnr.ffi.Type,long,long)
jnr.ffi.provider.AbstractMemoryIO: long getInt(jnr.ffi.Type,long)
jnr.ffi.provider.AbstractMemoryIO: jnr.ffi.provider.AbstractMemoryIO slice(long)
jnr.ffi.provider.AbstractMemoryIO: jnr.ffi.provider.AbstractMemoryIO slice(long,long)
jnr.ffi.provider.AbstractMemoryIO: void transferTo(long,jnr.ffi.Pointer,long,long)
jnr.ffi.provider.AbstractMemoryIO: void transferFrom(long,jnr.ffi.Pointer,long,long)
jnr.ffi.provider.AbstractMemoryIO: jnr.ffi.Pointer slice(long,long)
jnr.ffi.provider.AbstractMemoryIO: jnr.ffi.Pointer slice(long)
jnr.ffi.provider.AbstractMemoryIO$1
jnr.ffi.provider.AbstractMemoryIO$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.AbstractMemoryIO$1: void <clinit>()
jnr.ffi.provider.AbstractRuntime
jnr.ffi.provider.AbstractRuntime: jnr.ffi.Type[] types
jnr.ffi.provider.AbstractRuntime: long addressMask
jnr.ffi.provider.AbstractRuntime: int addressSize
jnr.ffi.provider.AbstractRuntime: int longSize
jnr.ffi.provider.AbstractRuntime: java.nio.ByteOrder byteOrder
jnr.ffi.provider.AbstractRuntime: AbstractRuntime(java.nio.ByteOrder,java.util.EnumMap)
jnr.ffi.provider.AbstractRuntime: jnr.ffi.Type findType(jnr.ffi.NativeType)
jnr.ffi.provider.AbstractRuntime: jnr.ffi.provider.MemoryManager getMemoryManager()
jnr.ffi.provider.AbstractRuntime: int getLastError()
jnr.ffi.provider.AbstractRuntime: void setLastError(int)
jnr.ffi.provider.AbstractRuntime: long addressMask()
jnr.ffi.provider.AbstractRuntime: int addressSize()
jnr.ffi.provider.AbstractRuntime: int longSize()
jnr.ffi.provider.AbstractRuntime: java.nio.ByteOrder byteOrder()
jnr.ffi.provider.BadType
jnr.ffi.provider.BadType: java.lang.String typeName
jnr.ffi.provider.BadType: BadType(java.lang.String)
jnr.ffi.provider.BadType: int alignment()
jnr.ffi.provider.BadType: int size()
jnr.ffi.provider.BadType: jnr.ffi.NativeType getNativeType()
jnr.ffi.provider.BoundedMemoryIO
jnr.ffi.provider.BoundedMemoryIO: long base
jnr.ffi.provider.BoundedMemoryIO: long size
jnr.ffi.provider.BoundedMemoryIO: jnr.ffi.Pointer io
jnr.ffi.provider.BoundedMemoryIO: BoundedMemoryIO(jnr.ffi.Pointer,long,long)
jnr.ffi.provider.BoundedMemoryIO: long size()
jnr.ffi.provider.BoundedMemoryIO: boolean hasArray()
jnr.ffi.provider.BoundedMemoryIO: java.lang.Object array()
jnr.ffi.provider.BoundedMemoryIO: int arrayOffset()
jnr.ffi.provider.BoundedMemoryIO: int arrayLength()
jnr.ffi.provider.BoundedMemoryIO: void checkBounds(long,long)
jnr.ffi.provider.BoundedMemoryIO: jnr.ffi.Pointer getDelegatedMemoryIO()
jnr.ffi.provider.BoundedMemoryIO: int hashCode()
jnr.ffi.provider.BoundedMemoryIO: boolean equals(java.lang.Object)
jnr.ffi.provider.BoundedMemoryIO: byte getByte(long)
jnr.ffi.provider.BoundedMemoryIO: short getShort(long)
jnr.ffi.provider.BoundedMemoryIO: int getInt(long)
jnr.ffi.provider.BoundedMemoryIO: long getLongLong(long)
jnr.ffi.provider.BoundedMemoryIO: float getFloat(long)
jnr.ffi.provider.BoundedMemoryIO: double getDouble(long)
jnr.ffi.provider.BoundedMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.BoundedMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.BoundedMemoryIO: void putByte(long,byte)
jnr.ffi.provider.BoundedMemoryIO: void putShort(long,short)
jnr.ffi.provider.BoundedMemoryIO: void putInt(long,int)
jnr.ffi.provider.BoundedMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.BoundedMemoryIO: void putFloat(long,float)
jnr.ffi.provider.BoundedMemoryIO: void putDouble(long,double)
jnr.ffi.provider.BoundedMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.BoundedMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.BoundedMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.BoundedMemoryIO: long getAddress(long)
jnr.ffi.provider.BoundedMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.BoundedMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.BoundedMemoryIO: void putAddress(long,long)
jnr.ffi.provider.BoundedMemoryIO: void putAddress(long,jnr.ffi.Address)
jnr.ffi.provider.BoundedMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.BoundedMemoryIO: int indexOf(long,byte)
jnr.ffi.provider.BoundedMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.BoundedMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.BoundedMemoryIO: void transferFrom(long,jnr.ffi.Pointer,long,long)
jnr.ffi.provider.BoundedMemoryIO: void transferTo(long,jnr.ffi.Pointer,long,long)
jnr.ffi.provider.ClosureManager
jnr.ffi.provider.ClosureManager: java.lang.Object newClosure(java.lang.Class,java.lang.Object)
jnr.ffi.provider.ClosureManager: jnr.ffi.Pointer getClosurePointer(java.lang.Class,java.lang.Object)
jnr.ffi.provider.DefaultObjectReferenceManager
jnr.ffi.provider.DefaultObjectReferenceManager: jnr.ffi.Runtime runtime
jnr.ffi.provider.DefaultObjectReferenceManager: java.util.concurrent.ConcurrentMap references
jnr.ffi.provider.DefaultObjectReferenceManager: DefaultObjectReferenceManager(jnr.ffi.Runtime)
jnr.ffi.provider.DefaultObjectReferenceManager: jnr.ffi.Pointer add(java.lang.Object)
jnr.ffi.provider.DefaultObjectReferenceManager: boolean remove(jnr.ffi.Pointer)
jnr.ffi.provider.DefaultObjectReferenceManager: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.DefaultObjectReferenceManager: long id(java.lang.Object)
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: java.lang.Object referent
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: DefaultObjectReferenceManager$ObjectReference(jnr.ffi.Runtime,long,java.lang.Object)
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: long size()
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: int hashCode()
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: boolean equals(java.lang.Object)
jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference: java.lang.Object access$000(jnr.ffi.provider.DefaultObjectReferenceManager$ObjectReference)
jnr.ffi.provider.DelegatingMemoryIO
jnr.ffi.provider.DelegatingMemoryIO: jnr.ffi.Pointer getDelegatedMemoryIO()
jnr.ffi.provider.FFIProvider
jnr.ffi.provider.FFIProvider: jnr.ffi.provider.FFIProvider getSystemProvider()
jnr.ffi.provider.FFIProvider: FFIProvider()
jnr.ffi.provider.FFIProvider: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.FFIProvider: jnr.ffi.LibraryLoader createLibraryLoader(java.lang.Class)
jnr.ffi.provider.FFIProvider: jnr.ffi.provider.FFIProvider newInvalidProvider(java.lang.String,java.lang.Throwable)
jnr.ffi.provider.FFIProvider: jnr.ffi.provider.FFIProvider access$100(java.lang.String,java.lang.Throwable)
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder: jnr.ffi.provider.FFIProvider INSTANCE
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder: FFIProvider$SystemProviderSingletonHolder()
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder: jnr.ffi.provider.FFIProvider getInstance()
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder: jnr.ffi.provider.FFIProvider access$000()
jnr.ffi.provider.FFIProvider$SystemProviderSingletonHolder: void <clinit>()
jnr.ffi.provider.FromNativeType
jnr.ffi.provider.FromNativeType: jnr.ffi.mapper.FromNativeConverter fromNativeConverter
jnr.ffi.provider.FromNativeType: jnr.ffi.mapper.FromNativeContext fromNativeContext
jnr.ffi.provider.FromNativeType: FromNativeType(java.lang.Class,jnr.ffi.NativeType,java.util.Collection,jnr.ffi.mapper.FromNativeConverter,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.FromNativeType: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter()
jnr.ffi.provider.FromNativeType: jnr.ffi.mapper.FromNativeContext getFromNativeContext()
jnr.ffi.provider.IdentityFunctionMapper
jnr.ffi.provider.IdentityFunctionMapper: IdentityFunctionMapper()
jnr.ffi.provider.IdentityFunctionMapper: jnr.ffi.mapper.FunctionMapper getInstance()
jnr.ffi.provider.IdentityFunctionMapper: java.lang.String mapFunctionName(java.lang.String,jnr.ffi.mapper.FunctionMapper$Context)
jnr.ffi.provider.IdentityFunctionMapper$SingletonHolder
jnr.ffi.provider.IdentityFunctionMapper$SingletonHolder: jnr.ffi.mapper.FunctionMapper INSTANCE
jnr.ffi.provider.IdentityFunctionMapper$SingletonHolder: IdentityFunctionMapper$SingletonHolder()
jnr.ffi.provider.IdentityFunctionMapper$SingletonHolder: void <clinit>()
jnr.ffi.provider.InAccessibleMemoryIO
jnr.ffi.provider.InAccessibleMemoryIO: java.lang.String msg
jnr.ffi.provider.InAccessibleMemoryIO: InAccessibleMemoryIO(jnr.ffi.Runtime,long,boolean)
jnr.ffi.provider.InAccessibleMemoryIO: java.lang.RuntimeException error()
jnr.ffi.provider.InAccessibleMemoryIO: boolean hasArray()
jnr.ffi.provider.InAccessibleMemoryIO: java.lang.Object array()
jnr.ffi.provider.InAccessibleMemoryIO: int arrayOffset()
jnr.ffi.provider.InAccessibleMemoryIO: int arrayLength()
jnr.ffi.provider.InAccessibleMemoryIO: byte getByte(long)
jnr.ffi.provider.InAccessibleMemoryIO: short getShort(long)
jnr.ffi.provider.InAccessibleMemoryIO: int getInt(long)
jnr.ffi.provider.InAccessibleMemoryIO: long getLong(long)
jnr.ffi.provider.InAccessibleMemoryIO: long getLongLong(long)
jnr.ffi.provider.InAccessibleMemoryIO: float getFloat(long)
jnr.ffi.provider.InAccessibleMemoryIO: double getDouble(long)
jnr.ffi.provider.InAccessibleMemoryIO: void putByte(long,byte)
jnr.ffi.provider.InAccessibleMemoryIO: void putShort(long,short)
jnr.ffi.provider.InAccessibleMemoryIO: void putInt(long,int)
jnr.ffi.provider.InAccessibleMemoryIO: void putLong(long,long)
jnr.ffi.provider.InAccessibleMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.InAccessibleMemoryIO: void putFloat(long,float)
jnr.ffi.provider.InAccessibleMemoryIO: void putDouble(long,double)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.InAccessibleMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.InAccessibleMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.InAccessibleMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.InAccessibleMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.InAccessibleMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.InAccessibleMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.InAccessibleMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.InAccessibleMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.IntPointer
jnr.ffi.provider.IntPointer: IntPointer(jnr.ffi.Runtime,long)
jnr.ffi.provider.IntPointer: IntPointer(jnr.ffi.Runtime,int)
jnr.ffi.provider.IntPointer: long size()
jnr.ffi.provider.IntPointer: int hashCode()
jnr.ffi.provider.IntPointer: boolean equals(java.lang.Object)
jnr.ffi.provider.InterfaceScanner
jnr.ffi.provider.InterfaceScanner: java.lang.Class interfaceClass
jnr.ffi.provider.InterfaceScanner: jnr.ffi.mapper.SignatureTypeMapper typeMapper
jnr.ffi.provider.InterfaceScanner: jnr.ffi.CallingConvention callingConvention
jnr.ffi.provider.InterfaceScanner: java.lang.reflect.Method[] methods
jnr.ffi.provider.InterfaceScanner: InterfaceScanner(java.lang.Class,jnr.ffi.mapper.SignatureTypeMapper,jnr.ffi.CallingConvention)
jnr.ffi.provider.InterfaceScanner: java.util.Collection functions()
jnr.ffi.provider.InterfaceScanner: java.util.Collection variables()
jnr.ffi.provider.InterfaceScanner: java.lang.reflect.Method[] access$000(jnr.ffi.provider.InterfaceScanner)
jnr.ffi.provider.InterfaceScanner: jnr.ffi.CallingConvention access$300(jnr.ffi.provider.InterfaceScanner)
jnr.ffi.provider.InterfaceScanner$1
jnr.ffi.provider.InterfaceScanner$1: jnr.ffi.provider.InterfaceScanner this$0
jnr.ffi.provider.InterfaceScanner$1: InterfaceScanner$1(jnr.ffi.provider.InterfaceScanner)
jnr.ffi.provider.InterfaceScanner$1: java.util.Iterator iterator()
jnr.ffi.provider.InterfaceScanner$1: int size()
jnr.ffi.provider.InterfaceScanner$2
jnr.ffi.provider.InterfaceScanner$2: jnr.ffi.provider.InterfaceScanner this$0
jnr.ffi.provider.InterfaceScanner$2: InterfaceScanner$2(jnr.ffi.provider.InterfaceScanner)
jnr.ffi.provider.InterfaceScanner$2: java.util.Iterator iterator()
jnr.ffi.provider.InterfaceScanner$2: int size()
jnr.ffi.provider.InterfaceScanner$FunctionsIterator
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: java.lang.reflect.Method[] methods
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: int nextIndex
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: jnr.ffi.provider.InterfaceScanner this$0
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: InterfaceScanner$FunctionsIterator(jnr.ffi.provider.InterfaceScanner,java.lang.reflect.Method[])
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: boolean hasNext()
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: jnr.ffi.provider.NativeFunction next()
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: void remove()
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: java.lang.Object next()
jnr.ffi.provider.InterfaceScanner$FunctionsIterator: InterfaceScanner$FunctionsIterator(jnr.ffi.provider.InterfaceScanner,java.lang.reflect.Method[],jnr.ffi.provider.InterfaceScanner$1)
jnr.ffi.provider.InterfaceScanner$VariablesIterator
jnr.ffi.provider.InterfaceScanner$VariablesIterator: java.lang.reflect.Method[] methods
jnr.ffi.provider.InterfaceScanner$VariablesIterator: int nextIndex
jnr.ffi.provider.InterfaceScanner$VariablesIterator: jnr.ffi.provider.InterfaceScanner this$0
jnr.ffi.provider.InterfaceScanner$VariablesIterator: InterfaceScanner$VariablesIterator(jnr.ffi.provider.InterfaceScanner,java.lang.reflect.Method[])
jnr.ffi.provider.InterfaceScanner$VariablesIterator: boolean hasNext()
jnr.ffi.provider.InterfaceScanner$VariablesIterator: jnr.ffi.provider.NativeVariable next()
jnr.ffi.provider.InterfaceScanner$VariablesIterator: void remove()
jnr.ffi.provider.InterfaceScanner$VariablesIterator: java.lang.Object next()
jnr.ffi.provider.InterfaceScanner$VariablesIterator: InterfaceScanner$VariablesIterator(jnr.ffi.provider.InterfaceScanner,java.lang.reflect.Method[],jnr.ffi.provider.InterfaceScanner$1)
jnr.ffi.provider.InvalidProvider
jnr.ffi.provider.InvalidProvider: java.lang.String message
jnr.ffi.provider.InvalidProvider: java.lang.Throwable cause
jnr.ffi.provider.InvalidProvider: jnr.ffi.Runtime runtime
jnr.ffi.provider.InvalidProvider: InvalidProvider(java.lang.String,java.lang.Throwable)
jnr.ffi.provider.InvalidProvider: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.InvalidProvider: jnr.ffi.LibraryLoader createLibraryLoader(java.lang.Class)
jnr.ffi.provider.InvalidProvider: java.lang.String access$000(jnr.ffi.provider.InvalidProvider)
jnr.ffi.provider.InvalidProvider: java.lang.Throwable access$100(jnr.ffi.provider.InvalidProvider)
jnr.ffi.provider.InvalidProvider$1
jnr.ffi.provider.InvalidProvider$1: jnr.ffi.provider.InvalidProvider this$0
jnr.ffi.provider.InvalidProvider$1: InvalidProvider$1(jnr.ffi.provider.InvalidProvider,java.lang.Class)
jnr.ffi.provider.InvalidProvider$1: java.lang.Object loadLibrary(java.lang.Class,java.util.Collection,java.util.Collection,java.util.Map)
jnr.ffi.provider.InvalidRuntime
jnr.ffi.provider.InvalidRuntime: java.lang.String message
jnr.ffi.provider.InvalidRuntime: java.lang.Throwable cause
jnr.ffi.provider.InvalidRuntime: InvalidRuntime(java.lang.String,java.lang.Throwable)
jnr.ffi.provider.InvalidRuntime: jnr.ffi.Type findType(jnr.ffi.NativeType)
jnr.ffi.provider.InvalidRuntime: jnr.ffi.Type findType(jnr.ffi.TypeAlias)
jnr.ffi.provider.InvalidRuntime: jnr.ffi.provider.MemoryManager getMemoryManager()
jnr.ffi.provider.InvalidRuntime: jnr.ffi.provider.ClosureManager getClosureManager()
jnr.ffi.provider.InvalidRuntime: jnr.ffi.ObjectReferenceManager newObjectReferenceManager()
jnr.ffi.provider.InvalidRuntime: int getLastError()
jnr.ffi.provider.InvalidRuntime: void setLastError(int)
jnr.ffi.provider.InvalidRuntime: long addressMask()
jnr.ffi.provider.InvalidRuntime: int addressSize()
jnr.ffi.provider.InvalidRuntime: int longSize()
jnr.ffi.provider.InvalidRuntime: java.nio.ByteOrder byteOrder()
jnr.ffi.provider.InvalidRuntime: boolean isCompatible(jnr.ffi.Runtime)
jnr.ffi.provider.InvalidRuntime: java.lang.UnsatisfiedLinkError newLoadError()
jnr.ffi.provider.InvocationSession
jnr.ffi.provider.InvocationSession: java.util.ArrayList list
jnr.ffi.provider.InvocationSession: java.util.ArrayList liveObjects
jnr.ffi.provider.InvocationSession: InvocationSession()
jnr.ffi.provider.InvocationSession: void finish()
jnr.ffi.provider.InvocationSession: void addPostInvoke(jnr.ffi.provider.InvocationSession$PostInvoke)
jnr.ffi.provider.InvocationSession: void keepAlive(java.lang.Object)
jnr.ffi.provider.InvocationSession$PostInvoke
jnr.ffi.provider.InvocationSession$PostInvoke: void postInvoke()
jnr.ffi.provider.Invoker
jnr.ffi.provider.Invoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.LoadedLibrary
jnr.ffi.provider.LoadedLibrary: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.MemoryManager
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer allocate(int)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer allocateDirect(int)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer allocateDirect(int,boolean)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer allocateTemporary(int,boolean)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer newPointer(java.nio.ByteBuffer)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer newPointer(long)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer newPointer(long,long)
jnr.ffi.provider.MemoryManager: jnr.ffi.Pointer newOpaquePointer(long)
jnr.ffi.provider.NativeFunction
jnr.ffi.provider.NativeFunction: java.lang.reflect.Method method
jnr.ffi.provider.NativeFunction: java.util.Collection annotations
jnr.ffi.provider.NativeFunction: boolean saveError
jnr.ffi.provider.NativeFunction: jnr.ffi.CallingConvention callingConvention
jnr.ffi.provider.NativeFunction: NativeFunction(java.lang.reflect.Method,jnr.ffi.CallingConvention)
jnr.ffi.provider.NativeFunction: java.util.Collection annotations()
jnr.ffi.provider.NativeFunction: jnr.ffi.CallingConvention convention()
jnr.ffi.provider.NativeFunction: java.lang.String name()
jnr.ffi.provider.NativeFunction: boolean isErrnoRequired()
jnr.ffi.provider.NativeFunction: java.lang.reflect.Method getMethod()
jnr.ffi.provider.NativeInvocationHandler
jnr.ffi.provider.NativeInvocationHandler: java.util.Map fastLookupTable
jnr.ffi.provider.NativeInvocationHandler: java.util.Map invokerMap
jnr.ffi.provider.NativeInvocationHandler: NativeInvocationHandler(java.util.Map)
jnr.ffi.provider.NativeInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
jnr.ffi.provider.NativeInvocationHandler: jnr.ffi.provider.Invoker lookupAndCacheInvoker(java.lang.reflect.Method)
jnr.ffi.provider.NativeVariable
jnr.ffi.provider.NativeVariable: java.lang.reflect.Method method
jnr.ffi.provider.NativeVariable: NativeVariable(java.lang.reflect.Method)
jnr.ffi.provider.NativeVariable: java.lang.reflect.Method getMethod()
jnr.ffi.provider.NullMemoryIO
jnr.ffi.provider.NullMemoryIO: java.lang.String msg
jnr.ffi.provider.NullMemoryIO: NullMemoryIO(jnr.ffi.Runtime)
jnr.ffi.provider.NullMemoryIO: java.lang.NullPointerException error()
jnr.ffi.provider.NullMemoryIO: long size()
jnr.ffi.provider.NullMemoryIO: java.lang.RuntimeException error()
jnr.ffi.provider.NullTypeMapper
jnr.ffi.provider.NullTypeMapper: NullTypeMapper()
jnr.ffi.provider.NullTypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(java.lang.Class)
jnr.ffi.provider.NullTypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(java.lang.Class)
jnr.ffi.provider.NullTypeMapper: jnr.ffi.provider.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.NullTypeMapper: jnr.ffi.provider.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.NullTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.NullTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.ParameterFlags
jnr.ffi.provider.ParameterFlags: int OUT
jnr.ffi.provider.ParameterFlags: int IN
jnr.ffi.provider.ParameterFlags: int PINNED
jnr.ffi.provider.ParameterFlags: int NULTERMINATE
jnr.ffi.provider.ParameterFlags: int TRANSIENT
jnr.ffi.provider.ParameterFlags: int DIRECT
jnr.ffi.provider.ParameterFlags: ParameterFlags()
jnr.ffi.provider.ParameterFlags: int parse(java.lang.annotation.Annotation)
jnr.ffi.provider.ParameterFlags: int parse(java.lang.annotation.Annotation[])
jnr.ffi.provider.ParameterFlags: int parse(java.util.Collection)
jnr.ffi.provider.ParameterFlags: boolean isFlag(java.lang.annotation.Annotation)
jnr.ffi.provider.ParameterFlags: boolean isPinned(int)
jnr.ffi.provider.ParameterFlags: boolean isTransient(int)
jnr.ffi.provider.ParameterFlags: boolean isDirect(int)
jnr.ffi.provider.ParameterFlags: boolean isNulTerminate(int)
jnr.ffi.provider.ParameterFlags: boolean isOut(int)
jnr.ffi.provider.ParameterFlags: boolean isIn(int)
jnr.ffi.provider.ParameterType
jnr.ffi.provider.ParameterType: ParameterType(java.lang.Class,jnr.ffi.NativeType,java.util.Collection,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.ResultType
jnr.ffi.provider.ResultType: ResultType(java.lang.Class,jnr.ffi.NativeType,java.util.Collection,jnr.ffi.mapper.FromNativeConverter,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.ShareMemoryIO
jnr.ffi.provider.ShareMemoryIO: jnr.ffi.Pointer ptr
jnr.ffi.provider.ShareMemoryIO: long base
jnr.ffi.provider.ShareMemoryIO: ShareMemoryIO(jnr.ffi.Pointer,long)
jnr.ffi.provider.ShareMemoryIO: long size()
jnr.ffi.provider.ShareMemoryIO: boolean hasArray()
jnr.ffi.provider.ShareMemoryIO: java.lang.Object array()
jnr.ffi.provider.ShareMemoryIO: int arrayOffset()
jnr.ffi.provider.ShareMemoryIO: int arrayLength()
jnr.ffi.provider.ShareMemoryIO: jnr.ffi.Pointer getDelegatedMemoryIO()
jnr.ffi.provider.ShareMemoryIO: byte getByte(long)
jnr.ffi.provider.ShareMemoryIO: short getShort(long)
jnr.ffi.provider.ShareMemoryIO: int getInt(long)
jnr.ffi.provider.ShareMemoryIO: long getLong(long)
jnr.ffi.provider.ShareMemoryIO: long getLongLong(long)
jnr.ffi.provider.ShareMemoryIO: float getFloat(long)
jnr.ffi.provider.ShareMemoryIO: double getDouble(long)
jnr.ffi.provider.ShareMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.ShareMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.ShareMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.ShareMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.ShareMemoryIO: void putByte(long,byte)
jnr.ffi.provider.ShareMemoryIO: void putShort(long,short)
jnr.ffi.provider.ShareMemoryIO: void putInt(long,int)
jnr.ffi.provider.ShareMemoryIO: void putLong(long,long)
jnr.ffi.provider.ShareMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.ShareMemoryIO: void putFloat(long,float)
jnr.ffi.provider.ShareMemoryIO: void putDouble(long,double)
jnr.ffi.provider.ShareMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.ShareMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.ShareMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.ShareMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.ShareMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.ShareMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.ShareMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.ShareMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.ShareMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.ShareMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.ShareMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.SigType
jnr.ffi.provider.SigType: java.lang.Class javaType
jnr.ffi.provider.SigType: java.lang.Class convertedType
jnr.ffi.provider.SigType: java.util.Collection annotations
jnr.ffi.provider.SigType: jnr.ffi.NativeType nativeType
jnr.ffi.provider.SigType: SigType(java.lang.Class,jnr.ffi.NativeType,java.util.Collection,java.lang.Class)
jnr.ffi.provider.SigType: java.lang.Class getDeclaredType()
jnr.ffi.provider.SigType: java.lang.Class effectiveJavaType()
jnr.ffi.provider.SigType: java.util.Collection annotations()
jnr.ffi.provider.SigType: java.util.Collection getAnnotations()
jnr.ffi.provider.SigType: java.lang.reflect.Type getGenericType()
jnr.ffi.provider.SigType: java.lang.String toString()
jnr.ffi.provider.SigType: jnr.ffi.NativeType getNativeType()
jnr.ffi.provider.ToNativeType
jnr.ffi.provider.ToNativeType: jnr.ffi.mapper.ToNativeConverter toNativeConverter
jnr.ffi.provider.ToNativeType: jnr.ffi.mapper.ToNativeContext toNativeContext
jnr.ffi.provider.ToNativeType: ToNativeType(java.lang.Class,jnr.ffi.NativeType,java.util.Collection,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.ToNativeType: jnr.ffi.mapper.ToNativeConverter getToNativeConverter()
jnr.ffi.provider.ToNativeType: jnr.ffi.mapper.ToNativeContext getToNativeContext()
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: BoxedBooleanArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: boolean[] toNative(java.lang.Boolean[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter$Out: BoxedBooleanArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter$Out: void postInvoke(java.lang.Boolean[],boolean[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedBooleanArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: BoxedByteArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: byte[] toNative(java.lang.Byte[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter$Out: BoxedByteArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter$Out: void postInvoke(java.lang.Byte[],byte[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedByteArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: BoxedDoubleArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: double[] toNative(java.lang.Double[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter$Out: BoxedDoubleArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter$Out: void postInvoke(java.lang.Double[],double[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedDoubleArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: BoxedFloatArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: float[] toNative(java.lang.Float[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter$Out: BoxedFloatArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter$Out: void postInvoke(java.lang.Float[],float[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedFloatArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: BoxedIntegerArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: int[] toNative(java.lang.Integer[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter$Out: BoxedIntegerArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter$Out: void postInvoke(java.lang.Integer[],int[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedIntegerArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: BoxedLong32ArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: int[] toNative(java.lang.Long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter$Out: BoxedLong32ArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter$Out: void postInvoke(java.lang.Long[],int[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong32ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: BoxedLong64ArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: long[] toNative(java.lang.Long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter$Out: BoxedLong64ArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter$Out: void postInvoke(java.lang.Long[],long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedLong64ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: BoxedShortArrayParameterConverter(int)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: short[] toNative(java.lang.Short[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter$Out
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter$Out: BoxedShortArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter$Out: void postInvoke(java.lang.Short[],short[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.BoxedShortArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter
jnr.ffi.provider.converters.ByReferenceParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.ByReferenceParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.ByReferenceParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.ByReferenceParameterConverter: int parameterFlags
jnr.ffi.provider.converters.ByReferenceParameterConverter: ByReferenceParameterConverter(int)
jnr.ffi.provider.converters.ByReferenceParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter: jnr.ffi.Pointer toNative(jnr.ffi.byref.ByReference,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.ByReferenceParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter: ByReferenceParameterConverter(int,jnr.ffi.provider.converters.ByReferenceParameterConverter$1)
jnr.ffi.provider.converters.ByReferenceParameterConverter: void <clinit>()
jnr.ffi.provider.converters.ByReferenceParameterConverter$1
jnr.ffi.provider.converters.ByReferenceParameterConverter$Out
jnr.ffi.provider.converters.ByReferenceParameterConverter$Out: ByReferenceParameterConverter$Out(int)
jnr.ffi.provider.converters.ByReferenceParameterConverter$Out: void postInvoke(jnr.ffi.byref.ByReference,jnr.ffi.Pointer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.ByReferenceParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: CharSequenceArrayParameterConverter(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: jnr.ffi.Pointer toNative(java.lang.CharSequence[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$Out
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$Out: CharSequenceArrayParameterConverter$Out(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$Out: void postInvoke(java.lang.CharSequence[],jnr.ffi.Pointer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: jnr.ffi.Pointer memory
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: java.util.List stringMemory
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: java.nio.charset.Charset charset
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: CharSequenceArrayParameterConverter$StringArray(jnr.ffi.Runtime,jnr.ffi.Pointer,int)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: java.lang.String get(int)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: void put(int,java.lang.CharSequence)
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: long size()
jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray: jnr.ffi.provider.converters.CharSequenceArrayParameterConverter$StringArray allocate(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.CharSequenceParameterConverter
jnr.ffi.provider.converters.CharSequenceParameterConverter: jnr.ffi.mapper.ToNativeConverter DEFAULT
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.lang.ThreadLocal localEncoder
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.nio.charset.Charset charset
jnr.ffi.provider.converters.CharSequenceParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(java.nio.charset.Charset,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.nio.charset.Charset getEncodingCharset(java.util.Collection)
jnr.ffi.provider.converters.CharSequenceParameterConverter: CharSequenceParameterConverter(java.nio.charset.Charset)
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.nio.ByteBuffer toNative(java.lang.CharSequence,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.nio.ByteBuffer grow(java.nio.ByteBuffer)
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.CharSequenceParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.CharSequenceParameterConverter: void <clinit>()
jnr.ffi.provider.converters.EnumConverter
jnr.ffi.provider.converters.EnumConverter: jnr.ffi.util.EnumMapper mapper
jnr.ffi.provider.converters.EnumConverter: jnr.ffi.provider.converters.EnumConverter getInstance(java.lang.Class)
jnr.ffi.provider.converters.EnumConverter: EnumConverter(java.lang.Class)
jnr.ffi.provider.converters.EnumConverter: java.lang.Enum fromNative(java.lang.Integer,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.EnumConverter: java.lang.Integer toNative(java.lang.Enum,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.EnumConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.EnumConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.EnumConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.EnumSetConverter
jnr.ffi.provider.converters.EnumSetConverter: java.lang.Class enumClass
jnr.ffi.provider.converters.EnumSetConverter: jnr.ffi.util.EnumMapper enumMapper
jnr.ffi.provider.converters.EnumSetConverter: java.util.EnumSet allValues
jnr.ffi.provider.converters.EnumSetConverter: EnumSetConverter(java.lang.Class)
jnr.ffi.provider.converters.EnumSetConverter: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.EnumSetConverter: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.EnumSetConverter: jnr.ffi.provider.converters.EnumSetConverter getInstance(java.lang.reflect.Type)
jnr.ffi.provider.converters.EnumSetConverter: java.util.Set fromNative(java.lang.Integer,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.EnumSetConverter: java.lang.Integer toNative(java.util.Set,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.EnumSetConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.EnumSetConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.EnumSetConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter
jnr.ffi.provider.converters.Long32ArrayParameterConverter: jnr.ffi.provider.converters.Long32ArrayParameterConverter IN
jnr.ffi.provider.converters.Long32ArrayParameterConverter: jnr.ffi.provider.converters.Long32ArrayParameterConverter OUT
jnr.ffi.provider.converters.Long32ArrayParameterConverter: jnr.ffi.provider.converters.Long32ArrayParameterConverter INOUT
jnr.ffi.provider.converters.Long32ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.Long32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter: Long32ArrayParameterConverter(int)
jnr.ffi.provider.converters.Long32ArrayParameterConverter: int[] toNative(long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.Long32ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter: Long32ArrayParameterConverter(int,jnr.ffi.provider.converters.Long32ArrayParameterConverter$1)
jnr.ffi.provider.converters.Long32ArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.Long32ArrayParameterConverter$1
jnr.ffi.provider.converters.Long32ArrayParameterConverter$Out
jnr.ffi.provider.converters.Long32ArrayParameterConverter$Out: Long32ArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.Long32ArrayParameterConverter$Out: void postInvoke(long[],int[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Long32ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: NativeLong32ArrayParameterConverter(int)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: int[] toNative(jnr.ffi.NativeLong[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter$Out
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter$Out: NativeLong32ArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter$Out: void postInvoke(jnr.ffi.NativeLong[],int[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong32ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter IN
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter OUT
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter INOUT
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: NativeLong64ArrayParameterConverter(int)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: long[] toNative(jnr.ffi.NativeLong[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: NativeLong64ArrayParameterConverter(int,jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$1)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter: void <clinit>()
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$1
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$Out
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$Out: NativeLong64ArrayParameterConverter$Out(int)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$Out: void postInvoke(jnr.ffi.NativeLong[],long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLong64ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLongConverter
jnr.ffi.provider.converters.NativeLongConverter: jnr.ffi.mapper.DataConverter INSTANCE
jnr.ffi.provider.converters.NativeLongConverter: NativeLongConverter()
jnr.ffi.provider.converters.NativeLongConverter: jnr.ffi.mapper.DataConverter getInstance()
jnr.ffi.provider.converters.NativeLongConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.NativeLongConverter: java.lang.Long toNative(jnr.ffi.NativeLong,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLongConverter: jnr.ffi.NativeLong fromNative(java.lang.Long,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.NativeLongConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.NativeLongConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.NativeLongConverter: void <clinit>()
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: Pointer32ArrayParameterConverter(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: int[] toNative(jnr.ffi.Pointer[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter$Out
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter$Out: Pointer32ArrayParameterConverter$Out(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter$Out: void postInvoke(jnr.ffi.Pointer[],int[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer32ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: Pointer64ArrayParameterConverter(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: long[] toNative(jnr.ffi.Pointer[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter$Out
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter$Out: Pointer64ArrayParameterConverter$Out(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter$Out: void postInvoke(jnr.ffi.Pointer[],long[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.Pointer64ArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter
jnr.ffi.provider.converters.StringBufferParameterConverter: java.nio.charset.Charset charset
jnr.ffi.provider.converters.StringBufferParameterConverter: int parameterFlags
jnr.ffi.provider.converters.StringBufferParameterConverter: StringBufferParameterConverter(java.nio.charset.Charset,int)
jnr.ffi.provider.converters.StringBufferParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StringBufferParameterConverter: jnr.ffi.provider.converters.StringBufferParameterConverter getInstance(int,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter: jnr.ffi.provider.converters.StringBufferParameterConverter getInstance(java.nio.charset.Charset,int,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter: java.nio.ByteBuffer toNative(java.lang.StringBuffer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter: void postInvoke(java.lang.StringBuffer,java.nio.ByteBuffer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBufferParameterConverter: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.lang.ThreadLocal localEncoder
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.lang.ThreadLocal localDecoder
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.nio.charset.Charset charset
jnr.ffi.provider.converters.StringBuilderParameterConverter: int parameterFlags
jnr.ffi.provider.converters.StringBuilderParameterConverter: int terminatorWidth
jnr.ffi.provider.converters.StringBuilderParameterConverter: StringBuilderParameterConverter(java.nio.charset.Charset,int)
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StringBuilderParameterConverter: jnr.ffi.provider.converters.StringBuilderParameterConverter getInstance(int,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter: jnr.ffi.provider.converters.StringBuilderParameterConverter getInstance(java.nio.charset.Charset,int,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.nio.ByteBuffer toNative(java.lang.StringBuilder,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter: void postInvoke(java.lang.StringBuilder,java.nio.ByteBuffer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringBuilderParameterConverter: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringResultConverter
jnr.ffi.provider.converters.StringResultConverter: jnr.ffi.mapper.FromNativeConverter DEFAULT
jnr.ffi.provider.converters.StringResultConverter: java.lang.ThreadLocal localDecoder
jnr.ffi.provider.converters.StringResultConverter: java.nio.charset.Charset charset
jnr.ffi.provider.converters.StringResultConverter: int terminatorWidth
jnr.ffi.provider.converters.StringResultConverter: StringResultConverter(java.nio.charset.Charset)
jnr.ffi.provider.converters.StringResultConverter: jnr.ffi.mapper.FromNativeConverter getInstance(java.nio.charset.Charset)
jnr.ffi.provider.converters.StringResultConverter: jnr.ffi.mapper.FromNativeConverter getInstance(jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StringResultConverter: java.lang.String fromNative(jnr.ffi.Pointer,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StringResultConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StringResultConverter: jnr.ffi.annotations.Encoding getEncoding(java.util.Collection)
jnr.ffi.provider.converters.StringResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StringResultConverter: void <clinit>()
jnr.ffi.provider.converters.StringUtil
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset UTF8
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset USASCII
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset ISO8859_1
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset UTF16
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset UTF16LE
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset UTF16BE
jnr.ffi.provider.converters.StringUtil: StringUtil()
jnr.ffi.provider.converters.StringUtil: java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset,java.lang.ThreadLocal)
jnr.ffi.provider.converters.StringUtil: java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset,java.lang.ThreadLocal)
jnr.ffi.provider.converters.StringUtil: java.nio.charset.CharsetEncoder initEncoder(java.nio.charset.Charset,java.lang.ThreadLocal)
jnr.ffi.provider.converters.StringUtil: java.nio.charset.CharsetDecoder initDecoder(java.nio.charset.Charset,java.lang.ThreadLocal)
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset getCharset(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StringUtil: java.nio.charset.Charset getEncodingCharset(java.util.Collection)
jnr.ffi.provider.converters.StringUtil: void throwException(java.nio.charset.CoderResult)
jnr.ffi.provider.converters.StringUtil: int terminatorWidth(java.nio.charset.Charset)
jnr.ffi.provider.converters.StringUtil: int stringLength(java.nio.ByteBuffer,int)
jnr.ffi.provider.converters.StringUtil: void <clinit>()
jnr.ffi.provider.converters.StructArrayParameterConverter
jnr.ffi.provider.converters.StructArrayParameterConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.converters.StructArrayParameterConverter: int parameterFlags
jnr.ffi.provider.converters.StructArrayParameterConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext,java.lang.Class)
jnr.ffi.provider.converters.StructArrayParameterConverter: StructArrayParameterConverter(jnr.ffi.Runtime,int)
jnr.ffi.provider.converters.StructArrayParameterConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StructArrayParameterConverter: jnr.ffi.Pointer toNative(jnr.ffi.Struct[],jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructArrayParameterConverter: int align(int,int)
jnr.ffi.provider.converters.StructArrayParameterConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructArrayParameterConverter: int access$000(int,int)
jnr.ffi.provider.converters.StructArrayParameterConverter$Out
jnr.ffi.provider.converters.StructArrayParameterConverter$Out: java.lang.reflect.Constructor constructor
jnr.ffi.provider.converters.StructArrayParameterConverter$Out: StructArrayParameterConverter$Out(jnr.ffi.Runtime,java.lang.Class,int)
jnr.ffi.provider.converters.StructArrayParameterConverter$Out: void postInvoke(jnr.ffi.Struct[],jnr.ffi.Pointer,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructArrayParameterConverter$Out: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructArrayParameterConverter$Out: void postInvoke(java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: java.lang.reflect.Constructor constructor
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: jnr.ffi.mapper.FromNativeConverter getInstance(java.lang.Class,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: StructByReferenceFromNativeConverter(java.lang.reflect.Constructor)
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: jnr.ffi.Struct fromNative(jnr.ffi.Pointer,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StructByReferenceFromNativeConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.converters.StructByReferenceToNativeConverter
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: int flags
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: jnr.ffi.mapper.ToNativeConverter getInstance(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: StructByReferenceToNativeConverter(int)
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: java.lang.Class nativeType()
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: jnr.ffi.Pointer toNative(jnr.ffi.Struct,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.converters.StructByReferenceToNativeConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: com.kenai.jffi.Invoker ffi
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: jnr.ffi.provider.jffi.NativeLibrary library
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: AbstractAsmLibraryInterface(jnr.ffi.Runtime,jnr.ffi.provider.jffi.NativeLibrary)
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: jnr.ffi.provider.jffi.NativeLibrary getLibrary()
jnr.ffi.provider.jffi.AbstractAsmLibraryInterface: void <clinit>()
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.util.Map STRATEGY_ADDRESS_METHODS
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.util.Map STRATEGY_PARAMETER_TYPES
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: AbstractFastNumericMethodGenerator()
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,com.kenai.jffi.CallContext,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: void addStrategyParameterType(java.util.Map,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: boolean hasPointerParameterStrategy(java.lang.Class)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.Class emitParameterStrategyLookup(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: void emitParameterStrategyAddress(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class,jnr.ffi.provider.jffi.LocalVariable,jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: int emitDirectCheck(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class,jnr.ffi.provider.jffi.LocalVariable,jnr.ffi.provider.jffi.LocalVariable,int)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.String getObjectParameterMethodName(int)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.String getObjectParameterMethodSignature(int,int)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.String getInvokerMethodName(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.String getInvokerSignature(int,java.lang.Class)
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: java.lang.Class getInvokerType()
jnr.ffi.provider.jffi.AbstractFastNumericMethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.AbstractX86StubCompiler
jnr.ffi.provider.jffi.AbstractX86StubCompiler: boolean DEBUG
jnr.ffi.provider.jffi.AbstractX86StubCompiler: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.AbstractX86StubCompiler: java.util.List stubs
jnr.ffi.provider.jffi.AbstractX86StubCompiler: AbstractX86StubCompiler(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.AbstractX86StubCompiler: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.AbstractX86StubCompiler: void attach(java.lang.Class)
jnr.ffi.provider.jffi.AbstractX86StubCompiler: int align(int,int)
jnr.ffi.provider.jffi.AbstractX86StubCompiler: long align(long,long)
jnr.ffi.provider.jffi.AbstractX86StubCompiler: void <clinit>()
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder: com.kenai.jffi.PageManager pm
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder: long memory
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder: long pageCount
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder: AbstractX86StubCompiler$PageHolder(com.kenai.jffi.PageManager,long,long)
jnr.ffi.provider.jffi.AbstractX86StubCompiler$PageHolder: void finalize()
jnr.ffi.provider.jffi.AbstractX86StubCompiler$StaticDataHolder
jnr.ffi.provider.jffi.AbstractX86StubCompiler$StaticDataHolder: java.util.Map PAGES
jnr.ffi.provider.jffi.AbstractX86StubCompiler$StaticDataHolder: AbstractX86StubCompiler$StaticDataHolder()
jnr.ffi.provider.jffi.AbstractX86StubCompiler$StaticDataHolder: void <clinit>()
jnr.ffi.provider.jffi.AbstractX86StubCompiler$Stub
jnr.ffi.provider.jffi.AbstractX86StubCompiler$Stub: java.lang.String name
jnr.ffi.provider.jffi.AbstractX86StubCompiler$Stub: java.lang.String signature
jnr.ffi.provider.jffi.AbstractX86StubCompiler$Stub: jnr.x86asm.Assembler assembler
jnr.ffi.provider.jffi.AbstractX86StubCompiler$Stub: AbstractX86StubCompiler$Stub(java.lang.String,java.lang.String,jnr.x86asm.Assembler)
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: java.util.concurrent.atomic.AtomicBoolean allocated
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: int size
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: AllocatedDirectMemoryIO(jnr.ffi.Runtime,int,boolean)
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: long size()
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: int hashCode()
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: boolean equals(java.lang.Object)
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: void dispose()
jnr.ffi.provider.jffi.AllocatedDirectMemoryIO: void finalize()
jnr.ffi.provider.jffi.AnnotationTypeMapper
jnr.ffi.provider.jffi.AnnotationTypeMapper: AnnotationTypeMapper()
jnr.ffi.provider.jffi.AnnotationTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.AnnotationTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.AnnotationTypeMapper: java.lang.reflect.Method findMethodWithAnnotation(jnr.ffi.mapper.SignatureType,java.lang.Class)
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: java.lang.reflect.Method method
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: java.lang.Class nativeType
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: jnr.ffi.provider.jffi.AnnotationTypeMapper this$0
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: AnnotationTypeMapper$AbstractReflectionConverter(jnr.ffi.provider.jffi.AnnotationTypeMapper,java.lang.reflect.Method,java.lang.Class)
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: java.lang.Object invoke(java.lang.Object,java.lang.Object)
jnr.ffi.provider.jffi.AnnotationTypeMapper$AbstractReflectionConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionFromNativeConverter
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionFromNativeConverter: jnr.ffi.provider.jffi.AnnotationTypeMapper this$0
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionFromNativeConverter: AnnotationTypeMapper$ReflectionFromNativeConverter(jnr.ffi.provider.jffi.AnnotationTypeMapper,java.lang.reflect.Method,java.lang.Class)
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionFromNativeConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionToNativeConverter
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionToNativeConverter: jnr.ffi.provider.jffi.AnnotationTypeMapper this$0
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionToNativeConverter: AnnotationTypeMapper$ReflectionToNativeConverter(jnr.ffi.provider.jffi.AnnotationTypeMapper,java.lang.reflect.Method,java.lang.Class)
jnr.ffi.provider.jffi.AnnotationTypeMapper$ReflectionToNativeConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.ArrayMemoryIO
jnr.ffi.provider.jffi.ArrayMemoryIO: ArrayMemoryIO(jnr.ffi.Runtime,int)
jnr.ffi.provider.jffi.ArrayMemoryIO: ArrayMemoryIO(jnr.ffi.Runtime,byte[],int,int)
jnr.ffi.provider.jffi.ArrayMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.jffi.ArrayMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.jffi.ArrayMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmBuilder
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String classNamePath
jnr.ffi.provider.jffi.AsmBuilder: org.objectweb.asm.ClassVisitor classVisitor
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmClassLoader classLoader
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator functionId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator contextId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator toNativeConverterId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator toNativeContextId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator fromNativeConverterId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator fromNativeContextId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator objectParameterInfoId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator variableAccessorId
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator genericObjectId
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map toNativeConverters
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map toNativeContexts
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map fromNativeConverters
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map fromNativeContexts
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map objectParameterInfo
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map variableAccessors
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map callContextMap
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map functionAddresses
jnr.ffi.provider.jffi.AsmBuilder: java.util.Map genericObjects
jnr.ffi.provider.jffi.AsmBuilder: java.util.List objectFields
jnr.ffi.provider.jffi.AsmBuilder: AsmBuilder(jnr.ffi.Runtime,java.lang.String,org.objectweb.asm.ClassVisitor,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getClassNamePath()
jnr.ffi.provider.jffi.AsmBuilder: org.objectweb.asm.ClassVisitor getClassVisitor()
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmClassLoader getClassLoader()
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField addField(java.util.Map,java.lang.Object,java.lang.Class,jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getField(java.util.Map,java.lang.Object,java.lang.Class,jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getCallContextFieldName(com.kenai.jffi.Function)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getCallContextFieldName(com.kenai.jffi.CallContext)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getFunctionAddressFieldName(com.kenai.jffi.Function)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getRuntimeField()
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getFromNativeConverterName(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getToNativeConverterName(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.Class nearestClass(java.lang.Object,java.lang.Class)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getToNativeConverterField(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getFromNativeConverterField(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getToNativeContextField(jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getFromNativeContextField(jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getObjectParameterInfoName(com.kenai.jffi.ObjectParameterInfo)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getObjectFieldName(java.lang.Object,java.lang.Class)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField getObjectField(java.lang.Object,java.lang.Class)
jnr.ffi.provider.jffi.AsmBuilder: java.lang.String getVariableName(jnr.ffi.Variable)
jnr.ffi.provider.jffi.AsmBuilder: jnr.ffi.provider.jffi.AsmBuilder$ObjectField[] getObjectFieldArray()
jnr.ffi.provider.jffi.AsmBuilder: java.lang.Object[] getObjectFieldValues()
jnr.ffi.provider.jffi.AsmBuilder: void emitFieldInitialization(jnr.ffi.provider.jffi.SkinnyMethodAdapter,int)
jnr.ffi.provider.jffi.AsmBuilder$ObjectField
jnr.ffi.provider.jffi.AsmBuilder$ObjectField: java.lang.String name
jnr.ffi.provider.jffi.AsmBuilder$ObjectField: java.lang.Object value
jnr.ffi.provider.jffi.AsmBuilder$ObjectField: java.lang.Class klass
jnr.ffi.provider.jffi.AsmBuilder$ObjectField: AsmBuilder$ObjectField(java.lang.String,java.lang.Object,java.lang.Class)
jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator
jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator: java.lang.String baseName
jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator: int value
jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator: AsmBuilder$ObjectNameGenerator(java.lang.String)
jnr.ffi.provider.jffi.AsmBuilder$ObjectNameGenerator: java.lang.String generateName()
jnr.ffi.provider.jffi.AsmClassLoader
jnr.ffi.provider.jffi.AsmClassLoader: java.util.concurrent.ConcurrentMap definedClasses
jnr.ffi.provider.jffi.AsmClassLoader: AsmClassLoader()
jnr.ffi.provider.jffi.AsmClassLoader: AsmClassLoader(java.lang.ClassLoader)
jnr.ffi.provider.jffi.AsmClassLoader: java.lang.Class defineClass(java.lang.String,byte[])
jnr.ffi.provider.jffi.AsmClassLoader: java.lang.Class findClass(java.lang.String)
jnr.ffi.provider.jffi.AsmLibraryLoader
jnr.ffi.provider.jffi.AsmLibraryLoader: boolean DEBUG
jnr.ffi.provider.jffi.AsmLibraryLoader: java.util.concurrent.atomic.AtomicLong nextClassID
jnr.ffi.provider.jffi.AsmLibraryLoader: java.util.concurrent.atomic.AtomicLong uniqueId
jnr.ffi.provider.jffi.AsmLibraryLoader: java.lang.ThreadLocal classLoader
jnr.ffi.provider.jffi.AsmLibraryLoader: jnr.ffi.provider.jffi.NativeRuntime runtime
jnr.ffi.provider.jffi.AsmLibraryLoader: AsmLibraryLoader()
jnr.ffi.provider.jffi.AsmLibraryLoader: java.lang.Object loadLibrary(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map)
jnr.ffi.provider.jffi.AsmLibraryLoader: java.lang.Object generateInterfaceImpl(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmLibraryLoader: void generateFunctionNotFound(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.String,java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.AsmLibraryLoader: void <clinit>()
jnr.ffi.provider.jffi.AsmRuntime
jnr.ffi.provider.jffi.AsmRuntime: com.kenai.jffi.MemoryIO IO
jnr.ffi.provider.jffi.AsmRuntime: AsmRuntime()
jnr.ffi.provider.jffi.AsmRuntime: java.lang.UnsatisfiedLinkError newUnsatisifiedLinkError(java.lang.String)
jnr.ffi.provider.jffi.AsmRuntime: com.kenai.jffi.HeapInvocationBuffer newHeapInvocationBuffer(com.kenai.jffi.Function)
jnr.ffi.provider.jffi.AsmRuntime: com.kenai.jffi.HeapInvocationBuffer newHeapInvocationBuffer(com.kenai.jffi.CallContext)
jnr.ffi.provider.jffi.AsmRuntime: com.kenai.jffi.HeapInvocationBuffer newHeapInvocationBuffer(com.kenai.jffi.CallContext,int)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.Pointer pointerValue(long,jnr.ffi.Runtime)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.Pointer pointerValue(int,jnr.ffi.Runtime)
jnr.ffi.provider.jffi.AsmRuntime: boolean isDirect(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmRuntime: int intValue(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmRuntime: long longValue(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmRuntime: long longValue(jnr.ffi.Address)
jnr.ffi.provider.jffi.AsmRuntime: int intValue(jnr.ffi.Address)
jnr.ffi.provider.jffi.AsmRuntime: long longValue(java.nio.Buffer)
jnr.ffi.provider.jffi.AsmRuntime: int intValue(java.nio.Buffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy nullParameterStrategy()
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.PointerParameterStrategy directPointerParameterStrategy()
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.PointerParameterStrategy pointerParameterStrategy(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.PointerParameterStrategy otherPointerParameterStrategy(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy bufferParameterStrategy(java.nio.Buffer,com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.Buffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.ByteBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.ShortBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.CharBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.IntBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.LongBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.FloatBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.BufferParameterStrategy pointerParameterStrategy(java.nio.DoubleBuffer)
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(byte[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(short[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(char[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(int[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(long[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(float[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(double[])
jnr.ffi.provider.jffi.AsmRuntime: jnr.ffi.provider.jffi.ParameterStrategy pointerParameterStrategy(boolean[])
jnr.ffi.provider.jffi.AsmRuntime: void postInvoke(jnr.ffi.mapper.ToNativeConverter$PostInvocation,java.lang.Object,java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.AsmRuntime: void <clinit>()
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: int flags
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: java.util.Map converterClasses
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: java.util.concurrent.atomic.AtomicLong nextClassID
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: AsmStructByReferenceFromNativeConverter(jnr.ffi.Runtime,int)
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter newStructByReferenceConverter(jnr.ffi.Runtime,java.lang.Class,int,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: java.lang.Class newStructByReferenceClass(java.lang.Class,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmStructByReferenceFromNativeConverter: void <clinit>()
jnr.ffi.provider.jffi.AsmUtil
jnr.ffi.provider.jffi.AsmUtil: AsmUtil()
jnr.ffi.provider.jffi.AsmUtil: org.objectweb.asm.MethodVisitor newTraceMethodVisitor(org.objectweb.asm.MethodVisitor)
jnr.ffi.provider.jffi.AsmUtil: org.objectweb.asm.ClassVisitor newTraceClassVisitor(org.objectweb.asm.ClassVisitor,java.io.OutputStream)
jnr.ffi.provider.jffi.AsmUtil: org.objectweb.asm.ClassVisitor newTraceClassVisitor(org.objectweb.asm.ClassVisitor,java.io.PrintWriter)
jnr.ffi.provider.jffi.AsmUtil: org.objectweb.asm.ClassVisitor newTraceClassVisitor(java.io.PrintWriter)
jnr.ffi.provider.jffi.AsmUtil: org.objectweb.asm.ClassVisitor newCheckClassAdapter(org.objectweb.asm.ClassVisitor)
jnr.ffi.provider.jffi.AsmUtil: java.lang.Class unboxedReturnType(java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: java.lang.Class unboxedType(java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: java.lang.Class boxedType(java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void emitReturnOp(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: int calculateLocalVariableSpace(java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: int calculateLocalVariableSpace(jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.AsmUtil: int calculateLocalVariableSpace(java.lang.Class[])
jnr.ffi.provider.jffi.AsmUtil: int calculateLocalVariableSpace(jnr.ffi.provider.SigType[])
jnr.ffi.provider.jffi.AsmUtil: void unboxPointerOrStruct(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void unboxPointer(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void unboxBoolean(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void unboxBoolean(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void unboxNumber(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.AsmUtil: void unboxNumber(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void boxValue(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: int getNativeArrayFlags(int)
jnr.ffi.provider.jffi.AsmUtil: int getNativeArrayFlags(java.util.Collection)
jnr.ffi.provider.jffi.AsmUtil: jnr.ffi.provider.jffi.LocalVariable[] getParameterVariables(jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.AsmUtil: jnr.ffi.provider.jffi.LocalVariable[] getParameterVariables(java.lang.Class[])
jnr.ffi.provider.jffi.AsmUtil: void load(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.AsmUtil: void store(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.AsmUtil: void emitReturn(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: void getfield(jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.AsmBuilder$ObjectField)
jnr.ffi.provider.jffi.AsmUtil: void tryfinally(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Runnable,java.lang.Runnable)
jnr.ffi.provider.jffi.AsmUtil: void emitToNativeConversion(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ToNativeType)
jnr.ffi.provider.jffi.AsmUtil: void emitFromNativeConversion(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.FromNativeType,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil: java.lang.reflect.Method getToNativeMethod(jnr.ffi.provider.ToNativeType,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmUtil: java.lang.reflect.Method getFromNativeMethod(jnr.ffi.provider.FromNativeType,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.AsmUtil: boolean methodIsAccessible(java.lang.reflect.Method)
jnr.ffi.provider.jffi.AsmUtil: boolean classIsVisible(java.lang.ClassLoader,java.lang.Class)
jnr.ffi.provider.jffi.AsmUtil$1
jnr.ffi.provider.jffi.AsmUtil$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.AsmUtil$1: void <clinit>()
jnr.ffi.provider.jffi.BaseMethodGenerator
jnr.ffi.provider.jffi.BaseMethodGenerator: BaseMethodGenerator()
jnr.ffi.provider.jffi.BaseMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.BaseMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,com.kenai.jffi.CallContext,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.BaseMethodGenerator: jnr.ffi.provider.jffi.LocalVariable loadAndConvertParameter(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,jnr.ffi.provider.jffi.LocalVariable,jnr.ffi.provider.ToNativeType)
jnr.ffi.provider.jffi.BaseMethodGenerator: boolean isPostInvokeRequired(jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.BaseMethodGenerator: void emitEpilogue(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.provider.jffi.LocalVariable[],jnr.ffi.provider.jffi.LocalVariable[],java.lang.Runnable)
jnr.ffi.provider.jffi.BaseMethodGenerator: void emitPostInvoke(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ParameterType[],jnr.ffi.provider.jffi.LocalVariable[],jnr.ffi.provider.jffi.LocalVariable[])
jnr.ffi.provider.jffi.BaseMethodGenerator$1
jnr.ffi.provider.jffi.BaseMethodGenerator$1: jnr.ffi.provider.jffi.AsmBuilder val$builder
jnr.ffi.provider.jffi.BaseMethodGenerator$1: jnr.ffi.provider.jffi.SkinnyMethodAdapter val$mv
jnr.ffi.provider.jffi.BaseMethodGenerator$1: jnr.ffi.provider.ResultType val$resultType
jnr.ffi.provider.jffi.BaseMethodGenerator$1: java.lang.Class val$unboxedResultType
jnr.ffi.provider.jffi.BaseMethodGenerator$1: BaseMethodGenerator$1(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ResultType,java.lang.Class)
jnr.ffi.provider.jffi.BaseMethodGenerator$1: void run()
jnr.ffi.provider.jffi.BaseMethodGenerator$2
jnr.ffi.provider.jffi.BaseMethodGenerator$2: jnr.ffi.provider.jffi.AsmBuilder val$builder
jnr.ffi.provider.jffi.BaseMethodGenerator$2: jnr.ffi.provider.jffi.SkinnyMethodAdapter val$mv
jnr.ffi.provider.jffi.BaseMethodGenerator$2: jnr.ffi.provider.ParameterType[] val$parameterTypes
jnr.ffi.provider.jffi.BaseMethodGenerator$2: jnr.ffi.provider.jffi.LocalVariable[] val$parameters
jnr.ffi.provider.jffi.BaseMethodGenerator$2: jnr.ffi.provider.jffi.LocalVariable[] val$converted
jnr.ffi.provider.jffi.BaseMethodGenerator$2: java.lang.Runnable val$sessionCleanup
jnr.ffi.provider.jffi.BaseMethodGenerator$2: BaseMethodGenerator$2(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ParameterType[],jnr.ffi.provider.jffi.LocalVariable[],jnr.ffi.provider.jffi.LocalVariable[],java.lang.Runnable)
jnr.ffi.provider.jffi.BaseMethodGenerator$2: void run()
jnr.ffi.provider.jffi.BufferMethodGenerator
jnr.ffi.provider.jffi.BufferMethodGenerator: java.util.Map marshalOps
jnr.ffi.provider.jffi.BufferMethodGenerator: java.util.Map invokeOps
jnr.ffi.provider.jffi.BufferMethodGenerator: BufferMethodGenerator()
jnr.ffi.provider.jffi.BufferMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,com.kenai.jffi.CallContext,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.BufferMethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.BufferMethodGenerator: void emitPrimitiveOp(jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.ParameterType,jnr.ffi.provider.jffi.ToNativeOp)
jnr.ffi.provider.jffi.BufferMethodGenerator: boolean isSessionRequired(jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.BufferMethodGenerator: boolean isSessionRequired(jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.BufferMethodGenerator: void generateBufferInvocation(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,com.kenai.jffi.CallContext,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.BufferMethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.BufferMethodGenerator$1
jnr.ffi.provider.jffi.BufferMethodGenerator$1: jnr.ffi.provider.jffi.SkinnyMethodAdapter val$mv
jnr.ffi.provider.jffi.BufferMethodGenerator$1: jnr.ffi.provider.jffi.LocalVariable val$session
jnr.ffi.provider.jffi.BufferMethodGenerator$1: jnr.ffi.provider.jffi.BufferMethodGenerator this$0
jnr.ffi.provider.jffi.BufferMethodGenerator$1: BufferMethodGenerator$1(jnr.ffi.provider.jffi.BufferMethodGenerator,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.BufferMethodGenerator$1: void run()
jnr.ffi.provider.jffi.BufferMethodGenerator$InvokeOp
jnr.ffi.provider.jffi.BufferMethodGenerator$InvokeOp: BufferMethodGenerator$InvokeOp(java.lang.String,java.lang.Class)
jnr.ffi.provider.jffi.BufferMethodGenerator$InvokeOp: BufferMethodGenerator$InvokeOp(java.lang.String,java.lang.Class,jnr.ffi.provider.jffi.BufferMethodGenerator$1)
jnr.ffi.provider.jffi.BufferMethodGenerator$MarshalOp
jnr.ffi.provider.jffi.BufferMethodGenerator$MarshalOp: BufferMethodGenerator$MarshalOp(java.lang.String,java.lang.Class)
jnr.ffi.provider.jffi.BufferMethodGenerator$MarshalOp: BufferMethodGenerator$MarshalOp(java.lang.String,java.lang.Class,jnr.ffi.provider.jffi.BufferMethodGenerator$1)
jnr.ffi.provider.jffi.BufferMethodGenerator$Operation
jnr.ffi.provider.jffi.BufferMethodGenerator$Operation: java.lang.String methodName
jnr.ffi.provider.jffi.BufferMethodGenerator$Operation: java.lang.Class primitiveClass
jnr.ffi.provider.jffi.BufferMethodGenerator$Operation: BufferMethodGenerator$Operation(java.lang.String,java.lang.Class)
jnr.ffi.provider.jffi.BufferMethodGenerator$Operation: BufferMethodGenerator$Operation(java.lang.String,java.lang.Class,jnr.ffi.provider.jffi.BufferMethodGenerator$1)
jnr.ffi.provider.jffi.BufferParameterStrategy
jnr.ffi.provider.jffi.BufferParameterStrategy: int shift
jnr.ffi.provider.jffi.BufferParameterStrategy: jnr.ffi.provider.jffi.BufferParameterStrategy[] DIRECT_BUFFER_PARAMETER_STRATEGIES
jnr.ffi.provider.jffi.BufferParameterStrategy: jnr.ffi.provider.jffi.BufferParameterStrategy[] HEAP_BUFFER_PARAMETER_STRATEGIES
jnr.ffi.provider.jffi.BufferParameterStrategy: BufferParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType,com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.BufferParameterStrategy: long address(java.nio.Buffer)
jnr.ffi.provider.jffi.BufferParameterStrategy: long address(java.lang.Object)
jnr.ffi.provider.jffi.BufferParameterStrategy: java.lang.Object object(java.lang.Object)
jnr.ffi.provider.jffi.BufferParameterStrategy: int offset(java.lang.Object)
jnr.ffi.provider.jffi.BufferParameterStrategy: int length(java.lang.Object)
jnr.ffi.provider.jffi.BufferParameterStrategy: int calculateShift(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.BufferParameterStrategy: jnr.ffi.provider.jffi.BufferParameterStrategy direct(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.BufferParameterStrategy: jnr.ffi.provider.jffi.BufferParameterStrategy heap(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.BufferParameterStrategy: void <clinit>()
jnr.ffi.provider.jffi.BufferParameterStrategy$1
jnr.ffi.provider.jffi.BufferParameterStrategy$1: int[] $SwitchMap$com$kenai$jffi$ObjectParameterType$ComponentType
jnr.ffi.provider.jffi.BufferParameterStrategy$1: void <clinit>()
jnr.ffi.provider.jffi.ByteBufferMemoryIO
jnr.ffi.provider.jffi.ByteBufferMemoryIO: ByteBufferMemoryIO(jnr.ffi.Runtime,java.nio.ByteBuffer)
jnr.ffi.provider.jffi.ByteBufferMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.jffi.ByteBufferMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.jffi.ByteBufferMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ByteBufferMemoryIO: long address(java.nio.ByteBuffer)
jnr.ffi.provider.jffi.ClosureFromNativeConverter
jnr.ffi.provider.jffi.ClosureFromNativeConverter: java.util.concurrent.atomic.AtomicLong nextClassID
jnr.ffi.provider.jffi.ClosureFromNativeConverter: ClosureFromNativeConverter()
jnr.ffi.provider.jffi.ClosureFromNativeConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.ClosureFromNativeConverter: jnr.ffi.mapper.FromNativeConverter getInstance(jnr.ffi.Runtime,jnr.ffi.mapper.SignatureType,jnr.ffi.provider.jffi.AsmClassLoader,jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.provider.jffi.ClosureFromNativeConverter: jnr.ffi.mapper.FromNativeConverter newClosureConverter(jnr.ffi.Runtime,jnr.ffi.provider.jffi.AsmClassLoader,java.lang.Class,jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.provider.jffi.ClosureFromNativeConverter: java.lang.Class loadClass(jnr.ffi.provider.jffi.AsmClassLoader,java.lang.String,org.objectweb.asm.ClassWriter)
jnr.ffi.provider.jffi.ClosureFromNativeConverter: void generateInvocation(jnr.ffi.Runtime,jnr.ffi.provider.jffi.AsmBuilder,java.lang.Class,jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.provider.jffi.ClosureFromNativeConverter: void <clinit>()
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer: com.kenai.jffi.Invoker ffi
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer: long functionAddress
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer: ClosureFromNativeConverter$AbstractClosurePointer(jnr.ffi.Runtime,long)
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer: long size()
jnr.ffi.provider.jffi.ClosureFromNativeConverter$AbstractClosurePointer: void <clinit>()
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: java.lang.reflect.Constructor closureConstructor
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: java.lang.Object[] initFields
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: ClosureFromNativeConverter$ProxyConverter(jnr.ffi.Runtime,java.lang.reflect.Constructor,java.lang.Object[])
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: java.lang.Object fromNative(jnr.ffi.Pointer,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.ClosureFromNativeConverter$ProxyConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.ClosureTypeMapper
jnr.ffi.provider.jffi.ClosureTypeMapper: ClosureTypeMapper()
jnr.ffi.provider.jffi.ClosureTypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.ClosureTypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.ClosureTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.ClosureTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.ClosureUtil
jnr.ffi.provider.jffi.ClosureUtil: ClosureUtil()
jnr.ffi.provider.jffi.ClosureUtil: jnr.ffi.provider.ToNativeType getResultType(jnr.ffi.Runtime,java.lang.reflect.Method,jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.provider.jffi.ClosureUtil: jnr.ffi.provider.FromNativeType getParameterType(jnr.ffi.Runtime,java.lang.reflect.Method,int,jnr.ffi.mapper.SignatureTypeMapper)
jnr.ffi.provider.jffi.ClosureUtil: java.lang.reflect.Method getDelegateMethod(java.lang.Class)
jnr.ffi.provider.jffi.CodegenUtils
jnr.ffi.provider.jffi.CodegenUtils: CodegenUtils()
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String c(java.lang.String)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String p(java.lang.Class)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String p(java.lang.String)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String ci(java.lang.Class)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String human(java.lang.Class)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String sig(java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String sig(java.lang.Class,java.lang.String,java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String sigParams(java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String sigParams(java.lang.String,java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String pretty(java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String prettyParams(java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.Class[] params(java.lang.Class[])
jnr.ffi.provider.jffi.CodegenUtils: java.lang.Class[] params(java.lang.Class,int)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.Class[] params(java.lang.Class,java.lang.Class,int)
jnr.ffi.provider.jffi.CodegenUtils: java.lang.String getAnnotatedBindingClassName(java.lang.String,java.lang.String,boolean,int,int,boolean,boolean)
jnr.ffi.provider.jffi.CodegenUtils: void visitAnnotationFields(org.objectweb.asm.AnnotationVisitor,java.util.Map)
jnr.ffi.provider.jffi.ConverterMetaData
jnr.ffi.provider.jffi.ConverterMetaData: java.lang.ref.Reference cacheReference
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection classAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection toNativeMethodAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection fromNativeMethodAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection nativeTypeMethodAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection toNativeAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection fromNativeAnnotations
jnr.ffi.provider.jffi.ConverterMetaData: ConverterMetaData(java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection getToNativeMethodAnnotations(java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection getConverterMethodAnnotations(java.lang.Class,java.lang.String,java.lang.Class[])
jnr.ffi.provider.jffi.ConverterMetaData: jnr.ffi.provider.jffi.ConverterMetaData getMetaData(java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.ConverterMetaData: jnr.ffi.provider.jffi.ConverterMetaData addMetaData(java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection getAnnotations(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.ConverterMetaData: java.util.Collection getAnnotations(jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.provider.jffi.DefaultInvokerFactory
jnr.ffi.provider.jffi.DefaultInvokerFactory: DefaultInvokerFactory()
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.Invoker createInvoker(jnr.ffi.Runtime,jnr.ffi.provider.jffi.NativeLibrary,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker getFunctionInvoker(jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker getNumberFunctionInvoker(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller getMarshaller(jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller getMarshaller(java.lang.Class,jnr.ffi.NativeType,java.util.Collection)
jnr.ffi.provider.jffi.DefaultInvokerFactory: boolean isUnsigned(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.mapper.DataConverter getNumberDataConverter(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.DefaultInvokerFactory: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter getNumberResultConverter(jnr.ffi.provider.FromNativeType)
jnr.ffi.provider.jffi.DefaultInvokerFactory$1
jnr.ffi.provider.jffi.DefaultInvokerFactory$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.DefaultInvokerFactory$1: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$AbstractNumberResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$AbstractNumberResultConverter: DefaultInvokerFactory$AbstractNumberResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$AbstractNumberResultConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter: DefaultInvokerFactory$AddressResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter: jnr.ffi.Address fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$AddressResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BaseInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$BaseInvoker: com.kenai.jffi.Invoker invoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$BaseInvoker: DefaultInvokerFactory$BaseInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BaseInvoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: jnr.ffi.mapper.DataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: DefaultInvokerFactory$BooleanConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: java.lang.Boolean fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: java.lang.Number toNative(java.lang.Boolean,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanInvoker: DefaultInvokerFactory$BooleanInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanInvoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanMarshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanMarshaller: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanMarshaller: DefaultInvokerFactory$BooleanMarshaller()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanMarshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BooleanMarshaller: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$BufferMarshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$BufferMarshaller: com.kenai.jffi.ObjectParameterType$ComponentType componentType
jnr.ffi.provider.jffi.DefaultInvokerFactory$BufferMarshaller: int flags
jnr.ffi.provider.jffi.DefaultInvokerFactory$BufferMarshaller: DefaultInvokerFactory$BufferMarshaller(com.kenai.jffi.ObjectParameterType$ComponentType,java.util.Collection)
jnr.ffi.provider.jffi.DefaultInvokerFactory$BufferMarshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter: DefaultInvokerFactory$ByteResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter: java.lang.Byte fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ByteResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker: jnr.ffi.mapper.FromNativeConverter fromNativeConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker: jnr.ffi.mapper.FromNativeContext fromNativeContext
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker nativeInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker: DefaultInvokerFactory$ConvertingInvoker(jnr.ffi.mapper.FromNativeConverter,jnr.ffi.mapper.FromNativeContext,jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ConvertingInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: com.kenai.jffi.Function function
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker functionInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller[] marshallers
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: jnr.ffi.provider.jffi.NativeLibrary nativeLibrary
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: DefaultInvokerFactory$DefaultInvoker(jnr.ffi.Runtime,jnr.ffi.provider.jffi.NativeLibrary,com.kenai.jffi.Function,jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker,jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller[])
jnr.ffi.provider.jffi.DefaultInvokerFactory$DefaultInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: DefaultInvokerFactory$DoubleConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter: DefaultInvokerFactory$DoubleResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter: java.lang.Double fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$DoubleResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Invoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Invoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Invoker: DefaultInvokerFactory$Float32Invoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Invoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Invoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Marshaller: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Marshaller: DefaultInvokerFactory$Float32Marshaller()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float32Marshaller: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Invoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Invoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Invoker: DefaultInvokerFactory$Float64Invoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Invoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Invoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Marshaller: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Marshaller: DefaultInvokerFactory$Float64Marshaller()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Float64Marshaller: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: DefaultInvokerFactory$FloatConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter: DefaultInvokerFactory$FloatResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter: java.lang.Float fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$FloatResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int16Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int16Marshaller: jnr.ffi.mapper.ToNativeConverter toNativeConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int16Marshaller: DefaultInvokerFactory$Int16Marshaller(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int16Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int32Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int32Marshaller: jnr.ffi.mapper.ToNativeConverter toNativeConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int32Marshaller: DefaultInvokerFactory$Int32Marshaller(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int32Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int64Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int64Marshaller: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int64Marshaller: DefaultInvokerFactory$Int64Marshaller()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int64Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int64Marshaller: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int8Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int8Marshaller: jnr.ffi.mapper.ToNativeConverter toNativeConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int8Marshaller: DefaultInvokerFactory$Int8Marshaller(jnr.ffi.mapper.ToNativeConverter)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Int8Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntInvoker: DefaultInvokerFactory$IntInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntInvoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter: DefaultInvokerFactory$IntegerResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter: java.lang.Integer fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$IntegerResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongInvoker: DefaultInvokerFactory$LongInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongInvoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: DefaultInvokerFactory$LongLongConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongLongConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter: DefaultInvokerFactory$LongResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter: java.lang.Long fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$LongResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter: DefaultInvokerFactory$NumberDataConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerInvoker: DefaultInvokerFactory$PointerInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerInvoker: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerMarshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerMarshaller: int flags
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerMarshaller: DefaultInvokerFactory$PointerMarshaller(java.util.Collection)
jnr.ffi.provider.jffi.DefaultInvokerFactory$PointerMarshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$PrimitiveArrayMarshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$PrimitiveArrayMarshaller: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy strategy
jnr.ffi.provider.jffi.DefaultInvokerFactory$PrimitiveArrayMarshaller: int flags
jnr.ffi.provider.jffi.DefaultInvokerFactory$PrimitiveArrayMarshaller: DefaultInvokerFactory$PrimitiveArrayMarshaller(jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy,java.util.Collection)
jnr.ffi.provider.jffi.DefaultInvokerFactory$PrimitiveArrayMarshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter: DefaultInvokerFactory$ShortResultConverter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter: java.lang.Short fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ShortResultConverter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: DefaultInvokerFactory$Signed16Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed16Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: DefaultInvokerFactory$Signed32Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed32Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: DefaultInvokerFactory$Signed8Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Signed8Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: jnr.ffi.mapper.ToNativeConverter converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: jnr.ffi.mapper.ToNativeContext context
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller marshaller
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: boolean isPostInvokeRequired
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: DefaultInvokerFactory$ToNativeConverterMarshaller(jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.ToNativeContext,jnr.ffi.provider.jffi.DefaultInvokerFactory$Marshaller)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: void marshal(jnr.ffi.provider.InvocationSession,com.kenai.jffi.HeapInvocationBuffer,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: jnr.ffi.mapper.ToNativeContext access$000(jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller: jnr.ffi.mapper.ToNativeConverter access$100(jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1: java.lang.Object val$parameter
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1: java.lang.Object val$nativeValue
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1: jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller this$0
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1: DefaultInvokerFactory$ToNativeConverterMarshaller$1(jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller,java.lang.Object,java.lang.Object)
jnr.ffi.provider.jffi.DefaultInvokerFactory$ToNativeConverterMarshaller$1: void postInvoke()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: DefaultInvokerFactory$Unsigned16Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned16Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: DefaultInvokerFactory$Unsigned32Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned32Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: jnr.ffi.provider.jffi.DefaultInvokerFactory$NumberDataConverter INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: DefaultInvokerFactory$Unsigned8Converter()
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: java.lang.Number fromNative(java.lang.Number,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: java.lang.Number toNative(java.lang.Number,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: java.lang.Object fromNative(java.lang.Object,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.DefaultInvokerFactory$Unsigned8Converter: void <clinit>()
jnr.ffi.provider.jffi.DefaultInvokerFactory$VoidInvoker
jnr.ffi.provider.jffi.DefaultInvokerFactory$VoidInvoker: jnr.ffi.provider.jffi.DefaultInvokerFactory$FunctionInvoker INSTANCE
jnr.ffi.provider.jffi.DefaultInvokerFactory$VoidInvoker: DefaultInvokerFactory$VoidInvoker()
jnr.ffi.provider.jffi.DefaultInvokerFactory$VoidInvoker: java.lang.Object invoke(jnr.ffi.Runtime,com.kenai.jffi.Function,com.kenai.jffi.HeapInvocationBuffer)
jnr.ffi.provider.jffi.DefaultInvokerFactory$VoidInvoker: void <clinit>()
jnr.ffi.provider.jffi.DirectMemoryIO
jnr.ffi.provider.jffi.DirectMemoryIO: com.kenai.jffi.MemoryIO IO
jnr.ffi.provider.jffi.DirectMemoryIO: DirectMemoryIO(jnr.ffi.Runtime,long)
jnr.ffi.provider.jffi.DirectMemoryIO: DirectMemoryIO(jnr.ffi.Runtime,int)
jnr.ffi.provider.jffi.DirectMemoryIO: long size()
jnr.ffi.provider.jffi.DirectMemoryIO: boolean hasArray()
jnr.ffi.provider.jffi.DirectMemoryIO: java.lang.Object array()
jnr.ffi.provider.jffi.DirectMemoryIO: int arrayOffset()
jnr.ffi.provider.jffi.DirectMemoryIO: int arrayLength()
jnr.ffi.provider.jffi.DirectMemoryIO: int hashCode()
jnr.ffi.provider.jffi.DirectMemoryIO: boolean equals(java.lang.Object)
jnr.ffi.provider.jffi.DirectMemoryIO: byte getByte(long)
jnr.ffi.provider.jffi.DirectMemoryIO: short getShort(long)
jnr.ffi.provider.jffi.DirectMemoryIO: int getInt(long)
jnr.ffi.provider.jffi.DirectMemoryIO: long getLongLong(long)
jnr.ffi.provider.jffi.DirectMemoryIO: float getFloat(long)
jnr.ffi.provider.jffi.DirectMemoryIO: double getDouble(long)
jnr.ffi.provider.jffi.DirectMemoryIO: void putByte(long,byte)
jnr.ffi.provider.jffi.DirectMemoryIO: void putShort(long,short)
jnr.ffi.provider.jffi.DirectMemoryIO: void putInt(long,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void putLongLong(long,long)
jnr.ffi.provider.jffi.DirectMemoryIO: void putFloat(long,float)
jnr.ffi.provider.jffi.DirectMemoryIO: void putDouble(long,double)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,byte[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,byte[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,short[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,short[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,int[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,int[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,long[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,long[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,float[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,float[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void get(long,double[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void put(long,double[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.jffi.DirectMemoryIO: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.jffi.DirectMemoryIO: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.jffi.DirectMemoryIO: java.lang.String getString(long)
jnr.ffi.provider.jffi.DirectMemoryIO: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.jffi.DirectMemoryIO: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.jffi.DirectMemoryIO: void putZeroTerminatedByteArray(long,byte[],int,int)
jnr.ffi.provider.jffi.DirectMemoryIO: int indexOf(long,byte,int)
jnr.ffi.provider.jffi.DirectMemoryIO: void setMemory(long,long,byte)
jnr.ffi.provider.jffi.DirectMemoryIO: void <clinit>()
jnr.ffi.provider.jffi.FastIntMethodGenerator
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean ENABLED
jnr.ffi.provider.jffi.FastIntMethodGenerator: int MAX_FASTINT_PARAMETERS
jnr.ffi.provider.jffi.FastIntMethodGenerator: java.lang.String[] signatures
jnr.ffi.provider.jffi.FastIntMethodGenerator: java.lang.String[] methodNames
jnr.ffi.provider.jffi.FastIntMethodGenerator: FastIntMethodGenerator()
jnr.ffi.provider.jffi.FastIntMethodGenerator: java.lang.String getInvokerMethodName(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.FastIntMethodGenerator: java.lang.String getInvokerSignature(int,java.lang.Class)
jnr.ffi.provider.jffi.FastIntMethodGenerator: java.lang.Class getInvokerType()
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.FastIntMethodGenerator: int getMaximumFastIntParameters()
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean isFastIntType(com.kenai.jffi.Platform,jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean isSupportedPointerParameterType(java.lang.Class)
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean isFastIntResult(com.kenai.jffi.Platform,jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.FastIntMethodGenerator: boolean isFastIntParameter(com.kenai.jffi.Platform,jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.FastIntMethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.FastIntMethodGenerator$1
jnr.ffi.provider.jffi.FastIntMethodGenerator$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.FastIntMethodGenerator$1: void <clinit>()
jnr.ffi.provider.jffi.FastLongMethodGenerator
jnr.ffi.provider.jffi.FastLongMethodGenerator: boolean ENABLED
jnr.ffi.provider.jffi.FastLongMethodGenerator: int MAX_PARAMETERS
jnr.ffi.provider.jffi.FastLongMethodGenerator: java.lang.String[] signatures
jnr.ffi.provider.jffi.FastLongMethodGenerator: java.lang.String[] methodNames
jnr.ffi.provider.jffi.FastLongMethodGenerator: FastLongMethodGenerator()
jnr.ffi.provider.jffi.FastLongMethodGenerator: java.lang.String getInvokerMethodName(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.FastLongMethodGenerator: java.lang.String getInvokerSignature(int,java.lang.Class)
jnr.ffi.provider.jffi.FastLongMethodGenerator: java.lang.Class getInvokerType()
jnr.ffi.provider.jffi.FastLongMethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.FastLongMethodGenerator: int getMaximumFastLongParameters()
jnr.ffi.provider.jffi.FastLongMethodGenerator: boolean isFastLongType(com.kenai.jffi.Platform,jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.FastLongMethodGenerator: boolean isFastLongResult(com.kenai.jffi.Platform,jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.FastLongMethodGenerator: boolean isFastLongParameter(com.kenai.jffi.Platform,jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.FastLongMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,jnr.ffi.provider.jffi.SkinnyMethodAdapter,jnr.ffi.provider.jffi.LocalVariableAllocator,com.kenai.jffi.CallContext,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.FastLongMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.FastLongMethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.FastNumericMethodGenerator
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean ENABLED
jnr.ffi.provider.jffi.FastNumericMethodGenerator: int MAX_PARAMETERS
jnr.ffi.provider.jffi.FastNumericMethodGenerator: java.lang.String[] signatures
jnr.ffi.provider.jffi.FastNumericMethodGenerator: java.lang.String[] methodNames
jnr.ffi.provider.jffi.FastNumericMethodGenerator: FastNumericMethodGenerator()
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: java.lang.String getInvokerMethodName(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: java.lang.String getInvokerSignature(int,java.lang.Class)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: java.lang.Class getInvokerType()
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean isNumericType(com.kenai.jffi.Platform,jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean isFastNumericResult(com.kenai.jffi.Platform,jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean isFastNumericParameter(com.kenai.jffi.Platform,jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: boolean isSupportedPointerParameterType(java.lang.Class)
jnr.ffi.provider.jffi.FastNumericMethodGenerator: int getMaximumParameters()
jnr.ffi.provider.jffi.FastNumericMethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.HeapBufferParameterStrategy
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: jnr.ffi.provider.jffi.HeapBufferParameterStrategy[] heapBufferStrategies
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: HeapBufferParameterStrategy(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: long address(java.lang.Object)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: java.lang.Object object(java.lang.Object)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: int offset(java.lang.Object)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: int length(java.lang.Object)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: jnr.ffi.provider.jffi.HeapBufferParameterStrategy get(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.HeapBufferParameterStrategy: void <clinit>()
jnr.ffi.provider.jffi.InvokerTypeMapper
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.provider.jffi.NativeClosureManager closureManager
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.provider.jffi.AsmClassLoader classLoader
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory structResultConverterFactory
jnr.ffi.provider.jffi.InvokerTypeMapper: InvokerTypeMapper(jnr.ffi.provider.jffi.NativeClosureManager,jnr.ffi.provider.jffi.AsmClassLoader,boolean)
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.mapper.FromNativeConverter getFromNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.mapper.ToNativeConverter getToNativeConverter(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.mapper.FromNativeType getFromNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.InvokerTypeMapper: jnr.ffi.mapper.ToNativeType getToNativeType(jnr.ffi.mapper.SignatureType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.InvokerTypeMapper: boolean isDelegate(java.lang.Class)
jnr.ffi.provider.jffi.InvokerUtil
jnr.ffi.provider.jffi.InvokerUtil: java.util.Map jffiTypes
jnr.ffi.provider.jffi.InvokerUtil: InvokerUtil()
jnr.ffi.provider.jffi.InvokerUtil: boolean requiresErrno(java.lang.reflect.Method)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.CallingConvention getCallingConvention(java.util.Map)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.CallingConvention getCallingConvention(java.lang.Class,java.util.Map)
jnr.ffi.provider.jffi.InvokerUtil: boolean hasAnnotation(java.util.Collection,java.lang.Class)
jnr.ffi.provider.jffi.InvokerUtil: com.kenai.jffi.Type jffiType(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.NativeType nativeType(jnr.ffi.Type)
jnr.ffi.provider.jffi.InvokerUtil: java.util.Collection getAnnotations(jnr.ffi.mapper.FromNativeType)
jnr.ffi.provider.jffi.InvokerUtil: java.util.Collection getAnnotations(jnr.ffi.mapper.ToNativeType)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.provider.ResultType getResultType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection,jnr.ffi.mapper.FromNativeConverter,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.provider.ResultType getResultType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection,jnr.ffi.mapper.FromNativeType,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.provider.ParameterType getParameterType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.provider.ParameterType getParameterType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection,jnr.ffi.mapper.ToNativeType,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.provider.ParameterType[] getParameterTypes(jnr.ffi.Runtime,jnr.ffi.mapper.SignatureTypeMapper,java.lang.reflect.Method)
jnr.ffi.provider.jffi.InvokerUtil: com.kenai.jffi.CallContext getCallContext(jnr.ffi.provider.SigType,jnr.ffi.provider.SigType[],jnr.ffi.CallingConvention,boolean)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.CallingConvention getNativeCallingConvention(java.lang.reflect.Method)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.NativeType getMethodParameterNativeType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection)
jnr.ffi.provider.jffi.InvokerUtil: jnr.ffi.NativeType getMethodResultNativeType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection)
jnr.ffi.provider.jffi.InvokerUtil: com.kenai.jffi.CallingConvention jffiConvention(jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.InvokerUtil: void <clinit>()
jnr.ffi.provider.jffi.InvokerUtil$1
jnr.ffi.provider.jffi.InvokerUtil$1: int[] $SwitchMap$jnr$ffi$CallingConvention
jnr.ffi.provider.jffi.InvokerUtil$1: void <clinit>()
jnr.ffi.provider.jffi.JNIInvokeInterface
jnr.ffi.provider.jffi.JNIInvokeInterface: int DestroyJavaVM
jnr.ffi.provider.jffi.JNIInvokeInterface: int AttachCurrentThread
jnr.ffi.provider.jffi.JNIInvokeInterface: int DetachCurrentThread
jnr.ffi.provider.jffi.JNIInvokeInterface: int GetEnv
jnr.ffi.provider.jffi.JNIInvokeInterface: int AttachCurrentThreadAsDaemon
jnr.ffi.provider.jffi.JNIInvokeInterface: JNIInvokeInterface()
jnr.ffi.provider.jffi.JNINativeInterface
jnr.ffi.provider.jffi.JNINativeInterface: int GetVersion
jnr.ffi.provider.jffi.JNINativeInterface: int DefineClass
jnr.ffi.provider.jffi.JNINativeInterface: int FindClass
jnr.ffi.provider.jffi.JNINativeInterface: int FromReflectedMethod
jnr.ffi.provider.jffi.JNINativeInterface: int FromReflectedField
jnr.ffi.provider.jffi.JNINativeInterface: int ToReflectedMethod
jnr.ffi.provider.jffi.JNINativeInterface: int GetSuperclass
jnr.ffi.provider.jffi.JNINativeInterface: int IsAssignableFrom
jnr.ffi.provider.jffi.JNINativeInterface: int ToReflectedField
jnr.ffi.provider.jffi.JNINativeInterface: int Throw
jnr.ffi.provider.jffi.JNINativeInterface: int ThrowNew
jnr.ffi.provider.jffi.JNINativeInterface: int ExceptionOccurred
jnr.ffi.provider.jffi.JNINativeInterface: int ExceptionDescribe
jnr.ffi.provider.jffi.JNINativeInterface: int ExceptionClear
jnr.ffi.provider.jffi.JNINativeInterface: int FatalError
jnr.ffi.provider.jffi.JNINativeInterface: int PushLocalFrame
jnr.ffi.provider.jffi.JNINativeInterface: int PopLocalFrame
jnr.ffi.provider.jffi.JNINativeInterface: int NewGlobalRef
jnr.ffi.provider.jffi.JNINativeInterface: int DeleteGlobalRef
jnr.ffi.provider.jffi.JNINativeInterface: int DeleteLocalRef
jnr.ffi.provider.jffi.JNINativeInterface: int IsSameObject
jnr.ffi.provider.jffi.JNINativeInterface: int NewLocalRef
jnr.ffi.provider.jffi.JNINativeInterface: int EnsureLocalCapacity
jnr.ffi.provider.jffi.JNINativeInterface: int AllocObject
jnr.ffi.provider.jffi.JNINativeInterface: int NewObject
jnr.ffi.provider.jffi.JNINativeInterface: int NewObjectV
jnr.ffi.provider.jffi.JNINativeInterface: int NewObjectA
jnr.ffi.provider.jffi.JNINativeInterface: int GetObjectClass
jnr.ffi.provider.jffi.JNINativeInterface: int IsInstanceOf
jnr.ffi.provider.jffi.JNINativeInterface: int GetMethodID
jnr.ffi.provider.jffi.JNINativeInterface: int CallObjectMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallObjectMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallObjectMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallBooleanMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallBooleanMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallBooleanMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallByteMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallByteMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallByteMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallCharMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallCharMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallCharMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallShortMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallShortMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallShortMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallIntMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallIntMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallIntMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallLongMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallLongMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallLongMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallFloatMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallFloatMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallFloatMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallDoubleMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallDoubleMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallDoubleMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallVoidMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallVoidMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallVoidMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualObjectMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualObjectMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualObjectMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualBooleanMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualBooleanMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualBooleanMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualByteMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualByteMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualByteMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualCharMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualCharMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualCharMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualShortMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualShortMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualShortMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualIntMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualIntMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualIntMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualLongMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualLongMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualLongMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualFloatMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualFloatMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualFloatMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualDoubleMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualDoubleMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualDoubleMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualVoidMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualVoidMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallNonvirtualVoidMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int GetFieldID
jnr.ffi.provider.jffi.JNINativeInterface: int GetObjectField
jnr.ffi.provider.jffi.JNINativeInterface: int GetBooleanField
jnr.ffi.provider.jffi.JNINativeInterface: int GetByteField
jnr.ffi.provider.jffi.JNINativeInterface: int GetCharField
jnr.ffi.provider.jffi.JNINativeInterface: int GetShortField
jnr.ffi.provider.jffi.JNINativeInterface: int GetIntField
jnr.ffi.provider.jffi.JNINativeInterface: int GetLongField
jnr.ffi.provider.jffi.JNINativeInterface: int GetFloatField
jnr.ffi.provider.jffi.JNINativeInterface: int GetDoubleField
jnr.ffi.provider.jffi.JNINativeInterface: int SetObjectField
jnr.ffi.provider.jffi.JNINativeInterface: int SetBooleanField
jnr.ffi.provider.jffi.JNINativeInterface: int SetByteField
jnr.ffi.provider.jffi.JNINativeInterface: int SetCharField
jnr.ffi.provider.jffi.JNINativeInterface: int SetShortField
jnr.ffi.provider.jffi.JNINativeInterface: int SetIntField
jnr.ffi.provider.jffi.JNINativeInterface: int SetLongField
jnr.ffi.provider.jffi.JNINativeInterface: int SetFloatField
jnr.ffi.provider.jffi.JNINativeInterface: int SetDoubleField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticMethodID
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticObjectMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticObjectMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticObjectMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticBooleanMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticBooleanMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticBooleanMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticByteMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticByteMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticByteMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticCharMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticCharMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticCharMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticShortMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticShortMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticShortMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticIntMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticIntMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticIntMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticLongMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticLongMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticLongMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticFloatMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticFloatMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticFloatMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticDoubleMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticDoubleMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticDoubleMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticVoidMethod
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticVoidMethodV
jnr.ffi.provider.jffi.JNINativeInterface: int CallStaticVoidMethodA
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticFieldID
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticObjectField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticBooleanField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticByteField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticCharField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticShortField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticIntField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticLongField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticFloatField
jnr.ffi.provider.jffi.JNINativeInterface: int GetStaticDoubleField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticObjectField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticBooleanField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticByteField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticCharField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticShortField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticIntField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticLongField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticFloatField
jnr.ffi.provider.jffi.JNINativeInterface: int SetStaticDoubleField
jnr.ffi.provider.jffi.JNINativeInterface: int NewString
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringLength
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringChars
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseStringChars
jnr.ffi.provider.jffi.JNINativeInterface: int NewStringUTF
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringUTFLength
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringUTFChars
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseStringUTFChars
jnr.ffi.provider.jffi.JNINativeInterface: int GetArrayLength
jnr.ffi.provider.jffi.JNINativeInterface: int NewObjectArray
jnr.ffi.provider.jffi.JNINativeInterface: int GetObjectArrayElement
jnr.ffi.provider.jffi.JNINativeInterface: int SetObjectArrayElement
jnr.ffi.provider.jffi.JNINativeInterface: int NewBooleanArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewByteArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewCharArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewShortArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewIntArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewLongArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewFloatArray
jnr.ffi.provider.jffi.JNINativeInterface: int NewDoubleArray
jnr.ffi.provider.jffi.JNINativeInterface: int GetBooleanArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetByteArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetCharArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetShortArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetIntArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetLongArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetFloatArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetDoubleArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseBooleanArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseByteArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseCharArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseShortArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseIntArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseLongArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseFloatArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseDoubleArrayElements
jnr.ffi.provider.jffi.JNINativeInterface: int GetBooleanArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetByteArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetCharArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetShortArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetIntArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetLongArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetFloatArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetDoubleArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetBooleanArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetByteArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetCharArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetShortArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetIntArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetLongArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetFloatArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int SetDoubleArrayRegion
jnr.ffi.provider.jffi.JNINativeInterface: int RegisterNatives
jnr.ffi.provider.jffi.JNINativeInterface: int UnregisterNatives
jnr.ffi.provider.jffi.JNINativeInterface: int MonitorEnter
jnr.ffi.provider.jffi.JNINativeInterface: int MonitorExit
jnr.ffi.provider.jffi.JNINativeInterface: int GetJavaVM
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringUTFRegion
jnr.ffi.provider.jffi.JNINativeInterface: int GetPrimitiveArrayCritical
jnr.ffi.provider.jffi.JNINativeInterface: int ReleasePrimitiveArrayCritical
jnr.ffi.provider.jffi.JNINativeInterface: int GetStringCritical
jnr.ffi.provider.jffi.JNINativeInterface: int ReleaseStringCritical
jnr.ffi.provider.jffi.JNINativeInterface: int NewWeakGlobalRef
jnr.ffi.provider.jffi.JNINativeInterface: int DeleteWeakGlobalRef
jnr.ffi.provider.jffi.JNINativeInterface: int ExceptionCheck
jnr.ffi.provider.jffi.JNINativeInterface: int NewDirectByteBuffer
jnr.ffi.provider.jffi.JNINativeInterface: int GetDirectBufferAddress
jnr.ffi.provider.jffi.JNINativeInterface: int GetDirectBufferCapacity
jnr.ffi.provider.jffi.JNINativeInterface: int GetObjectRefType
jnr.ffi.provider.jffi.JNINativeInterface: JNINativeInterface()
jnr.ffi.provider.jffi.LibraryLoader
jnr.ffi.provider.jffi.LibraryLoader: LibraryLoader()
jnr.ffi.provider.jffi.LibraryLoader: java.lang.Object loadLibrary(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map)
jnr.ffi.provider.jffi.LocalVariable
jnr.ffi.provider.jffi.LocalVariable: java.lang.Class type
jnr.ffi.provider.jffi.LocalVariable: int idx
jnr.ffi.provider.jffi.LocalVariable: LocalVariable(java.lang.Class,int)
jnr.ffi.provider.jffi.LocalVariableAllocator
jnr.ffi.provider.jffi.LocalVariableAllocator: int nextIndex
jnr.ffi.provider.jffi.LocalVariableAllocator: LocalVariableAllocator(jnr.ffi.provider.SigType[])
jnr.ffi.provider.jffi.LocalVariableAllocator: LocalVariableAllocator(java.lang.Class[])
jnr.ffi.provider.jffi.LocalVariableAllocator: LocalVariableAllocator(int)
jnr.ffi.provider.jffi.LocalVariableAllocator: jnr.ffi.provider.jffi.LocalVariable allocate(java.lang.Class)
jnr.ffi.provider.jffi.LocalVariableAllocator: int getSpaceUsed()
jnr.ffi.provider.jffi.MemoryUtil
jnr.ffi.provider.jffi.MemoryUtil: MemoryUtil()
jnr.ffi.provider.jffi.MemoryUtil: jnr.ffi.Pointer newPointer(jnr.ffi.Runtime,long)
jnr.ffi.provider.jffi.MemoryUtil: jnr.ffi.Pointer newPointer(jnr.ffi.Runtime,int)
jnr.ffi.provider.jffi.MemoryUtil: jnr.ffi.Pointer newPointer(jnr.ffi.Runtime,long,long)
jnr.ffi.provider.jffi.MethodGenerator
jnr.ffi.provider.jffi.MethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.MethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.NativeClosureFactory
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.NativeClosureFactory: java.util.concurrent.ConcurrentMap closures
jnr.ffi.provider.jffi.NativeClosureFactory: com.kenai.jffi.CallContext callContext
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosureProxy$Factory closureProxyFactory
jnr.ffi.provider.jffi.NativeClosureFactory: java.util.concurrent.ConcurrentLinkedQueue freeQueue
jnr.ffi.provider.jffi.NativeClosureFactory: com.kenai.jffi.ClosureMagazine currentMagazine
jnr.ffi.provider.jffi.NativeClosureFactory: NativeClosureFactory(jnr.ffi.Runtime,com.kenai.jffi.CallContext,jnr.ffi.provider.jffi.NativeClosureProxy$Factory)
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosureFactory newClosureFactory(jnr.ffi.Runtime,java.lang.Class,jnr.ffi.mapper.SignatureTypeMapper,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.NativeClosureFactory: void expunge(jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference,java.lang.Integer)
jnr.ffi.provider.jffi.NativeClosureFactory: void recycle(jnr.ffi.provider.jffi.NativeClosurePointer)
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosurePointer allocateClosurePointer()
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosurePointer newClosure(java.lang.Object,java.lang.Integer)
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference newClosureReference(java.lang.Object,java.lang.Integer)
jnr.ffi.provider.jffi.NativeClosureFactory: jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference getClosureReference(java.lang.Object)
jnr.ffi.provider.jffi.NativeClosureFactory: void access$000(jnr.ffi.provider.jffi.NativeClosureFactory,jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference,java.lang.Integer)
jnr.ffi.provider.jffi.NativeClosureFactory: void access$100(jnr.ffi.provider.jffi.NativeClosureFactory,jnr.ffi.provider.jffi.NativeClosurePointer)
jnr.ffi.provider.jffi.NativeClosureFactory$1
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference next
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.provider.jffi.NativeClosureFactory factory
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.provider.jffi.NativeClosurePointer pointer
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: java.lang.Integer key
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.provider.jffi.NativeClosureFactory this$0
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: NativeClosureFactory$ClosureReference(jnr.ffi.provider.jffi.NativeClosureFactory,java.lang.Object,java.lang.Integer,jnr.ffi.provider.jffi.NativeClosureFactory,jnr.ffi.provider.jffi.NativeClosurePointer)
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: void finalizeReferent()
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: java.lang.Object getCallable()
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.Pointer getPointer()
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: jnr.ffi.provider.jffi.NativeClosurePointer access$200(jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference)
jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference: NativeClosureFactory$ClosureReference(jnr.ffi.provider.jffi.NativeClosureFactory,java.lang.Object,java.lang.Integer,jnr.ffi.provider.jffi.NativeClosureFactory,jnr.ffi.provider.jffi.NativeClosurePointer,jnr.ffi.provider.jffi.NativeClosureFactory$1)
jnr.ffi.provider.jffi.NativeClosureManager
jnr.ffi.provider.jffi.NativeClosureManager: java.util.Map factories
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.mapper.SignatureTypeMapper typeMapper
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.provider.jffi.AsmClassLoader classLoader
jnr.ffi.provider.jffi.NativeClosureManager: NativeClosureManager(jnr.ffi.Runtime,jnr.ffi.mapper.SignatureTypeMapper,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.provider.jffi.NativeClosureFactory getClosureFactory(java.lang.Class)
jnr.ffi.provider.jffi.NativeClosureManager: java.lang.Object newClosure(java.lang.Class,java.lang.Object)
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.Pointer getClosurePointer(java.lang.Class,java.lang.Object)
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.provider.jffi.NativeClosureFactory initClosureFactory(java.lang.Class)
jnr.ffi.provider.jffi.NativeClosureManager: jnr.ffi.mapper.ToNativeConverter newClosureSite(java.lang.Class)
jnr.ffi.provider.jffi.NativeClosureManager$1
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: jnr.ffi.provider.jffi.NativeClosureFactory factory
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: jnr.ffi.provider.jffi.NativeClosureFactory$ClosureReference closureReference
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: NativeClosureManager$ClosureSite(jnr.ffi.provider.jffi.NativeClosureFactory)
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: jnr.ffi.Pointer toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: java.lang.Class nativeType()
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.NativeClosureManager$ClosureSite: NativeClosureManager$ClosureSite(jnr.ffi.provider.jffi.NativeClosureFactory,jnr.ffi.provider.jffi.NativeClosureManager$1)
jnr.ffi.provider.jffi.NativeClosurePointer
jnr.ffi.provider.jffi.NativeClosurePointer: com.kenai.jffi.Closure$Handle handle
jnr.ffi.provider.jffi.NativeClosurePointer: jnr.ffi.provider.jffi.NativeClosureProxy proxy
jnr.ffi.provider.jffi.NativeClosurePointer: NativeClosurePointer(jnr.ffi.Runtime,com.kenai.jffi.Closure$Handle,jnr.ffi.provider.jffi.NativeClosureProxy)
jnr.ffi.provider.jffi.NativeClosurePointer: long size()
jnr.ffi.provider.jffi.NativeClosureProxy
jnr.ffi.provider.jffi.NativeClosureProxy: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.NativeClosureProxy: java.lang.ref.Reference closureReference
jnr.ffi.provider.jffi.NativeClosureProxy: boolean DEBUG
jnr.ffi.provider.jffi.NativeClosureProxy: java.util.concurrent.atomic.AtomicLong nextClassID
jnr.ffi.provider.jffi.NativeClosureProxy: NativeClosureProxy(jnr.ffi.provider.jffi.NativeRuntime)
jnr.ffi.provider.jffi.NativeClosureProxy: java.lang.Object getCallable()
jnr.ffi.provider.jffi.NativeClosureProxy: jnr.ffi.provider.jffi.NativeClosureProxy$Factory newProxyFactory(jnr.ffi.Runtime,java.lang.reflect.Method,jnr.ffi.provider.ToNativeType,jnr.ffi.provider.FromNativeType[],jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.NativeClosureProxy: boolean isReturnTypeSupported(java.lang.Class)
jnr.ffi.provider.jffi.NativeClosureProxy: boolean isParameterTypeSupported(java.lang.Class)
jnr.ffi.provider.jffi.NativeClosureProxy: java.lang.Class getNativeClass(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NativeClosureProxy: void <clinit>()
jnr.ffi.provider.jffi.NativeClosureProxy$1
jnr.ffi.provider.jffi.NativeClosureProxy$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.NativeClosureProxy$1: void <clinit>()
jnr.ffi.provider.jffi.NativeClosureProxy$Factory
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: java.lang.reflect.Constructor constructor
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: java.lang.Object[] objectFields
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: java.lang.reflect.Method invokeMethod
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: NativeClosureProxy$Factory(jnr.ffi.Runtime,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Object[])
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: jnr.ffi.provider.jffi.NativeClosureProxy newClosureProxy()
jnr.ffi.provider.jffi.NativeClosureProxy$Factory: java.lang.reflect.Method getInvokeMethod()
jnr.ffi.provider.jffi.NativeFinalizer
jnr.ffi.provider.jffi.NativeFinalizer: jnr.ffi.util.ref.FinalizableReferenceQueue finalizerQueue
jnr.ffi.provider.jffi.NativeFinalizer: NativeFinalizer()
jnr.ffi.provider.jffi.NativeFinalizer: jnr.ffi.provider.jffi.NativeFinalizer getInstance()
jnr.ffi.provider.jffi.NativeFinalizer: jnr.ffi.util.ref.FinalizableReferenceQueue getFinalizerQueue()
jnr.ffi.provider.jffi.NativeFinalizer$SingletonHolder
jnr.ffi.provider.jffi.NativeFinalizer$SingletonHolder: jnr.ffi.provider.jffi.NativeFinalizer INSTANCE
jnr.ffi.provider.jffi.NativeFinalizer$SingletonHolder: NativeFinalizer$SingletonHolder()
jnr.ffi.provider.jffi.NativeFinalizer$SingletonHolder: jnr.ffi.provider.jffi.NativeFinalizer access$000()
jnr.ffi.provider.jffi.NativeFinalizer$SingletonHolder: void <clinit>()
jnr.ffi.provider.jffi.NativeFunctionMapperContext
jnr.ffi.provider.jffi.NativeFunctionMapperContext: jnr.ffi.provider.jffi.NativeLibrary library
jnr.ffi.provider.jffi.NativeFunctionMapperContext: java.util.Collection annotations
jnr.ffi.provider.jffi.NativeFunctionMapperContext: NativeFunctionMapperContext(jnr.ffi.provider.jffi.NativeLibrary,java.util.Collection)
jnr.ffi.provider.jffi.NativeFunctionMapperContext: jnr.ffi.Library getLibrary()
jnr.ffi.provider.jffi.NativeFunctionMapperContext: boolean isSymbolPresent(java.lang.String)
jnr.ffi.provider.jffi.NativeFunctionMapperContext: java.util.Collection getAnnotations()
jnr.ffi.provider.jffi.NativeLibrary
jnr.ffi.provider.jffi.NativeLibrary: java.util.List libraryNames
jnr.ffi.provider.jffi.NativeLibrary: java.util.List searchPaths
jnr.ffi.provider.jffi.NativeLibrary: java.util.List nativeLibraries
jnr.ffi.provider.jffi.NativeLibrary: java.util.regex.Pattern BAD_ELF
jnr.ffi.provider.jffi.NativeLibrary: java.util.regex.Pattern ELF_GROUP
jnr.ffi.provider.jffi.NativeLibrary: NativeLibrary(java.util.Collection,java.util.Collection)
jnr.ffi.provider.jffi.NativeLibrary: java.lang.String locateLibrary(java.lang.String)
jnr.ffi.provider.jffi.NativeLibrary: long getSymbolAddress(java.lang.String)
jnr.ffi.provider.jffi.NativeLibrary: long findSymbolAddress(java.lang.String)
jnr.ffi.provider.jffi.NativeLibrary: java.util.List getNativeLibraries()
jnr.ffi.provider.jffi.NativeLibrary: java.util.List loadNativeLibraries()
jnr.ffi.provider.jffi.NativeLibrary: com.kenai.jffi.Library openLibrary(java.lang.String)
jnr.ffi.provider.jffi.NativeLibrary: java.lang.String readAll(java.io.File)
jnr.ffi.provider.jffi.NativeLibrary: void <clinit>()
jnr.ffi.provider.jffi.NativeLibraryLoader
jnr.ffi.provider.jffi.NativeLibraryLoader: boolean ASM_ENABLED
jnr.ffi.provider.jffi.NativeLibraryLoader: NativeLibraryLoader(java.lang.Class)
jnr.ffi.provider.jffi.NativeLibraryLoader: java.lang.Object loadLibrary(java.lang.Class,java.util.Collection,java.util.Collection,java.util.Map)
jnr.ffi.provider.jffi.NativeLibraryLoader: void <clinit>()
jnr.ffi.provider.jffi.NativeMemoryManager
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.NativeMemoryManager: long addressMask
jnr.ffi.provider.jffi.NativeMemoryManager: NativeMemoryManager(jnr.ffi.provider.jffi.NativeRuntime)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer allocate(int)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer allocateDirect(int)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer allocateDirect(int,boolean)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer allocateTemporary(int)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer allocateTemporary(int,boolean)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer newPointer(java.nio.ByteBuffer)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer newPointer(long)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer newPointer(long,long)
jnr.ffi.provider.jffi.NativeMemoryManager: jnr.ffi.Pointer newOpaquePointer(long)
jnr.ffi.provider.jffi.NativeRuntime
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.jffi.NativeMemoryManager mm
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.jffi.NativeClosureManager closureManager
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.Type[] aliases
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.jffi.NativeRuntime getInstance()
jnr.ffi.provider.jffi.NativeRuntime: NativeRuntime()
jnr.ffi.provider.jffi.NativeRuntime: java.util.EnumMap buildTypeMap()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.NativeType[] buildNativeTypeAliases()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.Type findType(jnr.ffi.TypeAlias)
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.jffi.NativeMemoryManager getMemoryManager()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.jffi.NativeClosureManager getClosureManager()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.ObjectReferenceManager newObjectReferenceManager()
jnr.ffi.provider.jffi.NativeRuntime: int getLastError()
jnr.ffi.provider.jffi.NativeRuntime: void setLastError(int)
jnr.ffi.provider.jffi.NativeRuntime: boolean isCompatible(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.NativeRuntime: boolean equals(java.lang.Object)
jnr.ffi.provider.jffi.NativeRuntime: int hashCode()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.Type jafflType(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.MemoryManager getMemoryManager()
jnr.ffi.provider.jffi.NativeRuntime: jnr.ffi.provider.ClosureManager getClosureManager()
jnr.ffi.provider.jffi.NativeRuntime: NativeRuntime(jnr.ffi.provider.jffi.NativeRuntime$1)
jnr.ffi.provider.jffi.NativeRuntime$1
jnr.ffi.provider.jffi.NativeRuntime$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.NativeRuntime$1: void <clinit>()
jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder
jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder: jnr.ffi.provider.jffi.NativeRuntime INSTANCE
jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder: NativeRuntime$SingletonHolder()
jnr.ffi.provider.jffi.NativeRuntime$SingletonHolder: void <clinit>()
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: com.kenai.jffi.Type type
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: jnr.ffi.NativeType nativeType
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: NativeRuntime$TypeDelegate(com.kenai.jffi.Type,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: int alignment()
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: int size()
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: jnr.ffi.NativeType getNativeType()
jnr.ffi.provider.jffi.NativeRuntime$TypeDelegate: java.lang.String toString()
jnr.ffi.provider.jffi.NoTrace
jnr.ffi.provider.jffi.NoX86
jnr.ffi.provider.jffi.NotImplMethodGenerator
jnr.ffi.provider.jffi.NotImplMethodGenerator: NotImplMethodGenerator()
jnr.ffi.provider.jffi.NotImplMethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.NotImplMethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.NullObjectParameterStrategy
jnr.ffi.provider.jffi.NullObjectParameterStrategy: jnr.ffi.provider.jffi.ParameterStrategy NULL
jnr.ffi.provider.jffi.NullObjectParameterStrategy: NullObjectParameterStrategy()
jnr.ffi.provider.jffi.NullObjectParameterStrategy: long address(java.lang.Object)
jnr.ffi.provider.jffi.NullObjectParameterStrategy: java.lang.Object object(java.lang.Object)
jnr.ffi.provider.jffi.NullObjectParameterStrategy: int offset(java.lang.Object)
jnr.ffi.provider.jffi.NullObjectParameterStrategy: int length(java.lang.Object)
jnr.ffi.provider.jffi.NullObjectParameterStrategy: void <clinit>()
jnr.ffi.provider.jffi.NumberUtil
jnr.ffi.provider.jffi.NumberUtil: NumberUtil()
jnr.ffi.provider.jffi.NumberUtil: java.lang.Class getBoxedClass(java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: java.lang.Class getPrimitiveClass(java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: boolean isPrimitiveInt(java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: void widen(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: void widen(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NumberUtil: void narrow(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: void convertPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class)
jnr.ffi.provider.jffi.NumberUtil: void convertPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NumberUtil: int sizeof(jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.NumberUtil: int sizeof(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.NumberUtil$1
jnr.ffi.provider.jffi.NumberUtil$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.NumberUtil$1: void <clinit>()
jnr.ffi.provider.jffi.ParameterStrategy
jnr.ffi.provider.jffi.ParameterStrategy: int objectCount
jnr.ffi.provider.jffi.ParameterStrategy: ParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType)
jnr.ffi.provider.jffi.ParameterStrategy: ParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType,com.kenai.jffi.ObjectParameterType)
jnr.ffi.provider.jffi.PointerParameterStrategy
jnr.ffi.provider.jffi.PointerParameterStrategy: jnr.ffi.provider.jffi.PointerParameterStrategy DIRECT
jnr.ffi.provider.jffi.PointerParameterStrategy: jnr.ffi.provider.jffi.PointerParameterStrategy HEAP
jnr.ffi.provider.jffi.PointerParameterStrategy: PointerParameterStrategy(com.kenai.jffi.ObjectParameterStrategy$StrategyType)
jnr.ffi.provider.jffi.PointerParameterStrategy: long address(java.lang.Object)
jnr.ffi.provider.jffi.PointerParameterStrategy: long address(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.PointerParameterStrategy: java.lang.Object object(java.lang.Object)
jnr.ffi.provider.jffi.PointerParameterStrategy: int offset(java.lang.Object)
jnr.ffi.provider.jffi.PointerParameterStrategy: int length(java.lang.Object)
jnr.ffi.provider.jffi.PointerParameterStrategy: void <clinit>()
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy BYTE
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy SHORT
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy CHAR
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy INT
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy LONG
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy FLOAT
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy DOUBLE
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy BOOLEAN
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: PrimitiveArrayParameterStrategy(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: long address(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: java.lang.Object object(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: int offset(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy: void <clinit>()
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$1
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$1: PrimitiveArrayParameterStrategy$1(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$1: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$2
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$2: PrimitiveArrayParameterStrategy$2(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$2: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$3
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$3: PrimitiveArrayParameterStrategy$3(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$3: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$4
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$4: PrimitiveArrayParameterStrategy$4(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$4: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$5
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$5: PrimitiveArrayParameterStrategy$5(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$5: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$6
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$6: PrimitiveArrayParameterStrategy$6(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$6: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$7
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$7: PrimitiveArrayParameterStrategy$7(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$7: int length(java.lang.Object)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$8
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$8: PrimitiveArrayParameterStrategy$8(com.kenai.jffi.ObjectParameterType$ComponentType)
jnr.ffi.provider.jffi.PrimitiveArrayParameterStrategy$8: int length(java.lang.Object)
jnr.ffi.provider.jffi.Provider
jnr.ffi.provider.jffi.Provider: jnr.ffi.provider.jffi.NativeRuntime runtime
jnr.ffi.provider.jffi.Provider: Provider()
jnr.ffi.provider.jffi.Provider: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.Provider: jnr.ffi.LibraryLoader createLibraryLoader(java.lang.Class)
jnr.ffi.provider.jffi.ReflectionLibraryLoader
jnr.ffi.provider.jffi.ReflectionLibraryLoader: ReflectionLibraryLoader()
jnr.ffi.provider.jffi.ReflectionLibraryLoader: java.lang.Object loadLibrary(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$1
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker: java.lang.reflect.Method method
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker: java.lang.String functionName
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker: ReflectionLibraryLoader$FunctionNotFoundInvoker(java.lang.reflect.Method,java.lang.String)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.jffi.ReflectionLibraryLoader$FunctionNotFoundInvoker: ReflectionLibraryLoader$FunctionNotFoundInvoker(java.lang.reflect.Method,java.lang.String,jnr.ffi.provider.jffi.ReflectionLibraryLoader$1)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$GetRuntimeInvoker
jnr.ffi.provider.jffi.ReflectionLibraryLoader$GetRuntimeInvoker: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.ReflectionLibraryLoader$GetRuntimeInvoker: ReflectionLibraryLoader$GetRuntimeInvoker(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$GetRuntimeInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.jffi.ReflectionLibraryLoader$GetRuntimeInvoker: ReflectionLibraryLoader$GetRuntimeInvoker(jnr.ffi.Runtime,jnr.ffi.provider.jffi.ReflectionLibraryLoader$1)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.jffi.DefaultInvokerFactory invokerFactory
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.jffi.AsmClassLoader classLoader
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.mapper.SignatureTypeMapper typeMapper
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.mapper.FunctionMapper functionMapper
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.CallingConvention libraryCallingConvention
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: boolean libraryIsSynchronized
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.jffi.NativeLibrary library
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: java.lang.Class interfaceClass
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: java.util.Map libraryOptions
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: ReflectionLibraryLoader$LazyLoader(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: java.util.Set entrySet()
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.Invoker get(java.lang.Object)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.Invoker getFunctionInvoker(java.lang.reflect.Method)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: jnr.ffi.provider.Invoker getVariableAccessor(java.lang.reflect.Method)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: java.lang.Object get(java.lang.Object)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader: ReflectionLibraryLoader$LazyLoader(jnr.ffi.provider.jffi.NativeLibrary,java.lang.Class,java.util.Map,jnr.ffi.provider.jffi.ReflectionLibraryLoader$1)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker: jnr.ffi.Variable variable
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker: ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker(jnr.ffi.Variable)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.jffi.ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker: ReflectionLibraryLoader$LazyLoader$VariableAcccessorInvoker(jnr.ffi.Variable,jnr.ffi.provider.jffi.ReflectionLibraryLoader$1)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$SynchronizedInvoker
jnr.ffi.provider.jffi.ReflectionLibraryLoader$SynchronizedInvoker: jnr.ffi.provider.Invoker invoker
jnr.ffi.provider.jffi.ReflectionLibraryLoader$SynchronizedInvoker: ReflectionLibraryLoader$SynchronizedInvoker(jnr.ffi.provider.Invoker)
jnr.ffi.provider.jffi.ReflectionLibraryLoader$SynchronizedInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator: ReflectionVariableAccessorGenerator()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator: jnr.ffi.Variable createVariableAccessor(jnr.ffi.Runtime,java.lang.reflect.Method,long,jnr.ffi.mapper.SignatureTypeMapper,java.util.Collection)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator: jnr.ffi.Variable getConvertingVariable(jnr.ffi.Variable,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator: jnr.ffi.Variable getNativeVariableAccessor(jnr.ffi.Pointer,jnr.ffi.provider.ToNativeType,jnr.ffi.provider.FromNativeType)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp getPointerOp(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$AbstractVariable
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$AbstractVariable: jnr.ffi.Pointer memory
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$AbstractVariable: ReflectionVariableAccessorGenerator$AbstractVariable(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: jnr.ffi.Variable variable
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: jnr.ffi.mapper.ToNativeConverter toNativeConverter
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: jnr.ffi.mapper.FromNativeConverter fromNativeConverter
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: ReflectionVariableAccessorGenerator$ConvertingVariable(jnr.ffi.Variable,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.FromNativeConverter)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: java.lang.Object get()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: void set(java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$ConvertingVariable: ReflectionVariableAccessorGenerator$ConvertingVariable(jnr.ffi.Variable,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.FromNativeConverter,jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: ReflectionVariableAccessorGenerator$DoublePointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$DoublePointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: ReflectionVariableAccessorGenerator$FloatPointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$FloatPointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: ReflectionVariableAccessorGenerator$Int16PointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int16PointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: ReflectionVariableAccessorGenerator$Int32PointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int32PointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: ReflectionVariableAccessorGenerator$Int64PointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int64PointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp INSTANCE
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: ReflectionVariableAccessorGenerator$Int8PointerOp()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: java.lang.Number get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: void put(jnr.ffi.Pointer,java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$Int8PointerOp: void <clinit>()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: jnr.ffi.mapper.DataConverter dataConverter
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter resultConverter
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp pointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: ReflectionVariableAccessorGenerator$NumberVariable(jnr.ffi.Pointer,jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp,jnr.ffi.mapper.DataConverter,jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: java.lang.Number get()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: void set(java.lang.Number)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: void set(java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: java.lang.Object get()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$NumberVariable: ReflectionVariableAccessorGenerator$NumberVariable(jnr.ffi.Pointer,jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp,jnr.ffi.mapper.DataConverter,jnr.ffi.provider.jffi.DefaultInvokerFactory$ResultConverter,jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp: java.lang.Object get(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerOp: void put(jnr.ffi.Pointer,java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: ReflectionVariableAccessorGenerator$PointerVariable(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: jnr.ffi.Pointer get()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: void set(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: void set(java.lang.Object)
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: java.lang.Object get()
jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$PointerVariable: ReflectionVariableAccessorGenerator$PointerVariable(jnr.ffi.Pointer,jnr.ffi.provider.jffi.ReflectionVariableAccessorGenerator$1)
jnr.ffi.provider.jffi.SimpleNativeContext
jnr.ffi.provider.jffi.SimpleNativeContext: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.SimpleNativeContext: java.util.Collection annotations
jnr.ffi.provider.jffi.SimpleNativeContext: SimpleNativeContext(jnr.ffi.Runtime,java.util.Collection)
jnr.ffi.provider.jffi.SimpleNativeContext: java.util.Collection getAnnotations()
jnr.ffi.provider.jffi.SimpleNativeContext: jnr.ffi.Runtime getRuntime()
jnr.ffi.provider.jffi.SkinnyMethodAdapter
jnr.ffi.provider.jffi.SkinnyMethodAdapter: boolean DEBUG
jnr.ffi.provider.jffi.SkinnyMethodAdapter: org.objectweb.asm.MethodVisitor method
jnr.ffi.provider.jffi.SkinnyMethodAdapter: SkinnyMethodAdapter(org.objectweb.asm.ClassVisitor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: org.objectweb.asm.MethodVisitor getMethodVisitor()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void setMethodVisitor(org.objectweb.asm.MethodVisitor)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aload(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aload(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aload(int[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aload(jnr.ffi.provider.jffi.LocalVariable[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iload(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iload(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iload(int[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iload(jnr.ffi.provider.jffi.LocalVariable[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lload(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lload(int[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lload(jnr.ffi.provider.jffi.LocalVariable[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fload(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fload(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fload(int[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dload(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dload(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dload(int[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void astore(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void astore(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void istore(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void istore(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lstore(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lstore(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fstore(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fstore(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dstore(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dstore(jnr.ffi.provider.jffi.LocalVariable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ldc(java.lang.Object)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void bipush(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void sipush(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void pushInt(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void pushBoolean(boolean)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokestatic(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokestatic(java.lang.Class,java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokespecial(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokespecial(java.lang.Class,java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokevirtual(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokevirtual(java.lang.Class,java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokeinterface(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokeinterface(java.lang.Class,java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void invokedynamic(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aprintln()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void areturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ireturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void freturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lreturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dreturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void newobj(java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void swap()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void swap2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void getstatic(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void putstatic(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void getfield(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void putfield(java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void voidreturn()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void anewarray(java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void multianewarray(java.lang.String,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void newarray(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_m1()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_0()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_1()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_3()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_4()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iconst_5()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lconst_0()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aconst_null()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void label(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void nop()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void pop()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void pop2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void arrayload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void arraystore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iarrayload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void barrayload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void barraystore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aaload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void aastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iaload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void laload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void baload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void bastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void saload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void sastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void caload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void castore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void faload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void daload()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dastore()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fcmpl()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fcmpg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dcmpl()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dcmpg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup_x2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup_x1()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup2_x2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup2_x1()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dup2()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void trycatch(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void trycatch(java.lang.String,java.lang.Runnable,java.lang.Runnable)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void go_to(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lookupswitch(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void athrow()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void instance_of(java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifeq(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iffalse(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifne(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iftrue(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_acmpne(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_acmpeq(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmple(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmpgt(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmpge(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmplt(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmpne(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void if_icmpeq(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void checkcast(java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void checkcast(java.lang.Class)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void start()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dump()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void end()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void line(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void line(int,org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifnonnull(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifnull(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iflt(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifle(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifgt(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ifge(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void arraylength()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ishr()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ishl()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iushr()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lshr()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lshl()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lushr()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lcmp()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iand()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ior()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ixor()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void land()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lor()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lxor()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iadd()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ladd()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fadd()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dadd()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void isub()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lsub()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fsub()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dsub()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void idiv()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void irem()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ineg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2d()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2l()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2f()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2s()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2c()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void i2b()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ldiv()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lrem()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lneg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void l2d()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void l2i()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void l2f()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fdiv()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void frem()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fneg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void f2d()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void f2i()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void f2l()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ddiv()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void drem()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dneg()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void d2f()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void d2i()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void d2l()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void imul()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void lmul()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void fmul()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void dmul()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iinc(int,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void iinc(jnr.ffi.provider.jffi.LocalVariable,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void monitorenter()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void monitorexit()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void jsr(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void ret(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitAnnotationWithFields(java.lang.String,boolean,java.util.Map)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitParameterAnnotationWithFields(int,java.lang.String,boolean,java.util.Map)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitAttribute(org.objectweb.asm.Attribute)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitCode()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitInsn(int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitIntInsn(int,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitVarInsn(int,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitTypeInsn(int,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitJumpInsn(int,org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitLabel(org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitLdcInsn(java.lang.Object)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitIincInsn(int,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitMultiANewArrayInsn(java.lang.String,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitLineNumber(int,org.objectweb.asm.Label)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitMaxs(int,int)
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitEnd()
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void tableswitch(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
jnr.ffi.provider.jffi.SkinnyMethodAdapter: void <clinit>()
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: java.util.Map converters
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: jnr.ffi.provider.jffi.AsmClassLoader classLoader
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: boolean asmEnabled
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: StructByReferenceResultConverterFactory(jnr.ffi.provider.jffi.AsmClassLoader,boolean)
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: jnr.ffi.mapper.FromNativeConverter get(java.lang.Class,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.StructByReferenceResultConverterFactory: jnr.ffi.mapper.FromNativeConverter createConverter(jnr.ffi.Runtime,java.lang.Class,jnr.ffi.mapper.FromNativeContext)
jnr.ffi.provider.jffi.StubCompiler
jnr.ffi.provider.jffi.StubCompiler: long errnoFunctionAddress
jnr.ffi.provider.jffi.StubCompiler: boolean hasPageManager
jnr.ffi.provider.jffi.StubCompiler: boolean hasAssembler
jnr.ffi.provider.jffi.StubCompiler: StubCompiler()
jnr.ffi.provider.jffi.StubCompiler: jnr.ffi.provider.jffi.StubCompiler newCompiler(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.StubCompiler: boolean canCompile(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.StubCompiler: void compile(com.kenai.jffi.Function,java.lang.String,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],java.lang.Class,java.lang.Class[],jnr.ffi.CallingConvention,boolean)
jnr.ffi.provider.jffi.StubCompiler: void attach(java.lang.Class)
jnr.ffi.provider.jffi.StubCompiler: long getErrnoSaveFunction()
jnr.ffi.provider.jffi.StubCompiler: boolean hasPageManager()
jnr.ffi.provider.jffi.StubCompiler: boolean hasAssembler()
jnr.ffi.provider.jffi.StubCompiler: void <clinit>()
jnr.ffi.provider.jffi.StubCompiler$1
jnr.ffi.provider.jffi.StubCompiler$1: int[] $SwitchMap$com$kenai$jffi$Platform$CPU
jnr.ffi.provider.jffi.StubCompiler$1: void <clinit>()
jnr.ffi.provider.jffi.StubCompiler$DummyStubCompiler
jnr.ffi.provider.jffi.StubCompiler$DummyStubCompiler: StubCompiler$DummyStubCompiler()
jnr.ffi.provider.jffi.StubCompiler$DummyStubCompiler: boolean canCompile(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.StubCompiler$DummyStubCompiler: void compile(com.kenai.jffi.Function,java.lang.String,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],java.lang.Class,java.lang.Class[],jnr.ffi.CallingConvention,boolean)
jnr.ffi.provider.jffi.StubCompiler$DummyStubCompiler: void attach(java.lang.Class)
jnr.ffi.provider.jffi.SymbolNotFoundError
jnr.ffi.provider.jffi.SymbolNotFoundError: SymbolNotFoundError(java.lang.String)
jnr.ffi.provider.jffi.ToNativeOp
jnr.ffi.provider.jffi.ToNativeOp: boolean isPrimitive
jnr.ffi.provider.jffi.ToNativeOp: java.util.Map operations
jnr.ffi.provider.jffi.ToNativeOp: ToNativeOp(boolean)
jnr.ffi.provider.jffi.ToNativeOp: boolean isPrimitive()
jnr.ffi.provider.jffi.ToNativeOp: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp: jnr.ffi.provider.jffi.ToNativeOp get(jnr.ffi.provider.ToNativeType)
jnr.ffi.provider.jffi.ToNativeOp: void <clinit>()
jnr.ffi.provider.jffi.ToNativeOp$AddressOp
jnr.ffi.provider.jffi.ToNativeOp$AddressOp: ToNativeOp$AddressOp()
jnr.ffi.provider.jffi.ToNativeOp$AddressOp: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp$Delegate
jnr.ffi.provider.jffi.ToNativeOp$Delegate: jnr.ffi.provider.jffi.ToNativeOp INSTANCE
jnr.ffi.provider.jffi.ToNativeOp$Delegate: ToNativeOp$Delegate()
jnr.ffi.provider.jffi.ToNativeOp$Delegate: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp$Delegate: void <clinit>()
jnr.ffi.provider.jffi.ToNativeOp$Float32
jnr.ffi.provider.jffi.ToNativeOp$Float32: ToNativeOp$Float32(java.lang.Class)
jnr.ffi.provider.jffi.ToNativeOp$Float32: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp$Float64
jnr.ffi.provider.jffi.ToNativeOp$Float64: ToNativeOp$Float64(java.lang.Class)
jnr.ffi.provider.jffi.ToNativeOp$Float64: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp$Integral
jnr.ffi.provider.jffi.ToNativeOp$Integral: ToNativeOp$Integral(java.lang.Class)
jnr.ffi.provider.jffi.ToNativeOp$Integral: void emitPrimitive(jnr.ffi.provider.jffi.SkinnyMethodAdapter,java.lang.Class,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.ToNativeOp$Primitive
jnr.ffi.provider.jffi.ToNativeOp$Primitive: java.lang.Class javaType
jnr.ffi.provider.jffi.ToNativeOp$Primitive: ToNativeOp$Primitive(java.lang.Class)
jnr.ffi.provider.jffi.TransientNativeMemory
jnr.ffi.provider.jffi.TransientNativeMemory: java.util.Map referenceSet
jnr.ffi.provider.jffi.TransientNativeMemory: java.lang.ThreadLocal currentMagazine
jnr.ffi.provider.jffi.TransientNativeMemory: int PAGES_PER_MAGAZINE
jnr.ffi.provider.jffi.TransientNativeMemory: jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel sentinel
jnr.ffi.provider.jffi.TransientNativeMemory: int size
jnr.ffi.provider.jffi.TransientNativeMemory: jnr.ffi.provider.jffi.DirectMemoryIO allocate(jnr.ffi.Runtime,int,int,boolean)
jnr.ffi.provider.jffi.TransientNativeMemory: TransientNativeMemory(jnr.ffi.Runtime,jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel,long,int)
jnr.ffi.provider.jffi.TransientNativeMemory: long align(long,long)
jnr.ffi.provider.jffi.TransientNativeMemory: long size()
jnr.ffi.provider.jffi.TransientNativeMemory: int hashCode()
jnr.ffi.provider.jffi.TransientNativeMemory: boolean equals(java.lang.Object)
jnr.ffi.provider.jffi.TransientNativeMemory: void dispose()
jnr.ffi.provider.jffi.TransientNativeMemory: int indexOf(long,byte,int)
jnr.ffi.provider.jffi.TransientNativeMemory: void putZeroTerminatedByteArray(long,byte[],int,int)
jnr.ffi.provider.jffi.TransientNativeMemory: void putString(long,java.lang.String,int,java.nio.charset.Charset)
jnr.ffi.provider.jffi.TransientNativeMemory: java.lang.String getString(long,int,java.nio.charset.Charset)
jnr.ffi.provider.jffi.TransientNativeMemory: java.lang.String getString(long)
jnr.ffi.provider.jffi.TransientNativeMemory: void putPointer(long,jnr.ffi.Pointer)
jnr.ffi.provider.jffi.TransientNativeMemory: jnr.ffi.Pointer getPointer(long,long)
jnr.ffi.provider.jffi.TransientNativeMemory: jnr.ffi.Pointer getPointer(long)
jnr.ffi.provider.jffi.TransientNativeMemory: int arrayLength()
jnr.ffi.provider.jffi.TransientNativeMemory: int arrayOffset()
jnr.ffi.provider.jffi.TransientNativeMemory: java.lang.Object array()
jnr.ffi.provider.jffi.TransientNativeMemory: boolean hasArray()
jnr.ffi.provider.jffi.TransientNativeMemory: long access$100(long,long)
jnr.ffi.provider.jffi.TransientNativeMemory: java.util.Map access$200()
jnr.ffi.provider.jffi.TransientNativeMemory: void <clinit>()
jnr.ffi.provider.jffi.TransientNativeMemory$1
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: java.lang.ref.Reference sentinelReference
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: com.kenai.jffi.PageManager pm
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: long page
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: long end
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: int pageCount
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: long memory
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: TransientNativeMemory$Magazine(jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel,com.kenai.jffi.PageManager,long,int)
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel sentinel()
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: long allocate(int,int)
jnr.ffi.provider.jffi.TransientNativeMemory$Magazine: void finalizeReferent()
jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel
jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel: TransientNativeMemory$Sentinel()
jnr.ffi.provider.jffi.TransientNativeMemory$Sentinel: TransientNativeMemory$Sentinel(jnr.ffi.provider.jffi.TransientNativeMemory$1)
jnr.ffi.provider.jffi.Types
jnr.ffi.provider.jffi.Types: java.lang.ref.Reference typeCacheReference
jnr.ffi.provider.jffi.Types: Types()
jnr.ffi.provider.jffi.Types: jnr.ffi.Type getType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection)
jnr.ffi.provider.jffi.Types: jnr.ffi.Type lookupAndCacheType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection)
jnr.ffi.provider.jffi.Types: jnr.ffi.Type lookupAliasedType(jnr.ffi.Runtime,java.util.Collection)
jnr.ffi.provider.jffi.Types: jnr.ffi.Type lookupType(jnr.ffi.Runtime,java.lang.Class,java.util.Collection)
jnr.ffi.provider.jffi.Util
jnr.ffi.provider.jffi.Util: Util()
jnr.ffi.provider.jffi.Util: boolean getBooleanProperty(java.lang.String,boolean)
jnr.ffi.provider.jffi.VariableAccessorGenerator
jnr.ffi.provider.jffi.VariableAccessorGenerator: java.util.concurrent.atomic.AtomicLong nextClassID
jnr.ffi.provider.jffi.VariableAccessorGenerator: jnr.ffi.Runtime runtime
jnr.ffi.provider.jffi.VariableAccessorGenerator: java.util.Map pointerOperations
jnr.ffi.provider.jffi.VariableAccessorGenerator: jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp POINTER_OP_POINTER
jnr.ffi.provider.jffi.VariableAccessorGenerator: VariableAccessorGenerator(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.VariableAccessorGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.Class,java.lang.String,long,java.lang.Class,java.util.Collection,jnr.ffi.mapper.SignatureTypeMapper,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.VariableAccessorGenerator: jnr.ffi.Variable buildVariableAccessor(jnr.ffi.Runtime,long,java.lang.Class,java.lang.Class,java.util.Collection,jnr.ffi.mapper.ToNativeConverter,jnr.ffi.mapper.FromNativeConverter,jnr.ffi.provider.jffi.AsmClassLoader)
jnr.ffi.provider.jffi.VariableAccessorGenerator: void op(java.util.Map,jnr.ffi.NativeType,java.lang.String,java.lang.Class)
jnr.ffi.provider.jffi.VariableAccessorGenerator: void <clinit>()
jnr.ffi.provider.jffi.VariableAccessorGenerator$1
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: java.lang.String getMethodName
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: java.lang.String putMethodName
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: java.lang.Class nativeIntClass
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: VariableAccessorGenerator$PointerOp(java.lang.String,java.lang.Class)
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: void put(jnr.ffi.provider.jffi.SkinnyMethodAdapter)
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: void get(jnr.ffi.provider.jffi.SkinnyMethodAdapter)
jnr.ffi.provider.jffi.VariableAccessorGenerator$PointerOp: VariableAccessorGenerator$PointerOp(java.lang.String,java.lang.Class,jnr.ffi.provider.jffi.VariableAccessorGenerator$1)
jnr.ffi.provider.jffi.X86Disassembler
jnr.ffi.provider.jffi.X86Disassembler: jnr.ffi.provider.jffi.X86Disassembler$UDis86 udis86
jnr.ffi.provider.jffi.X86Disassembler: jnr.ffi.Pointer ud
jnr.ffi.provider.jffi.X86Disassembler: jnr.ffi.provider.jffi.X86Disassembler$UDis86 loadUDis86()
jnr.ffi.provider.jffi.X86Disassembler: boolean isAvailable()
jnr.ffi.provider.jffi.X86Disassembler: jnr.ffi.provider.jffi.X86Disassembler create()
jnr.ffi.provider.jffi.X86Disassembler: X86Disassembler(jnr.ffi.provider.jffi.X86Disassembler$UDis86)
jnr.ffi.provider.jffi.X86Disassembler: void setSyntax(jnr.ffi.provider.jffi.X86Disassembler$Syntax)
jnr.ffi.provider.jffi.X86Disassembler: void setMode(jnr.ffi.provider.jffi.X86Disassembler$Mode)
jnr.ffi.provider.jffi.X86Disassembler: void setInputBuffer(jnr.ffi.Pointer,int)
jnr.ffi.provider.jffi.X86Disassembler: boolean disassemble()
jnr.ffi.provider.jffi.X86Disassembler: java.lang.String insn()
jnr.ffi.provider.jffi.X86Disassembler: long offset()
jnr.ffi.provider.jffi.X86Disassembler: java.lang.String hex()
jnr.ffi.provider.jffi.X86Disassembler$Mode
jnr.ffi.provider.jffi.X86Disassembler$Mode: jnr.ffi.provider.jffi.X86Disassembler$Mode I386
jnr.ffi.provider.jffi.X86Disassembler$Mode: jnr.ffi.provider.jffi.X86Disassembler$Mode X86_64
jnr.ffi.provider.jffi.X86Disassembler$Mode: jnr.ffi.provider.jffi.X86Disassembler$Mode[] $VALUES
jnr.ffi.provider.jffi.X86Disassembler$Mode: jnr.ffi.provider.jffi.X86Disassembler$Mode[] values()
jnr.ffi.provider.jffi.X86Disassembler$Mode: jnr.ffi.provider.jffi.X86Disassembler$Mode valueOf(java.lang.String)
jnr.ffi.provider.jffi.X86Disassembler$Mode: X86Disassembler$Mode(java.lang.String,int)
jnr.ffi.provider.jffi.X86Disassembler$Mode: void <clinit>()
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder: jnr.ffi.provider.jffi.X86Disassembler$UDis86 INSTANCE
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder: long intel
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder: long att
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder: X86Disassembler$SingletonHolder()
jnr.ffi.provider.jffi.X86Disassembler$SingletonHolder: void <clinit>()
jnr.ffi.provider.jffi.X86Disassembler$Syntax
jnr.ffi.provider.jffi.X86Disassembler$Syntax: jnr.ffi.provider.jffi.X86Disassembler$Syntax INTEL
jnr.ffi.provider.jffi.X86Disassembler$Syntax: jnr.ffi.provider.jffi.X86Disassembler$Syntax ATT
jnr.ffi.provider.jffi.X86Disassembler$Syntax: jnr.ffi.provider.jffi.X86Disassembler$Syntax[] $VALUES
jnr.ffi.provider.jffi.X86Disassembler$Syntax: jnr.ffi.provider.jffi.X86Disassembler$Syntax[] values()
jnr.ffi.provider.jffi.X86Disassembler$Syntax: jnr.ffi.provider.jffi.X86Disassembler$Syntax valueOf(java.lang.String)
jnr.ffi.provider.jffi.X86Disassembler$Syntax: X86Disassembler$Syntax(java.lang.String,int)
jnr.ffi.provider.jffi.X86Disassembler$Syntax: void <clinit>()
jnr.ffi.provider.jffi.X86Disassembler$UDis86
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_init(jnr.ffi.Pointer)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_set_mode(jnr.ffi.provider.jffi.X86Disassembler,int)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_set_pc(jnr.ffi.provider.jffi.X86Disassembler,int)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_set_input_buffer(jnr.ffi.provider.jffi.X86Disassembler,jnr.ffi.Pointer,long)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_set_vendor(jnr.ffi.provider.jffi.X86Disassembler,int)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_set_syntax(jnr.ffi.provider.jffi.X86Disassembler,long)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: void ud_input_skip(jnr.ffi.provider.jffi.X86Disassembler,long)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: int ud_input_end(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: int ud_decode(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: int ud_disassemble(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: java.lang.String ud_insn_asm(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: long ud_insn_ptr(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: long ud_insn_off(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: java.lang.String ud_insn_hex(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$UDis86: int ud_insn_len(jnr.ffi.provider.jffi.X86Disassembler)
jnr.ffi.provider.jffi.X86Disassembler$X86DisassemblerConverter
jnr.ffi.provider.jffi.X86Disassembler$X86DisassemblerConverter: X86Disassembler$X86DisassemblerConverter()
jnr.ffi.provider.jffi.X86Disassembler$X86DisassemblerConverter: jnr.ffi.Pointer toNative(jnr.ffi.provider.jffi.X86Disassembler,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.X86Disassembler$X86DisassemblerConverter: java.lang.Class nativeType()
jnr.ffi.provider.jffi.X86Disassembler$X86DisassemblerConverter: java.lang.Object toNative(java.lang.Object,jnr.ffi.mapper.ToNativeContext)
jnr.ffi.provider.jffi.X86MethodGenerator
jnr.ffi.provider.jffi.X86MethodGenerator: boolean ENABLED
jnr.ffi.provider.jffi.X86MethodGenerator: java.util.concurrent.atomic.AtomicLong nextMethodID
jnr.ffi.provider.jffi.X86MethodGenerator: jnr.ffi.provider.jffi.StubCompiler compiler
jnr.ffi.provider.jffi.X86MethodGenerator: X86MethodGenerator(jnr.ffi.provider.jffi.StubCompiler)
jnr.ffi.provider.jffi.X86MethodGenerator: boolean isSupported(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.X86MethodGenerator: void generate(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],boolean)
jnr.ffi.provider.jffi.X86MethodGenerator: void generateWrapper(jnr.ffi.provider.jffi.AsmBuilder,java.lang.String,com.kenai.jffi.Function,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],java.lang.String,java.lang.Class,java.lang.Class[])
jnr.ffi.provider.jffi.X86MethodGenerator: void attach(java.lang.Class)
jnr.ffi.provider.jffi.X86MethodGenerator: boolean isSupportedObjectParameterType(jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.X86MethodGenerator: boolean isSupportedType(jnr.ffi.provider.SigType)
jnr.ffi.provider.jffi.X86MethodGenerator: boolean isSupportedResult(jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.X86MethodGenerator: boolean isSupportedParameter(jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.X86MethodGenerator: java.lang.Class getNativeClass(jnr.ffi.NativeType)
jnr.ffi.provider.jffi.X86MethodGenerator: void <clinit>()
jnr.ffi.provider.jffi.X86MethodGenerator$1
jnr.ffi.provider.jffi.X86MethodGenerator$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.X86MethodGenerator$1: void <clinit>()
jnr.ffi.provider.jffi.X86_32StubCompiler
jnr.ffi.provider.jffi.X86_32StubCompiler: X86_32StubCompiler(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.X86_32StubCompiler: boolean canCompile(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.X86_32StubCompiler: void compile(com.kenai.jffi.Function,java.lang.String,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],java.lang.Class,java.lang.Class[],jnr.ffi.CallingConvention,boolean)
jnr.ffi.provider.jffi.X86_32StubCompiler: int parameterSize(jnr.ffi.provider.ParameterType)
jnr.ffi.provider.jffi.X86_32StubCompiler: int parameterSize(java.lang.Class)
jnr.ffi.provider.jffi.X86_32StubCompiler: int resultSize(jnr.ffi.provider.ResultType)
jnr.ffi.provider.jffi.X86_32StubCompiler: jnr.x86asm.Mem ptr(jnr.x86asm.Register,long,jnr.ffi.NativeType)
jnr.ffi.provider.jffi.X86_32StubCompiler$1
jnr.ffi.provider.jffi.X86_32StubCompiler$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.X86_32StubCompiler$1: void <clinit>()
jnr.ffi.provider.jffi.X86_64StubCompiler
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] srcRegisters8
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] srcRegisters16
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] srcRegisters32
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] srcRegisters64
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] dstRegisters32
jnr.ffi.provider.jffi.X86_64StubCompiler: jnr.x86asm.Register[] dstRegisters64
jnr.ffi.provider.jffi.X86_64StubCompiler: X86_64StubCompiler(jnr.ffi.Runtime)
jnr.ffi.provider.jffi.X86_64StubCompiler: boolean canCompile(jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],jnr.ffi.CallingConvention)
jnr.ffi.provider.jffi.X86_64StubCompiler: void compile(com.kenai.jffi.Function,java.lang.String,jnr.ffi.provider.ResultType,jnr.ffi.provider.ParameterType[],java.lang.Class,java.lang.Class[],jnr.ffi.CallingConvention,boolean)
jnr.ffi.provider.jffi.X86_64StubCompiler: int fCount(jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.X86_64StubCompiler: int iCount(jnr.ffi.provider.ParameterType[])
jnr.ffi.provider.jffi.X86_64StubCompiler: void <clinit>()
jnr.ffi.provider.jffi.X86_64StubCompiler$1
jnr.ffi.provider.jffi.X86_64StubCompiler$1: int[] $SwitchMap$jnr$ffi$NativeType
jnr.ffi.provider.jffi.X86_64StubCompiler$1: void <clinit>()
jnr.ffi.provider.jffi.platform.arm.linux.TypeAliases
jnr.ffi.provider.jffi.platform.arm.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.arm.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.arm.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.arm.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.darwin.TypeAliases
jnr.ffi.provider.jffi.platform.i386.darwin.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.darwin.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.darwin.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.darwin.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.freebsd.TypeAliases
jnr.ffi.provider.jffi.platform.i386.freebsd.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.freebsd.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.freebsd.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.freebsd.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.linux.TypeAliases
jnr.ffi.provider.jffi.platform.i386.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.openbsd.TypeAliases
jnr.ffi.provider.jffi.platform.i386.openbsd.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.openbsd.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.openbsd.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.openbsd.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.solaris.TypeAliases
jnr.ffi.provider.jffi.platform.i386.solaris.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.solaris.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.solaris.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.solaris.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.i386.windows.TypeAliases
jnr.ffi.provider.jffi.platform.i386.windows.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.i386.windows.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.i386.windows.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.i386.windows.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.mips.linux.TypeAliases
jnr.ffi.provider.jffi.platform.mips.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.mips.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.mips.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.mips.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.mipsel.linux.TypeAliases
jnr.ffi.provider.jffi.platform.mipsel.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.mipsel.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.mipsel.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.mipsel.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.ppc.aix.TypeAliases
jnr.ffi.provider.jffi.platform.ppc.aix.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.ppc.aix.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.ppc.aix.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.ppc.aix.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.ppc.darwin.TypeAliases
jnr.ffi.provider.jffi.platform.ppc.darwin.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.ppc.darwin.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.ppc.darwin.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.ppc.darwin.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.ppc.linux.TypeAliases
jnr.ffi.provider.jffi.platform.ppc.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.ppc.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.ppc.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.ppc.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.ppc64.linux.TypeAliases
jnr.ffi.provider.jffi.platform.ppc64.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.ppc64.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.ppc64.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.ppc64.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.ppc64le.linux.TypeAliases
jnr.ffi.provider.jffi.platform.ppc64le.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.ppc64le.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.ppc64le.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.ppc64le.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.s390.linux.TypeAliases
jnr.ffi.provider.jffi.platform.s390.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.s390.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.s390.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.s390.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.s390x.linux.TypeAliases
jnr.ffi.provider.jffi.platform.s390x.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.s390x.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.s390x.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.s390x.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.sparc.solaris.TypeAliases
jnr.ffi.provider.jffi.platform.sparc.solaris.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.sparc.solaris.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.sparc.solaris.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.sparc.solaris.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.sparcv9.solaris.TypeAliases
jnr.ffi.provider.jffi.platform.sparcv9.solaris.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.sparcv9.solaris.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.sparcv9.solaris.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.sparcv9.solaris.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.darwin.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.freebsd.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.freebsd.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.freebsd.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.freebsd.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.freebsd.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.linux.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.linux.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.linux.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.linux.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.linux.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.openbsd.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.openbsd.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.openbsd.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.openbsd.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.openbsd.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.solaris.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.solaris.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.solaris.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.solaris.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.solaris.TypeAliases: void <clinit>()
jnr.ffi.provider.jffi.platform.x86_64.windows.TypeAliases
jnr.ffi.provider.jffi.platform.x86_64.windows.TypeAliases: java.util.Map ALIASES
jnr.ffi.provider.jffi.platform.x86_64.windows.TypeAliases: TypeAliases()
jnr.ffi.provider.jffi.platform.x86_64.windows.TypeAliases: java.util.Map buildTypeMap()
jnr.ffi.provider.jffi.platform.x86_64.windows.TypeAliases: void <clinit>()
jnr.ffi.types.blkcnt_t
jnr.ffi.types.blksize_t
jnr.ffi.types.caddr_t
jnr.ffi.types.clock_t
jnr.ffi.types.dev_t
jnr.ffi.types.fsblkcnt_t
jnr.ffi.types.fsfilcnt_t
jnr.ffi.types.gid_t
jnr.ffi.types.id_t
jnr.ffi.types.in_addr_t
jnr.ffi.types.in_port_t
jnr.ffi.types.ino64_t
jnr.ffi.types.ino_t
jnr.ffi.types.int16_t
jnr.ffi.types.int32_t
jnr.ffi.types.int64_t
jnr.ffi.types.int8_t
jnr.ffi.types.intptr_t
jnr.ffi.types.key_t
jnr.ffi.types.mode_t
jnr.ffi.types.nlink_t
jnr.ffi.types.off_t
jnr.ffi.types.pid_t
jnr.ffi.types.rlim_t
jnr.ffi.types.sa_family_t
jnr.ffi.types.size_t
jnr.ffi.types.socklen_t
jnr.ffi.types.ssize_t
jnr.ffi.types.swblk_t
jnr.ffi.types.time_t
jnr.ffi.types.u_int16_t
jnr.ffi.types.u_int32_t
jnr.ffi.types.u_int64_t
jnr.ffi.types.u_int8_t
jnr.ffi.types.uid_t
jnr.ffi.types.uintptr_t
jnr.ffi.util.AnnotationNameComparator
jnr.ffi.util.AnnotationNameComparator: java.util.Comparator INSTANCE
jnr.ffi.util.AnnotationNameComparator: AnnotationNameComparator()
jnr.ffi.util.AnnotationNameComparator: java.util.Comparator getInstance()
jnr.ffi.util.AnnotationNameComparator: int compare(java.lang.annotation.Annotation,java.lang.annotation.Annotation)
jnr.ffi.util.AnnotationNameComparator: boolean equals(java.lang.Object)
jnr.ffi.util.AnnotationNameComparator: int compare(java.lang.Object,java.lang.Object)
jnr.ffi.util.AnnotationNameComparator: void <clinit>()
jnr.ffi.util.Annotations
jnr.ffi.util.Annotations: java.util.Collection EMPTY_ANNOTATIONS
jnr.ffi.util.Annotations: Annotations()
jnr.ffi.util.Annotations: java.util.Collection sortedAnnotationCollection(java.lang.annotation.Annotation[])
jnr.ffi.util.Annotations: java.util.Collection sortedAnnotationCollection(java.util.Collection)
jnr.ffi.util.Annotations: java.util.Collection mergeAnnotations(java.util.Collection,java.util.Collection)
jnr.ffi.util.Annotations: java.util.Collection mergeAnnotations(java.util.Collection[])
jnr.ffi.util.Annotations: void <clinit>()
jnr.ffi.util.BufferUtil
jnr.ffi.util.BufferUtil: BufferUtil()
jnr.ffi.util.BufferUtil: void putString(java.nio.ByteBuffer,java.nio.charset.Charset,java.lang.String)
jnr.ffi.util.BufferUtil: java.lang.String getString(java.nio.ByteBuffer,java.nio.charset.Charset)
jnr.ffi.util.BufferUtil: void putCharSequence(java.nio.ByteBuffer,java.nio.charset.Charset,java.lang.CharSequence)
jnr.ffi.util.BufferUtil: void putCharSequence(java.nio.ByteBuffer,java.nio.charset.CharsetEncoder,java.lang.CharSequence)
jnr.ffi.util.BufferUtil: java.lang.CharSequence getCharSequence(java.nio.ByteBuffer,java.nio.charset.Charset)
jnr.ffi.util.BufferUtil: java.lang.CharSequence getCharSequence(java.nio.ByteBuffer,java.nio.charset.CharsetDecoder)
jnr.ffi.util.BufferUtil: int positionOf(java.nio.ByteBuffer,byte)
jnr.ffi.util.BufferUtil: int indexOf(java.nio.ByteBuffer,byte)
jnr.ffi.util.BufferUtil: int indexOf(java.nio.ByteBuffer,int,byte)
jnr.ffi.util.BufferUtil: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int)
jnr.ffi.util.BufferUtil: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)
jnr.ffi.util.EnumMapper
jnr.ffi.util.EnumMapper: java.lang.Class enumClass
jnr.ffi.util.EnumMapper: java.lang.Integer[] intValues
jnr.ffi.util.EnumMapper: java.lang.Long[] longValues
jnr.ffi.util.EnumMapper: java.util.Map reverseLookupMap
jnr.ffi.util.EnumMapper: EnumMapper(java.lang.Class)
jnr.ffi.util.EnumMapper: jnr.ffi.util.EnumMapper getInstance(java.lang.Class)
jnr.ffi.util.EnumMapper: jnr.ffi.util.EnumMapper addMapper(java.lang.Class)
jnr.ffi.util.EnumMapper: java.lang.reflect.Method getNumberValueMethod(java.lang.Class,java.lang.Class)
jnr.ffi.util.EnumMapper: java.lang.Number reflectedNumberValue(java.lang.Enum,java.lang.reflect.Method)
jnr.ffi.util.EnumMapper: java.lang.Integer integerValue(java.lang.Enum)
jnr.ffi.util.EnumMapper: int intValue(java.lang.Enum)
jnr.ffi.util.EnumMapper: java.lang.Long longValue(java.lang.Enum)
jnr.ffi.util.EnumMapper: java.lang.Enum valueOf(int)
jnr.ffi.util.EnumMapper: java.lang.Enum valueOf(long)
jnr.ffi.util.EnumMapper: java.lang.Enum valueOf(java.lang.Number)
jnr.ffi.util.EnumMapper: java.lang.Enum reverseLookup(java.lang.Number)
jnr.ffi.util.EnumMapper: java.lang.Enum badValue(java.lang.Number)
jnr.ffi.util.EnumMapper$IntegerEnum
jnr.ffi.util.EnumMapper$IntegerEnum: int intValue()
jnr.ffi.util.EnumMapper$StaticDataHolder
jnr.ffi.util.EnumMapper$StaticDataHolder: java.util.Map MAPPERS
jnr.ffi.util.EnumMapper$StaticDataHolder: EnumMapper$StaticDataHolder()
jnr.ffi.util.EnumMapper$StaticDataHolder: java.util.Map access$000()
jnr.ffi.util.EnumMapper$StaticDataHolder: java.util.Map access$002(java.util.Map)
jnr.ffi.util.EnumMapper$StaticDataHolder: void <clinit>()
jnr.ffi.util.ref.FinalizablePhantomReference
jnr.ffi.util.ref.FinalizablePhantomReference: FinalizablePhantomReference(java.lang.Object,jnr.ffi.util.ref.FinalizableReferenceQueue)
jnr.ffi.util.ref.FinalizableReference
jnr.ffi.util.ref.FinalizableReference: void finalizeReferent()
jnr.ffi.util.ref.FinalizableReferenceQueue
jnr.ffi.util.ref.FinalizableReferenceQueue: java.util.logging.Logger logger
jnr.ffi.util.ref.FinalizableReferenceQueue: java.lang.String FINALIZER_CLASS_NAME
jnr.ffi.util.ref.FinalizableReferenceQueue: java.lang.reflect.Method startFinalizer
jnr.ffi.util.ref.FinalizableReferenceQueue: java.util.Map finalizerQueues
jnr.ffi.util.ref.FinalizableReferenceQueue: java.lang.ref.ReferenceQueue queue
jnr.ffi.util.ref.FinalizableReferenceQueue: boolean threadStarted
jnr.ffi.util.ref.FinalizableReferenceQueue: FinalizableReferenceQueue()
jnr.ffi.util.ref.FinalizableReferenceQueue: void cleanUp()
jnr.ffi.util.ref.FinalizableReferenceQueue: void pollReferenceQueue()
jnr.ffi.util.ref.FinalizableReferenceQueue: java.lang.Class loadFinalizer(jnr.ffi.util.ref.FinalizableReferenceQueue$FinalizerLoader[])
jnr.ffi.util.ref.FinalizableReferenceQueue: java.lang.reflect.Method getStartFinalizer(java.lang.Class)
jnr.ffi.util.ref.FinalizableReferenceQueue: void cleanUpAll()
jnr.ffi.util.ref.FinalizableReferenceQueue: java.util.logging.Logger access$000()
jnr.ffi.util.ref.FinalizableReferenceQueue: void <clinit>()
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader: java.lang.String LOADING_ERROR
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader: FinalizableReferenceQueue$DecoupledLoader()
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader: java.lang.Class loadFinalizer()
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader: java.net.URL getBaseUrl()
jnr.ffi.util.ref.FinalizableReferenceQueue$DecoupledLoader: java.net.URLClassLoader newLoader(java.net.URL)
jnr.ffi.util.ref.FinalizableReferenceQueue$DirectLoader
jnr.ffi.util.ref.FinalizableReferenceQueue$DirectLoader: FinalizableReferenceQueue$DirectLoader()
jnr.ffi.util.ref.FinalizableReferenceQueue$DirectLoader: java.lang.Class loadFinalizer()
jnr.ffi.util.ref.FinalizableReferenceQueue$FinalizerLoader
jnr.ffi.util.ref.FinalizableReferenceQueue$FinalizerLoader: java.lang.Class loadFinalizer()
jnr.ffi.util.ref.FinalizableReferenceQueue$SystemLoader
jnr.ffi.util.ref.FinalizableReferenceQueue$SystemLoader: FinalizableReferenceQueue$SystemLoader()
jnr.ffi.util.ref.FinalizableReferenceQueue$SystemLoader: java.lang.Class loadFinalizer()
jnr.ffi.util.ref.FinalizableSoftReference
jnr.ffi.util.ref.FinalizableSoftReference: FinalizableSoftReference(java.lang.Object,jnr.ffi.util.ref.FinalizableReferenceQueue)
jnr.ffi.util.ref.FinalizableWeakReference
jnr.ffi.util.ref.FinalizableWeakReference: FinalizableWeakReference(java.lang.Object,jnr.ffi.util.ref.FinalizableReferenceQueue)
jnr.ffi.util.ref.internal.Finalizer
jnr.ffi.util.ref.internal.Finalizer: java.util.logging.Logger logger
jnr.ffi.util.ref.internal.Finalizer: java.lang.String FINALIZABLE_REFERENCE
jnr.ffi.util.ref.internal.Finalizer: java.lang.ref.WeakReference finalizableReferenceClassReference
jnr.ffi.util.ref.internal.Finalizer: java.lang.ref.PhantomReference frqReference
jnr.ffi.util.ref.internal.Finalizer: java.lang.ref.ReferenceQueue queue
jnr.ffi.util.ref.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals
jnr.ffi.util.ref.internal.Finalizer: java.lang.ref.ReferenceQueue startFinalizer(java.lang.Class,java.lang.Object)
jnr.ffi.util.ref.internal.Finalizer: Finalizer(java.lang.Class,java.lang.Object)
jnr.ffi.util.ref.internal.Finalizer: void run()
jnr.ffi.util.ref.internal.Finalizer: boolean cleanUp(java.lang.ref.Reference)
jnr.ffi.util.ref.internal.Finalizer: java.lang.reflect.Method getFinalizeReferentMethod()
jnr.ffi.util.ref.internal.Finalizer: java.lang.reflect.Field getInheritableThreadLocalsField()
jnr.ffi.util.ref.internal.Finalizer: void <clinit>()
jnr.x86asm.CONDITION: jnr.x86asm.CONDITION[] values()
jnr.x86asm.CONDITION: jnr.x86asm.CONDITION valueOf(java.lang.String)
jnr.x86asm.CPU: jnr.x86asm.CPU[] values()
jnr.x86asm.CPU: jnr.x86asm.CPU valueOf(java.lang.String)
jnr.x86asm.CpuInfo$Vendor: jnr.x86asm.CpuInfo$Vendor[] values()
jnr.x86asm.CpuInfo$Vendor: jnr.x86asm.CpuInfo$Vendor valueOf(java.lang.String)
jnr.x86asm.ERROR_CODE: jnr.x86asm.ERROR_CODE[] values()
jnr.x86asm.ERROR_CODE: jnr.x86asm.ERROR_CODE valueOf(java.lang.String)
jnr.x86asm.HINT: jnr.x86asm.HINT[] values()
jnr.x86asm.HINT: jnr.x86asm.HINT valueOf(java.lang.String)
jnr.x86asm.INST_CODE: jnr.x86asm.INST_CODE[] values()
jnr.x86asm.INST_CODE: jnr.x86asm.INST_CODE valueOf(java.lang.String)
jnr.x86asm.InstructionGroup: jnr.x86asm.InstructionGroup[] values()
jnr.x86asm.InstructionGroup: jnr.x86asm.InstructionGroup valueOf(java.lang.String)
jnr.x86asm.LABEL_STATE: jnr.x86asm.LABEL_STATE[] values()
jnr.x86asm.LABEL_STATE: jnr.x86asm.LABEL_STATE valueOf(java.lang.String)
jnr.x86asm.RELOC_MODE: jnr.x86asm.RELOC_MODE[] values()
jnr.x86asm.RELOC_MODE: jnr.x86asm.RELOC_MODE valueOf(java.lang.String)
jnr.x86asm.RelocData$Type: jnr.x86asm.RelocData$Type[] values()
jnr.x86asm.RelocData$Type: jnr.x86asm.RelocData$Type valueOf(java.lang.String)
jnr.x86asm.SEGMENT: jnr.x86asm.SEGMENT[] values()
jnr.x86asm.SEGMENT: jnr.x86asm.SEGMENT valueOf(java.lang.String)
org.objectweb.asm.MethodVisitor: int api
org.objectweb.asm.MethodVisitor: org.objectweb.asm.MethodVisitor mv
org.objectweb.asm.MethodVisitor: MethodVisitor(int)
org.objectweb.asm.MethodVisitor: MethodVisitor(int,org.objectweb.asm.MethodVisitor)
org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)
org.objectweb.asm.MethodVisitor: void visitCode()
org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
org.objectweb.asm.MethodVisitor: void visitInsn(int)
org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)
org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)
org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)
org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)
org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)
org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)
org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)
org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)
org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)
org.objectweb.asm.MethodVisitor: void visitEnd()
